
Step_dir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08001000  08001000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003464  080010c0  080010c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08004524  08004524  00004524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  00010020  2**0
                  CONTENTS
  4 .ARM          00000000  08004618  08004618  00010020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004618  08004618  00010020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004618  08004618  00004618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800461c  0800461c  0000461c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004620  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000020  08004640  00010020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08004640  000100ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030bb  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c78  00000000  00000000  00013103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  00013d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  00014040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c02  00000000  00000000  00014288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002f60  00000000  00000000  00024e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056402  00000000  00000000  00027dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007e1ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a44  00000000  00000000  0007e23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080010c0 <__do_global_dtors_aux>:
 80010c0:	b510      	push	{r4, lr}
 80010c2:	4c06      	ldr	r4, [pc, #24]	; (80010dc <__do_global_dtors_aux+0x1c>)
 80010c4:	7823      	ldrb	r3, [r4, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d107      	bne.n	80010da <__do_global_dtors_aux+0x1a>
 80010ca:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <__do_global_dtors_aux+0x20>)
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <__do_global_dtors_aux+0x16>
 80010d0:	4804      	ldr	r0, [pc, #16]	; (80010e4 <__do_global_dtors_aux+0x24>)
 80010d2:	e000      	b.n	80010d6 <__do_global_dtors_aux+0x16>
 80010d4:	bf00      	nop
 80010d6:	2301      	movs	r3, #1
 80010d8:	7023      	strb	r3, [r4, #0]
 80010da:	bd10      	pop	{r4, pc}
 80010dc:	20000020 	.word	0x20000020
 80010e0:	00000000 	.word	0x00000000
 80010e4:	0800450c 	.word	0x0800450c

080010e8 <frame_dummy>:
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <frame_dummy+0x14>)
 80010ea:	b510      	push	{r4, lr}
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <frame_dummy+0x10>
 80010f0:	4903      	ldr	r1, [pc, #12]	; (8001100 <frame_dummy+0x18>)
 80010f2:	4804      	ldr	r0, [pc, #16]	; (8001104 <frame_dummy+0x1c>)
 80010f4:	e000      	b.n	80010f8 <frame_dummy+0x10>
 80010f6:	bf00      	nop
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	00000000 	.word	0x00000000
 8001100:	20000024 	.word	0x20000024
 8001104:	0800450c 	.word	0x0800450c

08001108 <__udivsi3>:
 8001108:	2200      	movs	r2, #0
 800110a:	0843      	lsrs	r3, r0, #1
 800110c:	428b      	cmp	r3, r1
 800110e:	d374      	bcc.n	80011fa <__udivsi3+0xf2>
 8001110:	0903      	lsrs	r3, r0, #4
 8001112:	428b      	cmp	r3, r1
 8001114:	d35f      	bcc.n	80011d6 <__udivsi3+0xce>
 8001116:	0a03      	lsrs	r3, r0, #8
 8001118:	428b      	cmp	r3, r1
 800111a:	d344      	bcc.n	80011a6 <__udivsi3+0x9e>
 800111c:	0b03      	lsrs	r3, r0, #12
 800111e:	428b      	cmp	r3, r1
 8001120:	d328      	bcc.n	8001174 <__udivsi3+0x6c>
 8001122:	0c03      	lsrs	r3, r0, #16
 8001124:	428b      	cmp	r3, r1
 8001126:	d30d      	bcc.n	8001144 <__udivsi3+0x3c>
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	0209      	lsls	r1, r1, #8
 800112c:	ba12      	rev	r2, r2
 800112e:	0c03      	lsrs	r3, r0, #16
 8001130:	428b      	cmp	r3, r1
 8001132:	d302      	bcc.n	800113a <__udivsi3+0x32>
 8001134:	1212      	asrs	r2, r2, #8
 8001136:	0209      	lsls	r1, r1, #8
 8001138:	d065      	beq.n	8001206 <__udivsi3+0xfe>
 800113a:	0b03      	lsrs	r3, r0, #12
 800113c:	428b      	cmp	r3, r1
 800113e:	d319      	bcc.n	8001174 <__udivsi3+0x6c>
 8001140:	e000      	b.n	8001144 <__udivsi3+0x3c>
 8001142:	0a09      	lsrs	r1, r1, #8
 8001144:	0bc3      	lsrs	r3, r0, #15
 8001146:	428b      	cmp	r3, r1
 8001148:	d301      	bcc.n	800114e <__udivsi3+0x46>
 800114a:	03cb      	lsls	r3, r1, #15
 800114c:	1ac0      	subs	r0, r0, r3
 800114e:	4152      	adcs	r2, r2
 8001150:	0b83      	lsrs	r3, r0, #14
 8001152:	428b      	cmp	r3, r1
 8001154:	d301      	bcc.n	800115a <__udivsi3+0x52>
 8001156:	038b      	lsls	r3, r1, #14
 8001158:	1ac0      	subs	r0, r0, r3
 800115a:	4152      	adcs	r2, r2
 800115c:	0b43      	lsrs	r3, r0, #13
 800115e:	428b      	cmp	r3, r1
 8001160:	d301      	bcc.n	8001166 <__udivsi3+0x5e>
 8001162:	034b      	lsls	r3, r1, #13
 8001164:	1ac0      	subs	r0, r0, r3
 8001166:	4152      	adcs	r2, r2
 8001168:	0b03      	lsrs	r3, r0, #12
 800116a:	428b      	cmp	r3, r1
 800116c:	d301      	bcc.n	8001172 <__udivsi3+0x6a>
 800116e:	030b      	lsls	r3, r1, #12
 8001170:	1ac0      	subs	r0, r0, r3
 8001172:	4152      	adcs	r2, r2
 8001174:	0ac3      	lsrs	r3, r0, #11
 8001176:	428b      	cmp	r3, r1
 8001178:	d301      	bcc.n	800117e <__udivsi3+0x76>
 800117a:	02cb      	lsls	r3, r1, #11
 800117c:	1ac0      	subs	r0, r0, r3
 800117e:	4152      	adcs	r2, r2
 8001180:	0a83      	lsrs	r3, r0, #10
 8001182:	428b      	cmp	r3, r1
 8001184:	d301      	bcc.n	800118a <__udivsi3+0x82>
 8001186:	028b      	lsls	r3, r1, #10
 8001188:	1ac0      	subs	r0, r0, r3
 800118a:	4152      	adcs	r2, r2
 800118c:	0a43      	lsrs	r3, r0, #9
 800118e:	428b      	cmp	r3, r1
 8001190:	d301      	bcc.n	8001196 <__udivsi3+0x8e>
 8001192:	024b      	lsls	r3, r1, #9
 8001194:	1ac0      	subs	r0, r0, r3
 8001196:	4152      	adcs	r2, r2
 8001198:	0a03      	lsrs	r3, r0, #8
 800119a:	428b      	cmp	r3, r1
 800119c:	d301      	bcc.n	80011a2 <__udivsi3+0x9a>
 800119e:	020b      	lsls	r3, r1, #8
 80011a0:	1ac0      	subs	r0, r0, r3
 80011a2:	4152      	adcs	r2, r2
 80011a4:	d2cd      	bcs.n	8001142 <__udivsi3+0x3a>
 80011a6:	09c3      	lsrs	r3, r0, #7
 80011a8:	428b      	cmp	r3, r1
 80011aa:	d301      	bcc.n	80011b0 <__udivsi3+0xa8>
 80011ac:	01cb      	lsls	r3, r1, #7
 80011ae:	1ac0      	subs	r0, r0, r3
 80011b0:	4152      	adcs	r2, r2
 80011b2:	0983      	lsrs	r3, r0, #6
 80011b4:	428b      	cmp	r3, r1
 80011b6:	d301      	bcc.n	80011bc <__udivsi3+0xb4>
 80011b8:	018b      	lsls	r3, r1, #6
 80011ba:	1ac0      	subs	r0, r0, r3
 80011bc:	4152      	adcs	r2, r2
 80011be:	0943      	lsrs	r3, r0, #5
 80011c0:	428b      	cmp	r3, r1
 80011c2:	d301      	bcc.n	80011c8 <__udivsi3+0xc0>
 80011c4:	014b      	lsls	r3, r1, #5
 80011c6:	1ac0      	subs	r0, r0, r3
 80011c8:	4152      	adcs	r2, r2
 80011ca:	0903      	lsrs	r3, r0, #4
 80011cc:	428b      	cmp	r3, r1
 80011ce:	d301      	bcc.n	80011d4 <__udivsi3+0xcc>
 80011d0:	010b      	lsls	r3, r1, #4
 80011d2:	1ac0      	subs	r0, r0, r3
 80011d4:	4152      	adcs	r2, r2
 80011d6:	08c3      	lsrs	r3, r0, #3
 80011d8:	428b      	cmp	r3, r1
 80011da:	d301      	bcc.n	80011e0 <__udivsi3+0xd8>
 80011dc:	00cb      	lsls	r3, r1, #3
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	4152      	adcs	r2, r2
 80011e2:	0883      	lsrs	r3, r0, #2
 80011e4:	428b      	cmp	r3, r1
 80011e6:	d301      	bcc.n	80011ec <__udivsi3+0xe4>
 80011e8:	008b      	lsls	r3, r1, #2
 80011ea:	1ac0      	subs	r0, r0, r3
 80011ec:	4152      	adcs	r2, r2
 80011ee:	0843      	lsrs	r3, r0, #1
 80011f0:	428b      	cmp	r3, r1
 80011f2:	d301      	bcc.n	80011f8 <__udivsi3+0xf0>
 80011f4:	004b      	lsls	r3, r1, #1
 80011f6:	1ac0      	subs	r0, r0, r3
 80011f8:	4152      	adcs	r2, r2
 80011fa:	1a41      	subs	r1, r0, r1
 80011fc:	d200      	bcs.n	8001200 <__udivsi3+0xf8>
 80011fe:	4601      	mov	r1, r0
 8001200:	4152      	adcs	r2, r2
 8001202:	4610      	mov	r0, r2
 8001204:	4770      	bx	lr
 8001206:	e7ff      	b.n	8001208 <__udivsi3+0x100>
 8001208:	b501      	push	{r0, lr}
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f8f0 	bl	80013f0 <__aeabi_idiv0>
 8001210:	bd02      	pop	{r1, pc}
 8001212:	46c0      	nop			; (mov r8, r8)

08001214 <__aeabi_uidivmod>:
 8001214:	2900      	cmp	r1, #0
 8001216:	d0f7      	beq.n	8001208 <__udivsi3+0x100>
 8001218:	e776      	b.n	8001108 <__udivsi3>
 800121a:	4770      	bx	lr

0800121c <__divsi3>:
 800121c:	4603      	mov	r3, r0
 800121e:	430b      	orrs	r3, r1
 8001220:	d47f      	bmi.n	8001322 <__divsi3+0x106>
 8001222:	2200      	movs	r2, #0
 8001224:	0843      	lsrs	r3, r0, #1
 8001226:	428b      	cmp	r3, r1
 8001228:	d374      	bcc.n	8001314 <__divsi3+0xf8>
 800122a:	0903      	lsrs	r3, r0, #4
 800122c:	428b      	cmp	r3, r1
 800122e:	d35f      	bcc.n	80012f0 <__divsi3+0xd4>
 8001230:	0a03      	lsrs	r3, r0, #8
 8001232:	428b      	cmp	r3, r1
 8001234:	d344      	bcc.n	80012c0 <__divsi3+0xa4>
 8001236:	0b03      	lsrs	r3, r0, #12
 8001238:	428b      	cmp	r3, r1
 800123a:	d328      	bcc.n	800128e <__divsi3+0x72>
 800123c:	0c03      	lsrs	r3, r0, #16
 800123e:	428b      	cmp	r3, r1
 8001240:	d30d      	bcc.n	800125e <__divsi3+0x42>
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	0209      	lsls	r1, r1, #8
 8001246:	ba12      	rev	r2, r2
 8001248:	0c03      	lsrs	r3, r0, #16
 800124a:	428b      	cmp	r3, r1
 800124c:	d302      	bcc.n	8001254 <__divsi3+0x38>
 800124e:	1212      	asrs	r2, r2, #8
 8001250:	0209      	lsls	r1, r1, #8
 8001252:	d065      	beq.n	8001320 <__divsi3+0x104>
 8001254:	0b03      	lsrs	r3, r0, #12
 8001256:	428b      	cmp	r3, r1
 8001258:	d319      	bcc.n	800128e <__divsi3+0x72>
 800125a:	e000      	b.n	800125e <__divsi3+0x42>
 800125c:	0a09      	lsrs	r1, r1, #8
 800125e:	0bc3      	lsrs	r3, r0, #15
 8001260:	428b      	cmp	r3, r1
 8001262:	d301      	bcc.n	8001268 <__divsi3+0x4c>
 8001264:	03cb      	lsls	r3, r1, #15
 8001266:	1ac0      	subs	r0, r0, r3
 8001268:	4152      	adcs	r2, r2
 800126a:	0b83      	lsrs	r3, r0, #14
 800126c:	428b      	cmp	r3, r1
 800126e:	d301      	bcc.n	8001274 <__divsi3+0x58>
 8001270:	038b      	lsls	r3, r1, #14
 8001272:	1ac0      	subs	r0, r0, r3
 8001274:	4152      	adcs	r2, r2
 8001276:	0b43      	lsrs	r3, r0, #13
 8001278:	428b      	cmp	r3, r1
 800127a:	d301      	bcc.n	8001280 <__divsi3+0x64>
 800127c:	034b      	lsls	r3, r1, #13
 800127e:	1ac0      	subs	r0, r0, r3
 8001280:	4152      	adcs	r2, r2
 8001282:	0b03      	lsrs	r3, r0, #12
 8001284:	428b      	cmp	r3, r1
 8001286:	d301      	bcc.n	800128c <__divsi3+0x70>
 8001288:	030b      	lsls	r3, r1, #12
 800128a:	1ac0      	subs	r0, r0, r3
 800128c:	4152      	adcs	r2, r2
 800128e:	0ac3      	lsrs	r3, r0, #11
 8001290:	428b      	cmp	r3, r1
 8001292:	d301      	bcc.n	8001298 <__divsi3+0x7c>
 8001294:	02cb      	lsls	r3, r1, #11
 8001296:	1ac0      	subs	r0, r0, r3
 8001298:	4152      	adcs	r2, r2
 800129a:	0a83      	lsrs	r3, r0, #10
 800129c:	428b      	cmp	r3, r1
 800129e:	d301      	bcc.n	80012a4 <__divsi3+0x88>
 80012a0:	028b      	lsls	r3, r1, #10
 80012a2:	1ac0      	subs	r0, r0, r3
 80012a4:	4152      	adcs	r2, r2
 80012a6:	0a43      	lsrs	r3, r0, #9
 80012a8:	428b      	cmp	r3, r1
 80012aa:	d301      	bcc.n	80012b0 <__divsi3+0x94>
 80012ac:	024b      	lsls	r3, r1, #9
 80012ae:	1ac0      	subs	r0, r0, r3
 80012b0:	4152      	adcs	r2, r2
 80012b2:	0a03      	lsrs	r3, r0, #8
 80012b4:	428b      	cmp	r3, r1
 80012b6:	d301      	bcc.n	80012bc <__divsi3+0xa0>
 80012b8:	020b      	lsls	r3, r1, #8
 80012ba:	1ac0      	subs	r0, r0, r3
 80012bc:	4152      	adcs	r2, r2
 80012be:	d2cd      	bcs.n	800125c <__divsi3+0x40>
 80012c0:	09c3      	lsrs	r3, r0, #7
 80012c2:	428b      	cmp	r3, r1
 80012c4:	d301      	bcc.n	80012ca <__divsi3+0xae>
 80012c6:	01cb      	lsls	r3, r1, #7
 80012c8:	1ac0      	subs	r0, r0, r3
 80012ca:	4152      	adcs	r2, r2
 80012cc:	0983      	lsrs	r3, r0, #6
 80012ce:	428b      	cmp	r3, r1
 80012d0:	d301      	bcc.n	80012d6 <__divsi3+0xba>
 80012d2:	018b      	lsls	r3, r1, #6
 80012d4:	1ac0      	subs	r0, r0, r3
 80012d6:	4152      	adcs	r2, r2
 80012d8:	0943      	lsrs	r3, r0, #5
 80012da:	428b      	cmp	r3, r1
 80012dc:	d301      	bcc.n	80012e2 <__divsi3+0xc6>
 80012de:	014b      	lsls	r3, r1, #5
 80012e0:	1ac0      	subs	r0, r0, r3
 80012e2:	4152      	adcs	r2, r2
 80012e4:	0903      	lsrs	r3, r0, #4
 80012e6:	428b      	cmp	r3, r1
 80012e8:	d301      	bcc.n	80012ee <__divsi3+0xd2>
 80012ea:	010b      	lsls	r3, r1, #4
 80012ec:	1ac0      	subs	r0, r0, r3
 80012ee:	4152      	adcs	r2, r2
 80012f0:	08c3      	lsrs	r3, r0, #3
 80012f2:	428b      	cmp	r3, r1
 80012f4:	d301      	bcc.n	80012fa <__divsi3+0xde>
 80012f6:	00cb      	lsls	r3, r1, #3
 80012f8:	1ac0      	subs	r0, r0, r3
 80012fa:	4152      	adcs	r2, r2
 80012fc:	0883      	lsrs	r3, r0, #2
 80012fe:	428b      	cmp	r3, r1
 8001300:	d301      	bcc.n	8001306 <__divsi3+0xea>
 8001302:	008b      	lsls	r3, r1, #2
 8001304:	1ac0      	subs	r0, r0, r3
 8001306:	4152      	adcs	r2, r2
 8001308:	0843      	lsrs	r3, r0, #1
 800130a:	428b      	cmp	r3, r1
 800130c:	d301      	bcc.n	8001312 <__divsi3+0xf6>
 800130e:	004b      	lsls	r3, r1, #1
 8001310:	1ac0      	subs	r0, r0, r3
 8001312:	4152      	adcs	r2, r2
 8001314:	1a41      	subs	r1, r0, r1
 8001316:	d200      	bcs.n	800131a <__divsi3+0xfe>
 8001318:	4601      	mov	r1, r0
 800131a:	4152      	adcs	r2, r2
 800131c:	4610      	mov	r0, r2
 800131e:	4770      	bx	lr
 8001320:	e05d      	b.n	80013de <__divsi3+0x1c2>
 8001322:	0fca      	lsrs	r2, r1, #31
 8001324:	d000      	beq.n	8001328 <__divsi3+0x10c>
 8001326:	4249      	negs	r1, r1
 8001328:	1003      	asrs	r3, r0, #32
 800132a:	d300      	bcc.n	800132e <__divsi3+0x112>
 800132c:	4240      	negs	r0, r0
 800132e:	4053      	eors	r3, r2
 8001330:	2200      	movs	r2, #0
 8001332:	469c      	mov	ip, r3
 8001334:	0903      	lsrs	r3, r0, #4
 8001336:	428b      	cmp	r3, r1
 8001338:	d32d      	bcc.n	8001396 <__divsi3+0x17a>
 800133a:	0a03      	lsrs	r3, r0, #8
 800133c:	428b      	cmp	r3, r1
 800133e:	d312      	bcc.n	8001366 <__divsi3+0x14a>
 8001340:	22fc      	movs	r2, #252	; 0xfc
 8001342:	0189      	lsls	r1, r1, #6
 8001344:	ba12      	rev	r2, r2
 8001346:	0a03      	lsrs	r3, r0, #8
 8001348:	428b      	cmp	r3, r1
 800134a:	d30c      	bcc.n	8001366 <__divsi3+0x14a>
 800134c:	0189      	lsls	r1, r1, #6
 800134e:	1192      	asrs	r2, r2, #6
 8001350:	428b      	cmp	r3, r1
 8001352:	d308      	bcc.n	8001366 <__divsi3+0x14a>
 8001354:	0189      	lsls	r1, r1, #6
 8001356:	1192      	asrs	r2, r2, #6
 8001358:	428b      	cmp	r3, r1
 800135a:	d304      	bcc.n	8001366 <__divsi3+0x14a>
 800135c:	0189      	lsls	r1, r1, #6
 800135e:	d03a      	beq.n	80013d6 <__divsi3+0x1ba>
 8001360:	1192      	asrs	r2, r2, #6
 8001362:	e000      	b.n	8001366 <__divsi3+0x14a>
 8001364:	0989      	lsrs	r1, r1, #6
 8001366:	09c3      	lsrs	r3, r0, #7
 8001368:	428b      	cmp	r3, r1
 800136a:	d301      	bcc.n	8001370 <__divsi3+0x154>
 800136c:	01cb      	lsls	r3, r1, #7
 800136e:	1ac0      	subs	r0, r0, r3
 8001370:	4152      	adcs	r2, r2
 8001372:	0983      	lsrs	r3, r0, #6
 8001374:	428b      	cmp	r3, r1
 8001376:	d301      	bcc.n	800137c <__divsi3+0x160>
 8001378:	018b      	lsls	r3, r1, #6
 800137a:	1ac0      	subs	r0, r0, r3
 800137c:	4152      	adcs	r2, r2
 800137e:	0943      	lsrs	r3, r0, #5
 8001380:	428b      	cmp	r3, r1
 8001382:	d301      	bcc.n	8001388 <__divsi3+0x16c>
 8001384:	014b      	lsls	r3, r1, #5
 8001386:	1ac0      	subs	r0, r0, r3
 8001388:	4152      	adcs	r2, r2
 800138a:	0903      	lsrs	r3, r0, #4
 800138c:	428b      	cmp	r3, r1
 800138e:	d301      	bcc.n	8001394 <__divsi3+0x178>
 8001390:	010b      	lsls	r3, r1, #4
 8001392:	1ac0      	subs	r0, r0, r3
 8001394:	4152      	adcs	r2, r2
 8001396:	08c3      	lsrs	r3, r0, #3
 8001398:	428b      	cmp	r3, r1
 800139a:	d301      	bcc.n	80013a0 <__divsi3+0x184>
 800139c:	00cb      	lsls	r3, r1, #3
 800139e:	1ac0      	subs	r0, r0, r3
 80013a0:	4152      	adcs	r2, r2
 80013a2:	0883      	lsrs	r3, r0, #2
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d301      	bcc.n	80013ac <__divsi3+0x190>
 80013a8:	008b      	lsls	r3, r1, #2
 80013aa:	1ac0      	subs	r0, r0, r3
 80013ac:	4152      	adcs	r2, r2
 80013ae:	d2d9      	bcs.n	8001364 <__divsi3+0x148>
 80013b0:	0843      	lsrs	r3, r0, #1
 80013b2:	428b      	cmp	r3, r1
 80013b4:	d301      	bcc.n	80013ba <__divsi3+0x19e>
 80013b6:	004b      	lsls	r3, r1, #1
 80013b8:	1ac0      	subs	r0, r0, r3
 80013ba:	4152      	adcs	r2, r2
 80013bc:	1a41      	subs	r1, r0, r1
 80013be:	d200      	bcs.n	80013c2 <__divsi3+0x1a6>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4663      	mov	r3, ip
 80013c4:	4152      	adcs	r2, r2
 80013c6:	105b      	asrs	r3, r3, #1
 80013c8:	4610      	mov	r0, r2
 80013ca:	d301      	bcc.n	80013d0 <__divsi3+0x1b4>
 80013cc:	4240      	negs	r0, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d500      	bpl.n	80013d4 <__divsi3+0x1b8>
 80013d2:	4249      	negs	r1, r1
 80013d4:	4770      	bx	lr
 80013d6:	4663      	mov	r3, ip
 80013d8:	105b      	asrs	r3, r3, #1
 80013da:	d300      	bcc.n	80013de <__divsi3+0x1c2>
 80013dc:	4240      	negs	r0, r0
 80013de:	b501      	push	{r0, lr}
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f805 	bl	80013f0 <__aeabi_idiv0>
 80013e6:	bd02      	pop	{r1, pc}

080013e8 <__aeabi_idivmod>:
 80013e8:	2900      	cmp	r1, #0
 80013ea:	d0f8      	beq.n	80013de <__divsi3+0x1c2>
 80013ec:	e716      	b.n	800121c <__divsi3>
 80013ee:	4770      	bx	lr

080013f0 <__aeabi_idiv0>:
 80013f0:	4770      	bx	lr
 80013f2:	46c0      	nop			; (mov r8, r8)

080013f4 <__aeabi_cfrcmple>:
 80013f4:	4684      	mov	ip, r0
 80013f6:	0008      	movs	r0, r1
 80013f8:	4661      	mov	r1, ip
 80013fa:	e7ff      	b.n	80013fc <__aeabi_cfcmpeq>

080013fc <__aeabi_cfcmpeq>:
 80013fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80013fe:	f000 fb6d 	bl	8001adc <__lesf2>
 8001402:	2800      	cmp	r0, #0
 8001404:	d401      	bmi.n	800140a <__aeabi_cfcmpeq+0xe>
 8001406:	2100      	movs	r1, #0
 8001408:	42c8      	cmn	r0, r1
 800140a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800140c <__aeabi_fcmpeq>:
 800140c:	b510      	push	{r4, lr}
 800140e:	f000 faf9 	bl	8001a04 <__eqsf2>
 8001412:	4240      	negs	r0, r0
 8001414:	3001      	adds	r0, #1
 8001416:	bd10      	pop	{r4, pc}

08001418 <__aeabi_fcmplt>:
 8001418:	b510      	push	{r4, lr}
 800141a:	f000 fb5f 	bl	8001adc <__lesf2>
 800141e:	2800      	cmp	r0, #0
 8001420:	db01      	blt.n	8001426 <__aeabi_fcmplt+0xe>
 8001422:	2000      	movs	r0, #0
 8001424:	bd10      	pop	{r4, pc}
 8001426:	2001      	movs	r0, #1
 8001428:	bd10      	pop	{r4, pc}
 800142a:	46c0      	nop			; (mov r8, r8)

0800142c <__aeabi_fcmple>:
 800142c:	b510      	push	{r4, lr}
 800142e:	f000 fb55 	bl	8001adc <__lesf2>
 8001432:	2800      	cmp	r0, #0
 8001434:	dd01      	ble.n	800143a <__aeabi_fcmple+0xe>
 8001436:	2000      	movs	r0, #0
 8001438:	bd10      	pop	{r4, pc}
 800143a:	2001      	movs	r0, #1
 800143c:	bd10      	pop	{r4, pc}
 800143e:	46c0      	nop			; (mov r8, r8)

08001440 <__aeabi_fcmpgt>:
 8001440:	b510      	push	{r4, lr}
 8001442:	f000 fb05 	bl	8001a50 <__gesf2>
 8001446:	2800      	cmp	r0, #0
 8001448:	dc01      	bgt.n	800144e <__aeabi_fcmpgt+0xe>
 800144a:	2000      	movs	r0, #0
 800144c:	bd10      	pop	{r4, pc}
 800144e:	2001      	movs	r0, #1
 8001450:	bd10      	pop	{r4, pc}
 8001452:	46c0      	nop			; (mov r8, r8)

08001454 <__aeabi_fcmpge>:
 8001454:	b510      	push	{r4, lr}
 8001456:	f000 fafb 	bl	8001a50 <__gesf2>
 800145a:	2800      	cmp	r0, #0
 800145c:	da01      	bge.n	8001462 <__aeabi_fcmpge+0xe>
 800145e:	2000      	movs	r0, #0
 8001460:	bd10      	pop	{r4, pc}
 8001462:	2001      	movs	r0, #1
 8001464:	bd10      	pop	{r4, pc}
 8001466:	46c0      	nop			; (mov r8, r8)

08001468 <__aeabi_f2uiz>:
 8001468:	219e      	movs	r1, #158	; 0x9e
 800146a:	b510      	push	{r4, lr}
 800146c:	05c9      	lsls	r1, r1, #23
 800146e:	1c04      	adds	r4, r0, #0
 8001470:	f7ff fff0 	bl	8001454 <__aeabi_fcmpge>
 8001474:	2800      	cmp	r0, #0
 8001476:	d103      	bne.n	8001480 <__aeabi_f2uiz+0x18>
 8001478:	1c20      	adds	r0, r4, #0
 800147a:	f000 fe47 	bl	800210c <__aeabi_f2iz>
 800147e:	bd10      	pop	{r4, pc}
 8001480:	219e      	movs	r1, #158	; 0x9e
 8001482:	1c20      	adds	r0, r4, #0
 8001484:	05c9      	lsls	r1, r1, #23
 8001486:	f000 fc93 	bl	8001db0 <__aeabi_fsub>
 800148a:	f000 fe3f 	bl	800210c <__aeabi_f2iz>
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	469c      	mov	ip, r3
 8001494:	4460      	add	r0, ip
 8001496:	e7f2      	b.n	800147e <__aeabi_f2uiz+0x16>

08001498 <__aeabi_fadd>:
 8001498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800149a:	46c6      	mov	lr, r8
 800149c:	0243      	lsls	r3, r0, #9
 800149e:	0a5b      	lsrs	r3, r3, #9
 80014a0:	024e      	lsls	r6, r1, #9
 80014a2:	0045      	lsls	r5, r0, #1
 80014a4:	004f      	lsls	r7, r1, #1
 80014a6:	00da      	lsls	r2, r3, #3
 80014a8:	0fc4      	lsrs	r4, r0, #31
 80014aa:	469c      	mov	ip, r3
 80014ac:	0a70      	lsrs	r0, r6, #9
 80014ae:	4690      	mov	r8, r2
 80014b0:	b500      	push	{lr}
 80014b2:	0e2d      	lsrs	r5, r5, #24
 80014b4:	0e3f      	lsrs	r7, r7, #24
 80014b6:	0fc9      	lsrs	r1, r1, #31
 80014b8:	09b6      	lsrs	r6, r6, #6
 80014ba:	428c      	cmp	r4, r1
 80014bc:	d04b      	beq.n	8001556 <__aeabi_fadd+0xbe>
 80014be:	1bea      	subs	r2, r5, r7
 80014c0:	2a00      	cmp	r2, #0
 80014c2:	dd36      	ble.n	8001532 <__aeabi_fadd+0x9a>
 80014c4:	2f00      	cmp	r7, #0
 80014c6:	d061      	beq.n	800158c <__aeabi_fadd+0xf4>
 80014c8:	2dff      	cmp	r5, #255	; 0xff
 80014ca:	d100      	bne.n	80014ce <__aeabi_fadd+0x36>
 80014cc:	e0ad      	b.n	800162a <__aeabi_fadd+0x192>
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	04db      	lsls	r3, r3, #19
 80014d2:	431e      	orrs	r6, r3
 80014d4:	2a1b      	cmp	r2, #27
 80014d6:	dc00      	bgt.n	80014da <__aeabi_fadd+0x42>
 80014d8:	e0d3      	b.n	8001682 <__aeabi_fadd+0x1ea>
 80014da:	2001      	movs	r0, #1
 80014dc:	4643      	mov	r3, r8
 80014de:	1a18      	subs	r0, r3, r0
 80014e0:	0143      	lsls	r3, r0, #5
 80014e2:	d400      	bmi.n	80014e6 <__aeabi_fadd+0x4e>
 80014e4:	e08c      	b.n	8001600 <__aeabi_fadd+0x168>
 80014e6:	0180      	lsls	r0, r0, #6
 80014e8:	0987      	lsrs	r7, r0, #6
 80014ea:	0038      	movs	r0, r7
 80014ec:	f000 febe 	bl	800226c <__clzsi2>
 80014f0:	3805      	subs	r0, #5
 80014f2:	4087      	lsls	r7, r0
 80014f4:	4285      	cmp	r5, r0
 80014f6:	dc00      	bgt.n	80014fa <__aeabi_fadd+0x62>
 80014f8:	e0b6      	b.n	8001668 <__aeabi_fadd+0x1d0>
 80014fa:	1a2d      	subs	r5, r5, r0
 80014fc:	48b3      	ldr	r0, [pc, #716]	; (80017cc <__aeabi_fadd+0x334>)
 80014fe:	4038      	ands	r0, r7
 8001500:	0743      	lsls	r3, r0, #29
 8001502:	d004      	beq.n	800150e <__aeabi_fadd+0x76>
 8001504:	230f      	movs	r3, #15
 8001506:	4003      	ands	r3, r0
 8001508:	2b04      	cmp	r3, #4
 800150a:	d000      	beq.n	800150e <__aeabi_fadd+0x76>
 800150c:	3004      	adds	r0, #4
 800150e:	0143      	lsls	r3, r0, #5
 8001510:	d400      	bmi.n	8001514 <__aeabi_fadd+0x7c>
 8001512:	e078      	b.n	8001606 <__aeabi_fadd+0x16e>
 8001514:	1c6a      	adds	r2, r5, #1
 8001516:	2dfe      	cmp	r5, #254	; 0xfe
 8001518:	d065      	beq.n	80015e6 <__aeabi_fadd+0x14e>
 800151a:	0180      	lsls	r0, r0, #6
 800151c:	0a43      	lsrs	r3, r0, #9
 800151e:	469c      	mov	ip, r3
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	4663      	mov	r3, ip
 8001524:	05d0      	lsls	r0, r2, #23
 8001526:	4318      	orrs	r0, r3
 8001528:	07e4      	lsls	r4, r4, #31
 800152a:	4320      	orrs	r0, r4
 800152c:	bc80      	pop	{r7}
 800152e:	46b8      	mov	r8, r7
 8001530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001532:	2a00      	cmp	r2, #0
 8001534:	d035      	beq.n	80015a2 <__aeabi_fadd+0x10a>
 8001536:	1b7a      	subs	r2, r7, r5
 8001538:	2d00      	cmp	r5, #0
 800153a:	d000      	beq.n	800153e <__aeabi_fadd+0xa6>
 800153c:	e0af      	b.n	800169e <__aeabi_fadd+0x206>
 800153e:	4643      	mov	r3, r8
 8001540:	2b00      	cmp	r3, #0
 8001542:	d100      	bne.n	8001546 <__aeabi_fadd+0xae>
 8001544:	e0a7      	b.n	8001696 <__aeabi_fadd+0x1fe>
 8001546:	1e53      	subs	r3, r2, #1
 8001548:	2a01      	cmp	r2, #1
 800154a:	d100      	bne.n	800154e <__aeabi_fadd+0xb6>
 800154c:	e12f      	b.n	80017ae <__aeabi_fadd+0x316>
 800154e:	2aff      	cmp	r2, #255	; 0xff
 8001550:	d069      	beq.n	8001626 <__aeabi_fadd+0x18e>
 8001552:	001a      	movs	r2, r3
 8001554:	e0aa      	b.n	80016ac <__aeabi_fadd+0x214>
 8001556:	1be9      	subs	r1, r5, r7
 8001558:	2900      	cmp	r1, #0
 800155a:	dd70      	ble.n	800163e <__aeabi_fadd+0x1a6>
 800155c:	2f00      	cmp	r7, #0
 800155e:	d037      	beq.n	80015d0 <__aeabi_fadd+0x138>
 8001560:	2dff      	cmp	r5, #255	; 0xff
 8001562:	d062      	beq.n	800162a <__aeabi_fadd+0x192>
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	04db      	lsls	r3, r3, #19
 8001568:	431e      	orrs	r6, r3
 800156a:	291b      	cmp	r1, #27
 800156c:	dc00      	bgt.n	8001570 <__aeabi_fadd+0xd8>
 800156e:	e0b0      	b.n	80016d2 <__aeabi_fadd+0x23a>
 8001570:	2001      	movs	r0, #1
 8001572:	4440      	add	r0, r8
 8001574:	0143      	lsls	r3, r0, #5
 8001576:	d543      	bpl.n	8001600 <__aeabi_fadd+0x168>
 8001578:	3501      	adds	r5, #1
 800157a:	2dff      	cmp	r5, #255	; 0xff
 800157c:	d033      	beq.n	80015e6 <__aeabi_fadd+0x14e>
 800157e:	2301      	movs	r3, #1
 8001580:	4a93      	ldr	r2, [pc, #588]	; (80017d0 <__aeabi_fadd+0x338>)
 8001582:	4003      	ands	r3, r0
 8001584:	0840      	lsrs	r0, r0, #1
 8001586:	4010      	ands	r0, r2
 8001588:	4318      	orrs	r0, r3
 800158a:	e7b9      	b.n	8001500 <__aeabi_fadd+0x68>
 800158c:	2e00      	cmp	r6, #0
 800158e:	d100      	bne.n	8001592 <__aeabi_fadd+0xfa>
 8001590:	e083      	b.n	800169a <__aeabi_fadd+0x202>
 8001592:	1e51      	subs	r1, r2, #1
 8001594:	2a01      	cmp	r2, #1
 8001596:	d100      	bne.n	800159a <__aeabi_fadd+0x102>
 8001598:	e0d8      	b.n	800174c <__aeabi_fadd+0x2b4>
 800159a:	2aff      	cmp	r2, #255	; 0xff
 800159c:	d045      	beq.n	800162a <__aeabi_fadd+0x192>
 800159e:	000a      	movs	r2, r1
 80015a0:	e798      	b.n	80014d4 <__aeabi_fadd+0x3c>
 80015a2:	27fe      	movs	r7, #254	; 0xfe
 80015a4:	1c6a      	adds	r2, r5, #1
 80015a6:	4217      	tst	r7, r2
 80015a8:	d000      	beq.n	80015ac <__aeabi_fadd+0x114>
 80015aa:	e086      	b.n	80016ba <__aeabi_fadd+0x222>
 80015ac:	2d00      	cmp	r5, #0
 80015ae:	d000      	beq.n	80015b2 <__aeabi_fadd+0x11a>
 80015b0:	e0b7      	b.n	8001722 <__aeabi_fadd+0x28a>
 80015b2:	4643      	mov	r3, r8
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d100      	bne.n	80015ba <__aeabi_fadd+0x122>
 80015b8:	e0f3      	b.n	80017a2 <__aeabi_fadd+0x30a>
 80015ba:	2200      	movs	r2, #0
 80015bc:	2e00      	cmp	r6, #0
 80015be:	d0b0      	beq.n	8001522 <__aeabi_fadd+0x8a>
 80015c0:	1b98      	subs	r0, r3, r6
 80015c2:	0143      	lsls	r3, r0, #5
 80015c4:	d400      	bmi.n	80015c8 <__aeabi_fadd+0x130>
 80015c6:	e0fa      	b.n	80017be <__aeabi_fadd+0x326>
 80015c8:	4643      	mov	r3, r8
 80015ca:	000c      	movs	r4, r1
 80015cc:	1af0      	subs	r0, r6, r3
 80015ce:	e797      	b.n	8001500 <__aeabi_fadd+0x68>
 80015d0:	2e00      	cmp	r6, #0
 80015d2:	d100      	bne.n	80015d6 <__aeabi_fadd+0x13e>
 80015d4:	e0c8      	b.n	8001768 <__aeabi_fadd+0x2d0>
 80015d6:	1e4a      	subs	r2, r1, #1
 80015d8:	2901      	cmp	r1, #1
 80015da:	d100      	bne.n	80015de <__aeabi_fadd+0x146>
 80015dc:	e0ae      	b.n	800173c <__aeabi_fadd+0x2a4>
 80015de:	29ff      	cmp	r1, #255	; 0xff
 80015e0:	d023      	beq.n	800162a <__aeabi_fadd+0x192>
 80015e2:	0011      	movs	r1, r2
 80015e4:	e7c1      	b.n	800156a <__aeabi_fadd+0xd2>
 80015e6:	2300      	movs	r3, #0
 80015e8:	22ff      	movs	r2, #255	; 0xff
 80015ea:	469c      	mov	ip, r3
 80015ec:	e799      	b.n	8001522 <__aeabi_fadd+0x8a>
 80015ee:	21fe      	movs	r1, #254	; 0xfe
 80015f0:	1c6a      	adds	r2, r5, #1
 80015f2:	4211      	tst	r1, r2
 80015f4:	d077      	beq.n	80016e6 <__aeabi_fadd+0x24e>
 80015f6:	2aff      	cmp	r2, #255	; 0xff
 80015f8:	d0f5      	beq.n	80015e6 <__aeabi_fadd+0x14e>
 80015fa:	0015      	movs	r5, r2
 80015fc:	4446      	add	r6, r8
 80015fe:	0870      	lsrs	r0, r6, #1
 8001600:	0743      	lsls	r3, r0, #29
 8001602:	d000      	beq.n	8001606 <__aeabi_fadd+0x16e>
 8001604:	e77e      	b.n	8001504 <__aeabi_fadd+0x6c>
 8001606:	08c3      	lsrs	r3, r0, #3
 8001608:	2dff      	cmp	r5, #255	; 0xff
 800160a:	d00e      	beq.n	800162a <__aeabi_fadd+0x192>
 800160c:	025b      	lsls	r3, r3, #9
 800160e:	0a5b      	lsrs	r3, r3, #9
 8001610:	469c      	mov	ip, r3
 8001612:	b2ea      	uxtb	r2, r5
 8001614:	e785      	b.n	8001522 <__aeabi_fadd+0x8a>
 8001616:	2e00      	cmp	r6, #0
 8001618:	d007      	beq.n	800162a <__aeabi_fadd+0x192>
 800161a:	2280      	movs	r2, #128	; 0x80
 800161c:	03d2      	lsls	r2, r2, #15
 800161e:	4213      	tst	r3, r2
 8001620:	d003      	beq.n	800162a <__aeabi_fadd+0x192>
 8001622:	4210      	tst	r0, r2
 8001624:	d101      	bne.n	800162a <__aeabi_fadd+0x192>
 8001626:	000c      	movs	r4, r1
 8001628:	0003      	movs	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0db      	beq.n	80015e6 <__aeabi_fadd+0x14e>
 800162e:	2080      	movs	r0, #128	; 0x80
 8001630:	03c0      	lsls	r0, r0, #15
 8001632:	4318      	orrs	r0, r3
 8001634:	0240      	lsls	r0, r0, #9
 8001636:	0a43      	lsrs	r3, r0, #9
 8001638:	469c      	mov	ip, r3
 800163a:	22ff      	movs	r2, #255	; 0xff
 800163c:	e771      	b.n	8001522 <__aeabi_fadd+0x8a>
 800163e:	2900      	cmp	r1, #0
 8001640:	d0d5      	beq.n	80015ee <__aeabi_fadd+0x156>
 8001642:	1b7a      	subs	r2, r7, r5
 8001644:	2d00      	cmp	r5, #0
 8001646:	d160      	bne.n	800170a <__aeabi_fadd+0x272>
 8001648:	4643      	mov	r3, r8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d024      	beq.n	8001698 <__aeabi_fadd+0x200>
 800164e:	1e53      	subs	r3, r2, #1
 8001650:	2a01      	cmp	r2, #1
 8001652:	d073      	beq.n	800173c <__aeabi_fadd+0x2a4>
 8001654:	2aff      	cmp	r2, #255	; 0xff
 8001656:	d0e7      	beq.n	8001628 <__aeabi_fadd+0x190>
 8001658:	001a      	movs	r2, r3
 800165a:	2a1b      	cmp	r2, #27
 800165c:	dc00      	bgt.n	8001660 <__aeabi_fadd+0x1c8>
 800165e:	e085      	b.n	800176c <__aeabi_fadd+0x2d4>
 8001660:	2001      	movs	r0, #1
 8001662:	003d      	movs	r5, r7
 8001664:	1980      	adds	r0, r0, r6
 8001666:	e785      	b.n	8001574 <__aeabi_fadd+0xdc>
 8001668:	2320      	movs	r3, #32
 800166a:	003a      	movs	r2, r7
 800166c:	1b45      	subs	r5, r0, r5
 800166e:	0038      	movs	r0, r7
 8001670:	3501      	adds	r5, #1
 8001672:	40ea      	lsrs	r2, r5
 8001674:	1b5d      	subs	r5, r3, r5
 8001676:	40a8      	lsls	r0, r5
 8001678:	1e43      	subs	r3, r0, #1
 800167a:	4198      	sbcs	r0, r3
 800167c:	2500      	movs	r5, #0
 800167e:	4310      	orrs	r0, r2
 8001680:	e73e      	b.n	8001500 <__aeabi_fadd+0x68>
 8001682:	2320      	movs	r3, #32
 8001684:	0030      	movs	r0, r6
 8001686:	1a9b      	subs	r3, r3, r2
 8001688:	0031      	movs	r1, r6
 800168a:	4098      	lsls	r0, r3
 800168c:	40d1      	lsrs	r1, r2
 800168e:	1e43      	subs	r3, r0, #1
 8001690:	4198      	sbcs	r0, r3
 8001692:	4308      	orrs	r0, r1
 8001694:	e722      	b.n	80014dc <__aeabi_fadd+0x44>
 8001696:	000c      	movs	r4, r1
 8001698:	0003      	movs	r3, r0
 800169a:	0015      	movs	r5, r2
 800169c:	e7b4      	b.n	8001608 <__aeabi_fadd+0x170>
 800169e:	2fff      	cmp	r7, #255	; 0xff
 80016a0:	d0c1      	beq.n	8001626 <__aeabi_fadd+0x18e>
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	4640      	mov	r0, r8
 80016a6:	04db      	lsls	r3, r3, #19
 80016a8:	4318      	orrs	r0, r3
 80016aa:	4680      	mov	r8, r0
 80016ac:	2a1b      	cmp	r2, #27
 80016ae:	dd51      	ble.n	8001754 <__aeabi_fadd+0x2bc>
 80016b0:	2001      	movs	r0, #1
 80016b2:	000c      	movs	r4, r1
 80016b4:	003d      	movs	r5, r7
 80016b6:	1a30      	subs	r0, r6, r0
 80016b8:	e712      	b.n	80014e0 <__aeabi_fadd+0x48>
 80016ba:	4643      	mov	r3, r8
 80016bc:	1b9f      	subs	r7, r3, r6
 80016be:	017b      	lsls	r3, r7, #5
 80016c0:	d42b      	bmi.n	800171a <__aeabi_fadd+0x282>
 80016c2:	2f00      	cmp	r7, #0
 80016c4:	d000      	beq.n	80016c8 <__aeabi_fadd+0x230>
 80016c6:	e710      	b.n	80014ea <__aeabi_fadd+0x52>
 80016c8:	2300      	movs	r3, #0
 80016ca:	2400      	movs	r4, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	469c      	mov	ip, r3
 80016d0:	e727      	b.n	8001522 <__aeabi_fadd+0x8a>
 80016d2:	2320      	movs	r3, #32
 80016d4:	0032      	movs	r2, r6
 80016d6:	0030      	movs	r0, r6
 80016d8:	40ca      	lsrs	r2, r1
 80016da:	1a59      	subs	r1, r3, r1
 80016dc:	4088      	lsls	r0, r1
 80016de:	1e43      	subs	r3, r0, #1
 80016e0:	4198      	sbcs	r0, r3
 80016e2:	4310      	orrs	r0, r2
 80016e4:	e745      	b.n	8001572 <__aeabi_fadd+0xda>
 80016e6:	2d00      	cmp	r5, #0
 80016e8:	d14a      	bne.n	8001780 <__aeabi_fadd+0x2e8>
 80016ea:	4643      	mov	r3, r8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d063      	beq.n	80017b8 <__aeabi_fadd+0x320>
 80016f0:	2200      	movs	r2, #0
 80016f2:	2e00      	cmp	r6, #0
 80016f4:	d100      	bne.n	80016f8 <__aeabi_fadd+0x260>
 80016f6:	e714      	b.n	8001522 <__aeabi_fadd+0x8a>
 80016f8:	0030      	movs	r0, r6
 80016fa:	4440      	add	r0, r8
 80016fc:	0143      	lsls	r3, r0, #5
 80016fe:	d400      	bmi.n	8001702 <__aeabi_fadd+0x26a>
 8001700:	e77e      	b.n	8001600 <__aeabi_fadd+0x168>
 8001702:	4b32      	ldr	r3, [pc, #200]	; (80017cc <__aeabi_fadd+0x334>)
 8001704:	3501      	adds	r5, #1
 8001706:	4018      	ands	r0, r3
 8001708:	e77a      	b.n	8001600 <__aeabi_fadd+0x168>
 800170a:	2fff      	cmp	r7, #255	; 0xff
 800170c:	d08c      	beq.n	8001628 <__aeabi_fadd+0x190>
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	4641      	mov	r1, r8
 8001712:	04db      	lsls	r3, r3, #19
 8001714:	4319      	orrs	r1, r3
 8001716:	4688      	mov	r8, r1
 8001718:	e79f      	b.n	800165a <__aeabi_fadd+0x1c2>
 800171a:	4643      	mov	r3, r8
 800171c:	000c      	movs	r4, r1
 800171e:	1af7      	subs	r7, r6, r3
 8001720:	e6e3      	b.n	80014ea <__aeabi_fadd+0x52>
 8001722:	4642      	mov	r2, r8
 8001724:	2a00      	cmp	r2, #0
 8001726:	d000      	beq.n	800172a <__aeabi_fadd+0x292>
 8001728:	e775      	b.n	8001616 <__aeabi_fadd+0x17e>
 800172a:	2e00      	cmp	r6, #0
 800172c:	d000      	beq.n	8001730 <__aeabi_fadd+0x298>
 800172e:	e77a      	b.n	8001626 <__aeabi_fadd+0x18e>
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	03db      	lsls	r3, r3, #15
 8001734:	2400      	movs	r4, #0
 8001736:	469c      	mov	ip, r3
 8001738:	22ff      	movs	r2, #255	; 0xff
 800173a:	e6f2      	b.n	8001522 <__aeabi_fadd+0x8a>
 800173c:	0030      	movs	r0, r6
 800173e:	4440      	add	r0, r8
 8001740:	2501      	movs	r5, #1
 8001742:	0143      	lsls	r3, r0, #5
 8001744:	d400      	bmi.n	8001748 <__aeabi_fadd+0x2b0>
 8001746:	e75b      	b.n	8001600 <__aeabi_fadd+0x168>
 8001748:	2502      	movs	r5, #2
 800174a:	e718      	b.n	800157e <__aeabi_fadd+0xe6>
 800174c:	4643      	mov	r3, r8
 800174e:	2501      	movs	r5, #1
 8001750:	1b98      	subs	r0, r3, r6
 8001752:	e6c5      	b.n	80014e0 <__aeabi_fadd+0x48>
 8001754:	2320      	movs	r3, #32
 8001756:	4644      	mov	r4, r8
 8001758:	4640      	mov	r0, r8
 800175a:	40d4      	lsrs	r4, r2
 800175c:	1a9a      	subs	r2, r3, r2
 800175e:	4090      	lsls	r0, r2
 8001760:	1e43      	subs	r3, r0, #1
 8001762:	4198      	sbcs	r0, r3
 8001764:	4320      	orrs	r0, r4
 8001766:	e7a4      	b.n	80016b2 <__aeabi_fadd+0x21a>
 8001768:	000d      	movs	r5, r1
 800176a:	e74d      	b.n	8001608 <__aeabi_fadd+0x170>
 800176c:	2320      	movs	r3, #32
 800176e:	4641      	mov	r1, r8
 8001770:	4640      	mov	r0, r8
 8001772:	40d1      	lsrs	r1, r2
 8001774:	1a9a      	subs	r2, r3, r2
 8001776:	4090      	lsls	r0, r2
 8001778:	1e43      	subs	r3, r0, #1
 800177a:	4198      	sbcs	r0, r3
 800177c:	4308      	orrs	r0, r1
 800177e:	e770      	b.n	8001662 <__aeabi_fadd+0x1ca>
 8001780:	4642      	mov	r2, r8
 8001782:	2a00      	cmp	r2, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_fadd+0x2f0>
 8001786:	e74f      	b.n	8001628 <__aeabi_fadd+0x190>
 8001788:	2e00      	cmp	r6, #0
 800178a:	d100      	bne.n	800178e <__aeabi_fadd+0x2f6>
 800178c:	e74d      	b.n	800162a <__aeabi_fadd+0x192>
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	03d2      	lsls	r2, r2, #15
 8001792:	4213      	tst	r3, r2
 8001794:	d100      	bne.n	8001798 <__aeabi_fadd+0x300>
 8001796:	e748      	b.n	800162a <__aeabi_fadd+0x192>
 8001798:	4210      	tst	r0, r2
 800179a:	d000      	beq.n	800179e <__aeabi_fadd+0x306>
 800179c:	e745      	b.n	800162a <__aeabi_fadd+0x192>
 800179e:	0003      	movs	r3, r0
 80017a0:	e743      	b.n	800162a <__aeabi_fadd+0x192>
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d090      	beq.n	80016c8 <__aeabi_fadd+0x230>
 80017a6:	000c      	movs	r4, r1
 80017a8:	4684      	mov	ip, r0
 80017aa:	2200      	movs	r2, #0
 80017ac:	e6b9      	b.n	8001522 <__aeabi_fadd+0x8a>
 80017ae:	4643      	mov	r3, r8
 80017b0:	000c      	movs	r4, r1
 80017b2:	1af0      	subs	r0, r6, r3
 80017b4:	3501      	adds	r5, #1
 80017b6:	e693      	b.n	80014e0 <__aeabi_fadd+0x48>
 80017b8:	4684      	mov	ip, r0
 80017ba:	2200      	movs	r2, #0
 80017bc:	e6b1      	b.n	8001522 <__aeabi_fadd+0x8a>
 80017be:	2800      	cmp	r0, #0
 80017c0:	d000      	beq.n	80017c4 <__aeabi_fadd+0x32c>
 80017c2:	e71d      	b.n	8001600 <__aeabi_fadd+0x168>
 80017c4:	2300      	movs	r3, #0
 80017c6:	2400      	movs	r4, #0
 80017c8:	469c      	mov	ip, r3
 80017ca:	e6aa      	b.n	8001522 <__aeabi_fadd+0x8a>
 80017cc:	fbffffff 	.word	0xfbffffff
 80017d0:	7dffffff 	.word	0x7dffffff

080017d4 <__aeabi_fdiv>:
 80017d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017d6:	464f      	mov	r7, r9
 80017d8:	4646      	mov	r6, r8
 80017da:	46d6      	mov	lr, sl
 80017dc:	0245      	lsls	r5, r0, #9
 80017de:	b5c0      	push	{r6, r7, lr}
 80017e0:	0047      	lsls	r7, r0, #1
 80017e2:	1c0c      	adds	r4, r1, #0
 80017e4:	0a6d      	lsrs	r5, r5, #9
 80017e6:	0e3f      	lsrs	r7, r7, #24
 80017e8:	0fc6      	lsrs	r6, r0, #31
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	d100      	bne.n	80017f0 <__aeabi_fdiv+0x1c>
 80017ee:	e070      	b.n	80018d2 <__aeabi_fdiv+0xfe>
 80017f0:	2fff      	cmp	r7, #255	; 0xff
 80017f2:	d100      	bne.n	80017f6 <__aeabi_fdiv+0x22>
 80017f4:	e075      	b.n	80018e2 <__aeabi_fdiv+0x10e>
 80017f6:	00eb      	lsls	r3, r5, #3
 80017f8:	2580      	movs	r5, #128	; 0x80
 80017fa:	04ed      	lsls	r5, r5, #19
 80017fc:	431d      	orrs	r5, r3
 80017fe:	2300      	movs	r3, #0
 8001800:	4699      	mov	r9, r3
 8001802:	469a      	mov	sl, r3
 8001804:	3f7f      	subs	r7, #127	; 0x7f
 8001806:	0260      	lsls	r0, r4, #9
 8001808:	0a43      	lsrs	r3, r0, #9
 800180a:	4698      	mov	r8, r3
 800180c:	0063      	lsls	r3, r4, #1
 800180e:	0e1b      	lsrs	r3, r3, #24
 8001810:	0fe4      	lsrs	r4, r4, #31
 8001812:	2b00      	cmp	r3, #0
 8001814:	d04e      	beq.n	80018b4 <__aeabi_fdiv+0xe0>
 8001816:	2bff      	cmp	r3, #255	; 0xff
 8001818:	d046      	beq.n	80018a8 <__aeabi_fdiv+0xd4>
 800181a:	4642      	mov	r2, r8
 800181c:	00d0      	lsls	r0, r2, #3
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	04d2      	lsls	r2, r2, #19
 8001822:	4302      	orrs	r2, r0
 8001824:	4690      	mov	r8, r2
 8001826:	2200      	movs	r2, #0
 8001828:	3b7f      	subs	r3, #127	; 0x7f
 800182a:	0031      	movs	r1, r6
 800182c:	1aff      	subs	r7, r7, r3
 800182e:	464b      	mov	r3, r9
 8001830:	4061      	eors	r1, r4
 8001832:	b2c9      	uxtb	r1, r1
 8001834:	4313      	orrs	r3, r2
 8001836:	2b0f      	cmp	r3, #15
 8001838:	d900      	bls.n	800183c <__aeabi_fdiv+0x68>
 800183a:	e0b5      	b.n	80019a8 <__aeabi_fdiv+0x1d4>
 800183c:	486e      	ldr	r0, [pc, #440]	; (80019f8 <__aeabi_fdiv+0x224>)
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	58c3      	ldr	r3, [r0, r3]
 8001842:	469f      	mov	pc, r3
 8001844:	2300      	movs	r3, #0
 8001846:	4698      	mov	r8, r3
 8001848:	0026      	movs	r6, r4
 800184a:	4645      	mov	r5, r8
 800184c:	4692      	mov	sl, r2
 800184e:	4653      	mov	r3, sl
 8001850:	2b02      	cmp	r3, #2
 8001852:	d100      	bne.n	8001856 <__aeabi_fdiv+0x82>
 8001854:	e089      	b.n	800196a <__aeabi_fdiv+0x196>
 8001856:	2b03      	cmp	r3, #3
 8001858:	d100      	bne.n	800185c <__aeabi_fdiv+0x88>
 800185a:	e09e      	b.n	800199a <__aeabi_fdiv+0x1c6>
 800185c:	2b01      	cmp	r3, #1
 800185e:	d018      	beq.n	8001892 <__aeabi_fdiv+0xbe>
 8001860:	003b      	movs	r3, r7
 8001862:	337f      	adds	r3, #127	; 0x7f
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd69      	ble.n	800193c <__aeabi_fdiv+0x168>
 8001868:	076a      	lsls	r2, r5, #29
 800186a:	d004      	beq.n	8001876 <__aeabi_fdiv+0xa2>
 800186c:	220f      	movs	r2, #15
 800186e:	402a      	ands	r2, r5
 8001870:	2a04      	cmp	r2, #4
 8001872:	d000      	beq.n	8001876 <__aeabi_fdiv+0xa2>
 8001874:	3504      	adds	r5, #4
 8001876:	012a      	lsls	r2, r5, #4
 8001878:	d503      	bpl.n	8001882 <__aeabi_fdiv+0xae>
 800187a:	4b60      	ldr	r3, [pc, #384]	; (80019fc <__aeabi_fdiv+0x228>)
 800187c:	401d      	ands	r5, r3
 800187e:	003b      	movs	r3, r7
 8001880:	3380      	adds	r3, #128	; 0x80
 8001882:	2bfe      	cmp	r3, #254	; 0xfe
 8001884:	dd00      	ble.n	8001888 <__aeabi_fdiv+0xb4>
 8001886:	e070      	b.n	800196a <__aeabi_fdiv+0x196>
 8001888:	01ad      	lsls	r5, r5, #6
 800188a:	0a6d      	lsrs	r5, r5, #9
 800188c:	b2d8      	uxtb	r0, r3
 800188e:	e002      	b.n	8001896 <__aeabi_fdiv+0xc2>
 8001890:	000e      	movs	r6, r1
 8001892:	2000      	movs	r0, #0
 8001894:	2500      	movs	r5, #0
 8001896:	05c0      	lsls	r0, r0, #23
 8001898:	4328      	orrs	r0, r5
 800189a:	07f6      	lsls	r6, r6, #31
 800189c:	4330      	orrs	r0, r6
 800189e:	bce0      	pop	{r5, r6, r7}
 80018a0:	46ba      	mov	sl, r7
 80018a2:	46b1      	mov	r9, r6
 80018a4:	46a8      	mov	r8, r5
 80018a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018a8:	4643      	mov	r3, r8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d13f      	bne.n	800192e <__aeabi_fdiv+0x15a>
 80018ae:	2202      	movs	r2, #2
 80018b0:	3fff      	subs	r7, #255	; 0xff
 80018b2:	e003      	b.n	80018bc <__aeabi_fdiv+0xe8>
 80018b4:	4643      	mov	r3, r8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d12d      	bne.n	8001916 <__aeabi_fdiv+0x142>
 80018ba:	2201      	movs	r2, #1
 80018bc:	0031      	movs	r1, r6
 80018be:	464b      	mov	r3, r9
 80018c0:	4061      	eors	r1, r4
 80018c2:	b2c9      	uxtb	r1, r1
 80018c4:	4313      	orrs	r3, r2
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	d834      	bhi.n	8001934 <__aeabi_fdiv+0x160>
 80018ca:	484d      	ldr	r0, [pc, #308]	; (8001a00 <__aeabi_fdiv+0x22c>)
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	58c3      	ldr	r3, [r0, r3]
 80018d0:	469f      	mov	pc, r3
 80018d2:	2d00      	cmp	r5, #0
 80018d4:	d113      	bne.n	80018fe <__aeabi_fdiv+0x12a>
 80018d6:	2304      	movs	r3, #4
 80018d8:	4699      	mov	r9, r3
 80018da:	3b03      	subs	r3, #3
 80018dc:	2700      	movs	r7, #0
 80018de:	469a      	mov	sl, r3
 80018e0:	e791      	b.n	8001806 <__aeabi_fdiv+0x32>
 80018e2:	2d00      	cmp	r5, #0
 80018e4:	d105      	bne.n	80018f2 <__aeabi_fdiv+0x11e>
 80018e6:	2308      	movs	r3, #8
 80018e8:	4699      	mov	r9, r3
 80018ea:	3b06      	subs	r3, #6
 80018ec:	27ff      	movs	r7, #255	; 0xff
 80018ee:	469a      	mov	sl, r3
 80018f0:	e789      	b.n	8001806 <__aeabi_fdiv+0x32>
 80018f2:	230c      	movs	r3, #12
 80018f4:	4699      	mov	r9, r3
 80018f6:	3b09      	subs	r3, #9
 80018f8:	27ff      	movs	r7, #255	; 0xff
 80018fa:	469a      	mov	sl, r3
 80018fc:	e783      	b.n	8001806 <__aeabi_fdiv+0x32>
 80018fe:	0028      	movs	r0, r5
 8001900:	f000 fcb4 	bl	800226c <__clzsi2>
 8001904:	2776      	movs	r7, #118	; 0x76
 8001906:	1f43      	subs	r3, r0, #5
 8001908:	409d      	lsls	r5, r3
 800190a:	2300      	movs	r3, #0
 800190c:	427f      	negs	r7, r7
 800190e:	4699      	mov	r9, r3
 8001910:	469a      	mov	sl, r3
 8001912:	1a3f      	subs	r7, r7, r0
 8001914:	e777      	b.n	8001806 <__aeabi_fdiv+0x32>
 8001916:	4640      	mov	r0, r8
 8001918:	f000 fca8 	bl	800226c <__clzsi2>
 800191c:	4642      	mov	r2, r8
 800191e:	1f43      	subs	r3, r0, #5
 8001920:	409a      	lsls	r2, r3
 8001922:	2376      	movs	r3, #118	; 0x76
 8001924:	425b      	negs	r3, r3
 8001926:	4690      	mov	r8, r2
 8001928:	1a1b      	subs	r3, r3, r0
 800192a:	2200      	movs	r2, #0
 800192c:	e77d      	b.n	800182a <__aeabi_fdiv+0x56>
 800192e:	23ff      	movs	r3, #255	; 0xff
 8001930:	2203      	movs	r2, #3
 8001932:	e77a      	b.n	800182a <__aeabi_fdiv+0x56>
 8001934:	000e      	movs	r6, r1
 8001936:	20ff      	movs	r0, #255	; 0xff
 8001938:	2500      	movs	r5, #0
 800193a:	e7ac      	b.n	8001896 <__aeabi_fdiv+0xc2>
 800193c:	2001      	movs	r0, #1
 800193e:	1ac0      	subs	r0, r0, r3
 8001940:	281b      	cmp	r0, #27
 8001942:	dca6      	bgt.n	8001892 <__aeabi_fdiv+0xbe>
 8001944:	379e      	adds	r7, #158	; 0x9e
 8001946:	002a      	movs	r2, r5
 8001948:	40bd      	lsls	r5, r7
 800194a:	40c2      	lsrs	r2, r0
 800194c:	1e6b      	subs	r3, r5, #1
 800194e:	419d      	sbcs	r5, r3
 8001950:	4315      	orrs	r5, r2
 8001952:	076b      	lsls	r3, r5, #29
 8001954:	d004      	beq.n	8001960 <__aeabi_fdiv+0x18c>
 8001956:	230f      	movs	r3, #15
 8001958:	402b      	ands	r3, r5
 800195a:	2b04      	cmp	r3, #4
 800195c:	d000      	beq.n	8001960 <__aeabi_fdiv+0x18c>
 800195e:	3504      	adds	r5, #4
 8001960:	016b      	lsls	r3, r5, #5
 8001962:	d544      	bpl.n	80019ee <__aeabi_fdiv+0x21a>
 8001964:	2001      	movs	r0, #1
 8001966:	2500      	movs	r5, #0
 8001968:	e795      	b.n	8001896 <__aeabi_fdiv+0xc2>
 800196a:	20ff      	movs	r0, #255	; 0xff
 800196c:	2500      	movs	r5, #0
 800196e:	e792      	b.n	8001896 <__aeabi_fdiv+0xc2>
 8001970:	2580      	movs	r5, #128	; 0x80
 8001972:	2600      	movs	r6, #0
 8001974:	20ff      	movs	r0, #255	; 0xff
 8001976:	03ed      	lsls	r5, r5, #15
 8001978:	e78d      	b.n	8001896 <__aeabi_fdiv+0xc2>
 800197a:	2300      	movs	r3, #0
 800197c:	4698      	mov	r8, r3
 800197e:	2080      	movs	r0, #128	; 0x80
 8001980:	03c0      	lsls	r0, r0, #15
 8001982:	4205      	tst	r5, r0
 8001984:	d009      	beq.n	800199a <__aeabi_fdiv+0x1c6>
 8001986:	4643      	mov	r3, r8
 8001988:	4203      	tst	r3, r0
 800198a:	d106      	bne.n	800199a <__aeabi_fdiv+0x1c6>
 800198c:	4645      	mov	r5, r8
 800198e:	4305      	orrs	r5, r0
 8001990:	026d      	lsls	r5, r5, #9
 8001992:	0026      	movs	r6, r4
 8001994:	20ff      	movs	r0, #255	; 0xff
 8001996:	0a6d      	lsrs	r5, r5, #9
 8001998:	e77d      	b.n	8001896 <__aeabi_fdiv+0xc2>
 800199a:	2080      	movs	r0, #128	; 0x80
 800199c:	03c0      	lsls	r0, r0, #15
 800199e:	4305      	orrs	r5, r0
 80019a0:	026d      	lsls	r5, r5, #9
 80019a2:	20ff      	movs	r0, #255	; 0xff
 80019a4:	0a6d      	lsrs	r5, r5, #9
 80019a6:	e776      	b.n	8001896 <__aeabi_fdiv+0xc2>
 80019a8:	4642      	mov	r2, r8
 80019aa:	016b      	lsls	r3, r5, #5
 80019ac:	0150      	lsls	r0, r2, #5
 80019ae:	4283      	cmp	r3, r0
 80019b0:	d219      	bcs.n	80019e6 <__aeabi_fdiv+0x212>
 80019b2:	221b      	movs	r2, #27
 80019b4:	2500      	movs	r5, #0
 80019b6:	3f01      	subs	r7, #1
 80019b8:	2601      	movs	r6, #1
 80019ba:	001c      	movs	r4, r3
 80019bc:	006d      	lsls	r5, r5, #1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	2c00      	cmp	r4, #0
 80019c2:	db01      	blt.n	80019c8 <__aeabi_fdiv+0x1f4>
 80019c4:	4298      	cmp	r0, r3
 80019c6:	d801      	bhi.n	80019cc <__aeabi_fdiv+0x1f8>
 80019c8:	1a1b      	subs	r3, r3, r0
 80019ca:	4335      	orrs	r5, r6
 80019cc:	3a01      	subs	r2, #1
 80019ce:	2a00      	cmp	r2, #0
 80019d0:	d1f3      	bne.n	80019ba <__aeabi_fdiv+0x1e6>
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	4193      	sbcs	r3, r2
 80019d6:	431d      	orrs	r5, r3
 80019d8:	003b      	movs	r3, r7
 80019da:	337f      	adds	r3, #127	; 0x7f
 80019dc:	000e      	movs	r6, r1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd00      	ble.n	80019e4 <__aeabi_fdiv+0x210>
 80019e2:	e741      	b.n	8001868 <__aeabi_fdiv+0x94>
 80019e4:	e7aa      	b.n	800193c <__aeabi_fdiv+0x168>
 80019e6:	221a      	movs	r2, #26
 80019e8:	2501      	movs	r5, #1
 80019ea:	1a1b      	subs	r3, r3, r0
 80019ec:	e7e4      	b.n	80019b8 <__aeabi_fdiv+0x1e4>
 80019ee:	01ad      	lsls	r5, r5, #6
 80019f0:	2000      	movs	r0, #0
 80019f2:	0a6d      	lsrs	r5, r5, #9
 80019f4:	e74f      	b.n	8001896 <__aeabi_fdiv+0xc2>
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	08004524 	.word	0x08004524
 80019fc:	f7ffffff 	.word	0xf7ffffff
 8001a00:	08004564 	.word	0x08004564

08001a04 <__eqsf2>:
 8001a04:	b570      	push	{r4, r5, r6, lr}
 8001a06:	0042      	lsls	r2, r0, #1
 8001a08:	0245      	lsls	r5, r0, #9
 8001a0a:	024e      	lsls	r6, r1, #9
 8001a0c:	004c      	lsls	r4, r1, #1
 8001a0e:	0fc3      	lsrs	r3, r0, #31
 8001a10:	0a6d      	lsrs	r5, r5, #9
 8001a12:	2001      	movs	r0, #1
 8001a14:	0e12      	lsrs	r2, r2, #24
 8001a16:	0a76      	lsrs	r6, r6, #9
 8001a18:	0e24      	lsrs	r4, r4, #24
 8001a1a:	0fc9      	lsrs	r1, r1, #31
 8001a1c:	2aff      	cmp	r2, #255	; 0xff
 8001a1e:	d006      	beq.n	8001a2e <__eqsf2+0x2a>
 8001a20:	2cff      	cmp	r4, #255	; 0xff
 8001a22:	d003      	beq.n	8001a2c <__eqsf2+0x28>
 8001a24:	42a2      	cmp	r2, r4
 8001a26:	d101      	bne.n	8001a2c <__eqsf2+0x28>
 8001a28:	42b5      	cmp	r5, r6
 8001a2a:	d006      	beq.n	8001a3a <__eqsf2+0x36>
 8001a2c:	bd70      	pop	{r4, r5, r6, pc}
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d1fc      	bne.n	8001a2c <__eqsf2+0x28>
 8001a32:	2cff      	cmp	r4, #255	; 0xff
 8001a34:	d1fa      	bne.n	8001a2c <__eqsf2+0x28>
 8001a36:	2e00      	cmp	r6, #0
 8001a38:	d1f8      	bne.n	8001a2c <__eqsf2+0x28>
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	d006      	beq.n	8001a4c <__eqsf2+0x48>
 8001a3e:	2001      	movs	r0, #1
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	d1f3      	bne.n	8001a2c <__eqsf2+0x28>
 8001a44:	0028      	movs	r0, r5
 8001a46:	1e43      	subs	r3, r0, #1
 8001a48:	4198      	sbcs	r0, r3
 8001a4a:	e7ef      	b.n	8001a2c <__eqsf2+0x28>
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	e7ed      	b.n	8001a2c <__eqsf2+0x28>

08001a50 <__gesf2>:
 8001a50:	b570      	push	{r4, r5, r6, lr}
 8001a52:	0042      	lsls	r2, r0, #1
 8001a54:	0245      	lsls	r5, r0, #9
 8001a56:	024e      	lsls	r6, r1, #9
 8001a58:	004c      	lsls	r4, r1, #1
 8001a5a:	0fc3      	lsrs	r3, r0, #31
 8001a5c:	0a6d      	lsrs	r5, r5, #9
 8001a5e:	0e12      	lsrs	r2, r2, #24
 8001a60:	0a76      	lsrs	r6, r6, #9
 8001a62:	0e24      	lsrs	r4, r4, #24
 8001a64:	0fc8      	lsrs	r0, r1, #31
 8001a66:	2aff      	cmp	r2, #255	; 0xff
 8001a68:	d01b      	beq.n	8001aa2 <__gesf2+0x52>
 8001a6a:	2cff      	cmp	r4, #255	; 0xff
 8001a6c:	d00e      	beq.n	8001a8c <__gesf2+0x3c>
 8001a6e:	2a00      	cmp	r2, #0
 8001a70:	d11b      	bne.n	8001aaa <__gesf2+0x5a>
 8001a72:	2c00      	cmp	r4, #0
 8001a74:	d101      	bne.n	8001a7a <__gesf2+0x2a>
 8001a76:	2e00      	cmp	r6, #0
 8001a78:	d01c      	beq.n	8001ab4 <__gesf2+0x64>
 8001a7a:	2d00      	cmp	r5, #0
 8001a7c:	d00c      	beq.n	8001a98 <__gesf2+0x48>
 8001a7e:	4283      	cmp	r3, r0
 8001a80:	d01c      	beq.n	8001abc <__gesf2+0x6c>
 8001a82:	2102      	movs	r1, #2
 8001a84:	1e58      	subs	r0, r3, #1
 8001a86:	4008      	ands	r0, r1
 8001a88:	3801      	subs	r0, #1
 8001a8a:	bd70      	pop	{r4, r5, r6, pc}
 8001a8c:	2e00      	cmp	r6, #0
 8001a8e:	d122      	bne.n	8001ad6 <__gesf2+0x86>
 8001a90:	2a00      	cmp	r2, #0
 8001a92:	d1f4      	bne.n	8001a7e <__gesf2+0x2e>
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	d1f2      	bne.n	8001a7e <__gesf2+0x2e>
 8001a98:	2800      	cmp	r0, #0
 8001a9a:	d1f6      	bne.n	8001a8a <__gesf2+0x3a>
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	4240      	negs	r0, r0
 8001aa0:	e7f3      	b.n	8001a8a <__gesf2+0x3a>
 8001aa2:	2d00      	cmp	r5, #0
 8001aa4:	d117      	bne.n	8001ad6 <__gesf2+0x86>
 8001aa6:	2cff      	cmp	r4, #255	; 0xff
 8001aa8:	d0f0      	beq.n	8001a8c <__gesf2+0x3c>
 8001aaa:	2c00      	cmp	r4, #0
 8001aac:	d1e7      	bne.n	8001a7e <__gesf2+0x2e>
 8001aae:	2e00      	cmp	r6, #0
 8001ab0:	d1e5      	bne.n	8001a7e <__gesf2+0x2e>
 8001ab2:	e7e6      	b.n	8001a82 <__gesf2+0x32>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	d0e7      	beq.n	8001a8a <__gesf2+0x3a>
 8001aba:	e7e2      	b.n	8001a82 <__gesf2+0x32>
 8001abc:	42a2      	cmp	r2, r4
 8001abe:	dc05      	bgt.n	8001acc <__gesf2+0x7c>
 8001ac0:	dbea      	blt.n	8001a98 <__gesf2+0x48>
 8001ac2:	42b5      	cmp	r5, r6
 8001ac4:	d802      	bhi.n	8001acc <__gesf2+0x7c>
 8001ac6:	d3e7      	bcc.n	8001a98 <__gesf2+0x48>
 8001ac8:	2000      	movs	r0, #0
 8001aca:	e7de      	b.n	8001a8a <__gesf2+0x3a>
 8001acc:	4243      	negs	r3, r0
 8001ace:	4158      	adcs	r0, r3
 8001ad0:	0040      	lsls	r0, r0, #1
 8001ad2:	3801      	subs	r0, #1
 8001ad4:	e7d9      	b.n	8001a8a <__gesf2+0x3a>
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	4240      	negs	r0, r0
 8001ada:	e7d6      	b.n	8001a8a <__gesf2+0x3a>

08001adc <__lesf2>:
 8001adc:	b570      	push	{r4, r5, r6, lr}
 8001ade:	0042      	lsls	r2, r0, #1
 8001ae0:	0245      	lsls	r5, r0, #9
 8001ae2:	024e      	lsls	r6, r1, #9
 8001ae4:	004c      	lsls	r4, r1, #1
 8001ae6:	0fc3      	lsrs	r3, r0, #31
 8001ae8:	0a6d      	lsrs	r5, r5, #9
 8001aea:	0e12      	lsrs	r2, r2, #24
 8001aec:	0a76      	lsrs	r6, r6, #9
 8001aee:	0e24      	lsrs	r4, r4, #24
 8001af0:	0fc8      	lsrs	r0, r1, #31
 8001af2:	2aff      	cmp	r2, #255	; 0xff
 8001af4:	d00b      	beq.n	8001b0e <__lesf2+0x32>
 8001af6:	2cff      	cmp	r4, #255	; 0xff
 8001af8:	d00d      	beq.n	8001b16 <__lesf2+0x3a>
 8001afa:	2a00      	cmp	r2, #0
 8001afc:	d11f      	bne.n	8001b3e <__lesf2+0x62>
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d116      	bne.n	8001b30 <__lesf2+0x54>
 8001b02:	2e00      	cmp	r6, #0
 8001b04:	d114      	bne.n	8001b30 <__lesf2+0x54>
 8001b06:	2000      	movs	r0, #0
 8001b08:	2d00      	cmp	r5, #0
 8001b0a:	d010      	beq.n	8001b2e <__lesf2+0x52>
 8001b0c:	e009      	b.n	8001b22 <__lesf2+0x46>
 8001b0e:	2d00      	cmp	r5, #0
 8001b10:	d10c      	bne.n	8001b2c <__lesf2+0x50>
 8001b12:	2cff      	cmp	r4, #255	; 0xff
 8001b14:	d113      	bne.n	8001b3e <__lesf2+0x62>
 8001b16:	2e00      	cmp	r6, #0
 8001b18:	d108      	bne.n	8001b2c <__lesf2+0x50>
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d008      	beq.n	8001b30 <__lesf2+0x54>
 8001b1e:	4283      	cmp	r3, r0
 8001b20:	d012      	beq.n	8001b48 <__lesf2+0x6c>
 8001b22:	2102      	movs	r1, #2
 8001b24:	1e58      	subs	r0, r3, #1
 8001b26:	4008      	ands	r0, r1
 8001b28:	3801      	subs	r0, #1
 8001b2a:	e000      	b.n	8001b2e <__lesf2+0x52>
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
 8001b30:	2d00      	cmp	r5, #0
 8001b32:	d1f4      	bne.n	8001b1e <__lesf2+0x42>
 8001b34:	2800      	cmp	r0, #0
 8001b36:	d1fa      	bne.n	8001b2e <__lesf2+0x52>
 8001b38:	2001      	movs	r0, #1
 8001b3a:	4240      	negs	r0, r0
 8001b3c:	e7f7      	b.n	8001b2e <__lesf2+0x52>
 8001b3e:	2c00      	cmp	r4, #0
 8001b40:	d1ed      	bne.n	8001b1e <__lesf2+0x42>
 8001b42:	2e00      	cmp	r6, #0
 8001b44:	d1eb      	bne.n	8001b1e <__lesf2+0x42>
 8001b46:	e7ec      	b.n	8001b22 <__lesf2+0x46>
 8001b48:	42a2      	cmp	r2, r4
 8001b4a:	dc05      	bgt.n	8001b58 <__lesf2+0x7c>
 8001b4c:	dbf2      	blt.n	8001b34 <__lesf2+0x58>
 8001b4e:	42b5      	cmp	r5, r6
 8001b50:	d802      	bhi.n	8001b58 <__lesf2+0x7c>
 8001b52:	d3ef      	bcc.n	8001b34 <__lesf2+0x58>
 8001b54:	2000      	movs	r0, #0
 8001b56:	e7ea      	b.n	8001b2e <__lesf2+0x52>
 8001b58:	4243      	negs	r3, r0
 8001b5a:	4158      	adcs	r0, r3
 8001b5c:	0040      	lsls	r0, r0, #1
 8001b5e:	3801      	subs	r0, #1
 8001b60:	e7e5      	b.n	8001b2e <__lesf2+0x52>
 8001b62:	46c0      	nop			; (mov r8, r8)

08001b64 <__aeabi_fmul>:
 8001b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b66:	464f      	mov	r7, r9
 8001b68:	4646      	mov	r6, r8
 8001b6a:	46d6      	mov	lr, sl
 8001b6c:	0244      	lsls	r4, r0, #9
 8001b6e:	0045      	lsls	r5, r0, #1
 8001b70:	b5c0      	push	{r6, r7, lr}
 8001b72:	0a64      	lsrs	r4, r4, #9
 8001b74:	1c0f      	adds	r7, r1, #0
 8001b76:	0e2d      	lsrs	r5, r5, #24
 8001b78:	0fc6      	lsrs	r6, r0, #31
 8001b7a:	2d00      	cmp	r5, #0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_fmul+0x1c>
 8001b7e:	e08d      	b.n	8001c9c <__aeabi_fmul+0x138>
 8001b80:	2dff      	cmp	r5, #255	; 0xff
 8001b82:	d100      	bne.n	8001b86 <__aeabi_fmul+0x22>
 8001b84:	e092      	b.n	8001cac <__aeabi_fmul+0x148>
 8001b86:	2300      	movs	r3, #0
 8001b88:	2080      	movs	r0, #128	; 0x80
 8001b8a:	4699      	mov	r9, r3
 8001b8c:	469a      	mov	sl, r3
 8001b8e:	00e4      	lsls	r4, r4, #3
 8001b90:	04c0      	lsls	r0, r0, #19
 8001b92:	4304      	orrs	r4, r0
 8001b94:	3d7f      	subs	r5, #127	; 0x7f
 8001b96:	0278      	lsls	r0, r7, #9
 8001b98:	0a43      	lsrs	r3, r0, #9
 8001b9a:	4698      	mov	r8, r3
 8001b9c:	007b      	lsls	r3, r7, #1
 8001b9e:	0e1b      	lsrs	r3, r3, #24
 8001ba0:	0fff      	lsrs	r7, r7, #31
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d100      	bne.n	8001ba8 <__aeabi_fmul+0x44>
 8001ba6:	e070      	b.n	8001c8a <__aeabi_fmul+0x126>
 8001ba8:	2bff      	cmp	r3, #255	; 0xff
 8001baa:	d100      	bne.n	8001bae <__aeabi_fmul+0x4a>
 8001bac:	e086      	b.n	8001cbc <__aeabi_fmul+0x158>
 8001bae:	4642      	mov	r2, r8
 8001bb0:	00d0      	lsls	r0, r2, #3
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	3b7f      	subs	r3, #127	; 0x7f
 8001bb6:	18ed      	adds	r5, r5, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	04d2      	lsls	r2, r2, #19
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	4690      	mov	r8, r2
 8001bc0:	469c      	mov	ip, r3
 8001bc2:	0031      	movs	r1, r6
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	4079      	eors	r1, r7
 8001bc8:	1c68      	adds	r0, r5, #1
 8001bca:	2b0f      	cmp	r3, #15
 8001bcc:	d81c      	bhi.n	8001c08 <__aeabi_fmul+0xa4>
 8001bce:	4a76      	ldr	r2, [pc, #472]	; (8001da8 <__aeabi_fmul+0x244>)
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	58d3      	ldr	r3, [r2, r3]
 8001bd4:	469f      	mov	pc, r3
 8001bd6:	0039      	movs	r1, r7
 8001bd8:	4644      	mov	r4, r8
 8001bda:	46e2      	mov	sl, ip
 8001bdc:	4653      	mov	r3, sl
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d00f      	beq.n	8001c02 <__aeabi_fmul+0x9e>
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d100      	bne.n	8001be8 <__aeabi_fmul+0x84>
 8001be6:	e0d7      	b.n	8001d98 <__aeabi_fmul+0x234>
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d137      	bne.n	8001c5c <__aeabi_fmul+0xf8>
 8001bec:	2000      	movs	r0, #0
 8001bee:	2400      	movs	r4, #0
 8001bf0:	05c0      	lsls	r0, r0, #23
 8001bf2:	4320      	orrs	r0, r4
 8001bf4:	07c9      	lsls	r1, r1, #31
 8001bf6:	4308      	orrs	r0, r1
 8001bf8:	bce0      	pop	{r5, r6, r7}
 8001bfa:	46ba      	mov	sl, r7
 8001bfc:	46b1      	mov	r9, r6
 8001bfe:	46a8      	mov	r8, r5
 8001c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c02:	20ff      	movs	r0, #255	; 0xff
 8001c04:	2400      	movs	r4, #0
 8001c06:	e7f3      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001c08:	0c26      	lsrs	r6, r4, #16
 8001c0a:	0424      	lsls	r4, r4, #16
 8001c0c:	0c22      	lsrs	r2, r4, #16
 8001c0e:	4644      	mov	r4, r8
 8001c10:	0424      	lsls	r4, r4, #16
 8001c12:	0c24      	lsrs	r4, r4, #16
 8001c14:	4643      	mov	r3, r8
 8001c16:	0027      	movs	r7, r4
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	4357      	muls	r7, r2
 8001c1c:	4374      	muls	r4, r6
 8001c1e:	435a      	muls	r2, r3
 8001c20:	435e      	muls	r6, r3
 8001c22:	1912      	adds	r2, r2, r4
 8001c24:	0c3b      	lsrs	r3, r7, #16
 8001c26:	189b      	adds	r3, r3, r2
 8001c28:	429c      	cmp	r4, r3
 8001c2a:	d903      	bls.n	8001c34 <__aeabi_fmul+0xd0>
 8001c2c:	2280      	movs	r2, #128	; 0x80
 8001c2e:	0252      	lsls	r2, r2, #9
 8001c30:	4694      	mov	ip, r2
 8001c32:	4466      	add	r6, ip
 8001c34:	043f      	lsls	r7, r7, #16
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	0c3f      	lsrs	r7, r7, #16
 8001c3a:	19d2      	adds	r2, r2, r7
 8001c3c:	0194      	lsls	r4, r2, #6
 8001c3e:	1e67      	subs	r7, r4, #1
 8001c40:	41bc      	sbcs	r4, r7
 8001c42:	0c1b      	lsrs	r3, r3, #16
 8001c44:	0e92      	lsrs	r2, r2, #26
 8001c46:	199b      	adds	r3, r3, r6
 8001c48:	4314      	orrs	r4, r2
 8001c4a:	019b      	lsls	r3, r3, #6
 8001c4c:	431c      	orrs	r4, r3
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	d400      	bmi.n	8001c54 <__aeabi_fmul+0xf0>
 8001c52:	e09b      	b.n	8001d8c <__aeabi_fmul+0x228>
 8001c54:	2301      	movs	r3, #1
 8001c56:	0862      	lsrs	r2, r4, #1
 8001c58:	401c      	ands	r4, r3
 8001c5a:	4314      	orrs	r4, r2
 8001c5c:	0002      	movs	r2, r0
 8001c5e:	327f      	adds	r2, #127	; 0x7f
 8001c60:	2a00      	cmp	r2, #0
 8001c62:	dd64      	ble.n	8001d2e <__aeabi_fmul+0x1ca>
 8001c64:	0763      	lsls	r3, r4, #29
 8001c66:	d004      	beq.n	8001c72 <__aeabi_fmul+0x10e>
 8001c68:	230f      	movs	r3, #15
 8001c6a:	4023      	ands	r3, r4
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d000      	beq.n	8001c72 <__aeabi_fmul+0x10e>
 8001c70:	3404      	adds	r4, #4
 8001c72:	0123      	lsls	r3, r4, #4
 8001c74:	d503      	bpl.n	8001c7e <__aeabi_fmul+0x11a>
 8001c76:	0002      	movs	r2, r0
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <__aeabi_fmul+0x248>)
 8001c7a:	3280      	adds	r2, #128	; 0x80
 8001c7c:	401c      	ands	r4, r3
 8001c7e:	2afe      	cmp	r2, #254	; 0xfe
 8001c80:	dcbf      	bgt.n	8001c02 <__aeabi_fmul+0x9e>
 8001c82:	01a4      	lsls	r4, r4, #6
 8001c84:	0a64      	lsrs	r4, r4, #9
 8001c86:	b2d0      	uxtb	r0, r2
 8001c88:	e7b2      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001c8a:	4643      	mov	r3, r8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d13d      	bne.n	8001d0c <__aeabi_fmul+0x1a8>
 8001c90:	464a      	mov	r2, r9
 8001c92:	3301      	adds	r3, #1
 8001c94:	431a      	orrs	r2, r3
 8001c96:	4691      	mov	r9, r2
 8001c98:	469c      	mov	ip, r3
 8001c9a:	e792      	b.n	8001bc2 <__aeabi_fmul+0x5e>
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	d129      	bne.n	8001cf4 <__aeabi_fmul+0x190>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	4699      	mov	r9, r3
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	2500      	movs	r5, #0
 8001ca8:	469a      	mov	sl, r3
 8001caa:	e774      	b.n	8001b96 <__aeabi_fmul+0x32>
 8001cac:	2c00      	cmp	r4, #0
 8001cae:	d11b      	bne.n	8001ce8 <__aeabi_fmul+0x184>
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	4699      	mov	r9, r3
 8001cb4:	3b06      	subs	r3, #6
 8001cb6:	25ff      	movs	r5, #255	; 0xff
 8001cb8:	469a      	mov	sl, r3
 8001cba:	e76c      	b.n	8001b96 <__aeabi_fmul+0x32>
 8001cbc:	4643      	mov	r3, r8
 8001cbe:	35ff      	adds	r5, #255	; 0xff
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10b      	bne.n	8001cdc <__aeabi_fmul+0x178>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	464a      	mov	r2, r9
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	4691      	mov	r9, r2
 8001ccc:	469c      	mov	ip, r3
 8001cce:	e778      	b.n	8001bc2 <__aeabi_fmul+0x5e>
 8001cd0:	4653      	mov	r3, sl
 8001cd2:	0031      	movs	r1, r6
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d000      	beq.n	8001cda <__aeabi_fmul+0x176>
 8001cd8:	e783      	b.n	8001be2 <__aeabi_fmul+0x7e>
 8001cda:	e792      	b.n	8001c02 <__aeabi_fmul+0x9e>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	464a      	mov	r2, r9
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	4691      	mov	r9, r2
 8001ce4:	469c      	mov	ip, r3
 8001ce6:	e76c      	b.n	8001bc2 <__aeabi_fmul+0x5e>
 8001ce8:	230c      	movs	r3, #12
 8001cea:	4699      	mov	r9, r3
 8001cec:	3b09      	subs	r3, #9
 8001cee:	25ff      	movs	r5, #255	; 0xff
 8001cf0:	469a      	mov	sl, r3
 8001cf2:	e750      	b.n	8001b96 <__aeabi_fmul+0x32>
 8001cf4:	0020      	movs	r0, r4
 8001cf6:	f000 fab9 	bl	800226c <__clzsi2>
 8001cfa:	2576      	movs	r5, #118	; 0x76
 8001cfc:	1f43      	subs	r3, r0, #5
 8001cfe:	409c      	lsls	r4, r3
 8001d00:	2300      	movs	r3, #0
 8001d02:	426d      	negs	r5, r5
 8001d04:	4699      	mov	r9, r3
 8001d06:	469a      	mov	sl, r3
 8001d08:	1a2d      	subs	r5, r5, r0
 8001d0a:	e744      	b.n	8001b96 <__aeabi_fmul+0x32>
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	f000 faad 	bl	800226c <__clzsi2>
 8001d12:	4642      	mov	r2, r8
 8001d14:	1f43      	subs	r3, r0, #5
 8001d16:	409a      	lsls	r2, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	1a2d      	subs	r5, r5, r0
 8001d1c:	4690      	mov	r8, r2
 8001d1e:	469c      	mov	ip, r3
 8001d20:	3d76      	subs	r5, #118	; 0x76
 8001d22:	e74e      	b.n	8001bc2 <__aeabi_fmul+0x5e>
 8001d24:	2480      	movs	r4, #128	; 0x80
 8001d26:	2100      	movs	r1, #0
 8001d28:	20ff      	movs	r0, #255	; 0xff
 8001d2a:	03e4      	lsls	r4, r4, #15
 8001d2c:	e760      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	2b1b      	cmp	r3, #27
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_fmul+0x1d4>
 8001d36:	e759      	b.n	8001bec <__aeabi_fmul+0x88>
 8001d38:	0022      	movs	r2, r4
 8001d3a:	309e      	adds	r0, #158	; 0x9e
 8001d3c:	40da      	lsrs	r2, r3
 8001d3e:	4084      	lsls	r4, r0
 8001d40:	0013      	movs	r3, r2
 8001d42:	1e62      	subs	r2, r4, #1
 8001d44:	4194      	sbcs	r4, r2
 8001d46:	431c      	orrs	r4, r3
 8001d48:	0763      	lsls	r3, r4, #29
 8001d4a:	d004      	beq.n	8001d56 <__aeabi_fmul+0x1f2>
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	4023      	ands	r3, r4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d000      	beq.n	8001d56 <__aeabi_fmul+0x1f2>
 8001d54:	3404      	adds	r4, #4
 8001d56:	0163      	lsls	r3, r4, #5
 8001d58:	d51a      	bpl.n	8001d90 <__aeabi_fmul+0x22c>
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	2400      	movs	r4, #0
 8001d5e:	e747      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001d60:	2080      	movs	r0, #128	; 0x80
 8001d62:	03c0      	lsls	r0, r0, #15
 8001d64:	4204      	tst	r4, r0
 8001d66:	d009      	beq.n	8001d7c <__aeabi_fmul+0x218>
 8001d68:	4643      	mov	r3, r8
 8001d6a:	4203      	tst	r3, r0
 8001d6c:	d106      	bne.n	8001d7c <__aeabi_fmul+0x218>
 8001d6e:	4644      	mov	r4, r8
 8001d70:	4304      	orrs	r4, r0
 8001d72:	0264      	lsls	r4, r4, #9
 8001d74:	0039      	movs	r1, r7
 8001d76:	20ff      	movs	r0, #255	; 0xff
 8001d78:	0a64      	lsrs	r4, r4, #9
 8001d7a:	e739      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001d7c:	2080      	movs	r0, #128	; 0x80
 8001d7e:	03c0      	lsls	r0, r0, #15
 8001d80:	4304      	orrs	r4, r0
 8001d82:	0264      	lsls	r4, r4, #9
 8001d84:	0031      	movs	r1, r6
 8001d86:	20ff      	movs	r0, #255	; 0xff
 8001d88:	0a64      	lsrs	r4, r4, #9
 8001d8a:	e731      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001d8c:	0028      	movs	r0, r5
 8001d8e:	e765      	b.n	8001c5c <__aeabi_fmul+0xf8>
 8001d90:	01a4      	lsls	r4, r4, #6
 8001d92:	2000      	movs	r0, #0
 8001d94:	0a64      	lsrs	r4, r4, #9
 8001d96:	e72b      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001d98:	2080      	movs	r0, #128	; 0x80
 8001d9a:	03c0      	lsls	r0, r0, #15
 8001d9c:	4304      	orrs	r4, r0
 8001d9e:	0264      	lsls	r4, r4, #9
 8001da0:	20ff      	movs	r0, #255	; 0xff
 8001da2:	0a64      	lsrs	r4, r4, #9
 8001da4:	e724      	b.n	8001bf0 <__aeabi_fmul+0x8c>
 8001da6:	46c0      	nop			; (mov r8, r8)
 8001da8:	080045a4 	.word	0x080045a4
 8001dac:	f7ffffff 	.word	0xf7ffffff

08001db0 <__aeabi_fsub>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	46ce      	mov	lr, r9
 8001db4:	4647      	mov	r7, r8
 8001db6:	0243      	lsls	r3, r0, #9
 8001db8:	0a5b      	lsrs	r3, r3, #9
 8001dba:	024e      	lsls	r6, r1, #9
 8001dbc:	00da      	lsls	r2, r3, #3
 8001dbe:	4694      	mov	ip, r2
 8001dc0:	0a72      	lsrs	r2, r6, #9
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	0045      	lsls	r5, r0, #1
 8001dc6:	004a      	lsls	r2, r1, #1
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	0e2d      	lsrs	r5, r5, #24
 8001dcc:	001f      	movs	r7, r3
 8001dce:	0fc4      	lsrs	r4, r0, #31
 8001dd0:	0e12      	lsrs	r2, r2, #24
 8001dd2:	0fc9      	lsrs	r1, r1, #31
 8001dd4:	09b6      	lsrs	r6, r6, #6
 8001dd6:	2aff      	cmp	r2, #255	; 0xff
 8001dd8:	d05b      	beq.n	8001e92 <__aeabi_fsub+0xe2>
 8001dda:	2001      	movs	r0, #1
 8001ddc:	4041      	eors	r1, r0
 8001dde:	428c      	cmp	r4, r1
 8001de0:	d039      	beq.n	8001e56 <__aeabi_fsub+0xa6>
 8001de2:	1aa8      	subs	r0, r5, r2
 8001de4:	2800      	cmp	r0, #0
 8001de6:	dd5a      	ble.n	8001e9e <__aeabi_fsub+0xee>
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d06a      	beq.n	8001ec2 <__aeabi_fsub+0x112>
 8001dec:	2dff      	cmp	r5, #255	; 0xff
 8001dee:	d100      	bne.n	8001df2 <__aeabi_fsub+0x42>
 8001df0:	e0d9      	b.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001df2:	2280      	movs	r2, #128	; 0x80
 8001df4:	04d2      	lsls	r2, r2, #19
 8001df6:	4316      	orrs	r6, r2
 8001df8:	281b      	cmp	r0, #27
 8001dfa:	dc00      	bgt.n	8001dfe <__aeabi_fsub+0x4e>
 8001dfc:	e0e9      	b.n	8001fd2 <__aeabi_fsub+0x222>
 8001dfe:	2001      	movs	r0, #1
 8001e00:	4663      	mov	r3, ip
 8001e02:	1a18      	subs	r0, r3, r0
 8001e04:	0143      	lsls	r3, r0, #5
 8001e06:	d400      	bmi.n	8001e0a <__aeabi_fsub+0x5a>
 8001e08:	e0b4      	b.n	8001f74 <__aeabi_fsub+0x1c4>
 8001e0a:	0180      	lsls	r0, r0, #6
 8001e0c:	0987      	lsrs	r7, r0, #6
 8001e0e:	0038      	movs	r0, r7
 8001e10:	f000 fa2c 	bl	800226c <__clzsi2>
 8001e14:	3805      	subs	r0, #5
 8001e16:	4087      	lsls	r7, r0
 8001e18:	4285      	cmp	r5, r0
 8001e1a:	dc00      	bgt.n	8001e1e <__aeabi_fsub+0x6e>
 8001e1c:	e0cc      	b.n	8001fb8 <__aeabi_fsub+0x208>
 8001e1e:	1a2d      	subs	r5, r5, r0
 8001e20:	48b5      	ldr	r0, [pc, #724]	; (80020f8 <__aeabi_fsub+0x348>)
 8001e22:	4038      	ands	r0, r7
 8001e24:	0743      	lsls	r3, r0, #29
 8001e26:	d004      	beq.n	8001e32 <__aeabi_fsub+0x82>
 8001e28:	230f      	movs	r3, #15
 8001e2a:	4003      	ands	r3, r0
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d000      	beq.n	8001e32 <__aeabi_fsub+0x82>
 8001e30:	3004      	adds	r0, #4
 8001e32:	0143      	lsls	r3, r0, #5
 8001e34:	d400      	bmi.n	8001e38 <__aeabi_fsub+0x88>
 8001e36:	e0a0      	b.n	8001f7a <__aeabi_fsub+0x1ca>
 8001e38:	1c6a      	adds	r2, r5, #1
 8001e3a:	2dfe      	cmp	r5, #254	; 0xfe
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_fsub+0x90>
 8001e3e:	e08d      	b.n	8001f5c <__aeabi_fsub+0x1ac>
 8001e40:	0180      	lsls	r0, r0, #6
 8001e42:	0a47      	lsrs	r7, r0, #9
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	05d0      	lsls	r0, r2, #23
 8001e48:	4338      	orrs	r0, r7
 8001e4a:	07e4      	lsls	r4, r4, #31
 8001e4c:	4320      	orrs	r0, r4
 8001e4e:	bcc0      	pop	{r6, r7}
 8001e50:	46b9      	mov	r9, r7
 8001e52:	46b0      	mov	r8, r6
 8001e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e56:	1aa8      	subs	r0, r5, r2
 8001e58:	4680      	mov	r8, r0
 8001e5a:	2800      	cmp	r0, #0
 8001e5c:	dd45      	ble.n	8001eea <__aeabi_fsub+0x13a>
 8001e5e:	2a00      	cmp	r2, #0
 8001e60:	d070      	beq.n	8001f44 <__aeabi_fsub+0x194>
 8001e62:	2dff      	cmp	r5, #255	; 0xff
 8001e64:	d100      	bne.n	8001e68 <__aeabi_fsub+0xb8>
 8001e66:	e09e      	b.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	04db      	lsls	r3, r3, #19
 8001e6c:	431e      	orrs	r6, r3
 8001e6e:	4643      	mov	r3, r8
 8001e70:	2b1b      	cmp	r3, #27
 8001e72:	dc00      	bgt.n	8001e76 <__aeabi_fsub+0xc6>
 8001e74:	e0d2      	b.n	800201c <__aeabi_fsub+0x26c>
 8001e76:	2001      	movs	r0, #1
 8001e78:	4460      	add	r0, ip
 8001e7a:	0143      	lsls	r3, r0, #5
 8001e7c:	d57a      	bpl.n	8001f74 <__aeabi_fsub+0x1c4>
 8001e7e:	3501      	adds	r5, #1
 8001e80:	2dff      	cmp	r5, #255	; 0xff
 8001e82:	d06b      	beq.n	8001f5c <__aeabi_fsub+0x1ac>
 8001e84:	2301      	movs	r3, #1
 8001e86:	4a9d      	ldr	r2, [pc, #628]	; (80020fc <__aeabi_fsub+0x34c>)
 8001e88:	4003      	ands	r3, r0
 8001e8a:	0840      	lsrs	r0, r0, #1
 8001e8c:	4010      	ands	r0, r2
 8001e8e:	4318      	orrs	r0, r3
 8001e90:	e7c8      	b.n	8001e24 <__aeabi_fsub+0x74>
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	d020      	beq.n	8001ed8 <__aeabi_fsub+0x128>
 8001e96:	428c      	cmp	r4, r1
 8001e98:	d023      	beq.n	8001ee2 <__aeabi_fsub+0x132>
 8001e9a:	0028      	movs	r0, r5
 8001e9c:	38ff      	subs	r0, #255	; 0xff
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d039      	beq.n	8001f16 <__aeabi_fsub+0x166>
 8001ea2:	1b57      	subs	r7, r2, r5
 8001ea4:	2d00      	cmp	r5, #0
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_fsub+0xfa>
 8001ea8:	e09d      	b.n	8001fe6 <__aeabi_fsub+0x236>
 8001eaa:	4663      	mov	r3, ip
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_fsub+0x102>
 8001eb0:	e0db      	b.n	800206a <__aeabi_fsub+0x2ba>
 8001eb2:	1e7b      	subs	r3, r7, #1
 8001eb4:	2f01      	cmp	r7, #1
 8001eb6:	d100      	bne.n	8001eba <__aeabi_fsub+0x10a>
 8001eb8:	e10d      	b.n	80020d6 <__aeabi_fsub+0x326>
 8001eba:	2fff      	cmp	r7, #255	; 0xff
 8001ebc:	d071      	beq.n	8001fa2 <__aeabi_fsub+0x1f2>
 8001ebe:	001f      	movs	r7, r3
 8001ec0:	e098      	b.n	8001ff4 <__aeabi_fsub+0x244>
 8001ec2:	2e00      	cmp	r6, #0
 8001ec4:	d100      	bne.n	8001ec8 <__aeabi_fsub+0x118>
 8001ec6:	e0a7      	b.n	8002018 <__aeabi_fsub+0x268>
 8001ec8:	1e42      	subs	r2, r0, #1
 8001eca:	2801      	cmp	r0, #1
 8001ecc:	d100      	bne.n	8001ed0 <__aeabi_fsub+0x120>
 8001ece:	e0e6      	b.n	800209e <__aeabi_fsub+0x2ee>
 8001ed0:	28ff      	cmp	r0, #255	; 0xff
 8001ed2:	d068      	beq.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001ed4:	0010      	movs	r0, r2
 8001ed6:	e78f      	b.n	8001df8 <__aeabi_fsub+0x48>
 8001ed8:	2001      	movs	r0, #1
 8001eda:	4041      	eors	r1, r0
 8001edc:	42a1      	cmp	r1, r4
 8001ede:	d000      	beq.n	8001ee2 <__aeabi_fsub+0x132>
 8001ee0:	e77f      	b.n	8001de2 <__aeabi_fsub+0x32>
 8001ee2:	20ff      	movs	r0, #255	; 0xff
 8001ee4:	4240      	negs	r0, r0
 8001ee6:	4680      	mov	r8, r0
 8001ee8:	44a8      	add	r8, r5
 8001eea:	4640      	mov	r0, r8
 8001eec:	2800      	cmp	r0, #0
 8001eee:	d038      	beq.n	8001f62 <__aeabi_fsub+0x1b2>
 8001ef0:	1b51      	subs	r1, r2, r5
 8001ef2:	2d00      	cmp	r5, #0
 8001ef4:	d100      	bne.n	8001ef8 <__aeabi_fsub+0x148>
 8001ef6:	e0ae      	b.n	8002056 <__aeabi_fsub+0x2a6>
 8001ef8:	2aff      	cmp	r2, #255	; 0xff
 8001efa:	d100      	bne.n	8001efe <__aeabi_fsub+0x14e>
 8001efc:	e0df      	b.n	80020be <__aeabi_fsub+0x30e>
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	4660      	mov	r0, ip
 8001f02:	04db      	lsls	r3, r3, #19
 8001f04:	4318      	orrs	r0, r3
 8001f06:	4684      	mov	ip, r0
 8001f08:	291b      	cmp	r1, #27
 8001f0a:	dc00      	bgt.n	8001f0e <__aeabi_fsub+0x15e>
 8001f0c:	e0d9      	b.n	80020c2 <__aeabi_fsub+0x312>
 8001f0e:	2001      	movs	r0, #1
 8001f10:	0015      	movs	r5, r2
 8001f12:	1980      	adds	r0, r0, r6
 8001f14:	e7b1      	b.n	8001e7a <__aeabi_fsub+0xca>
 8001f16:	20fe      	movs	r0, #254	; 0xfe
 8001f18:	1c6a      	adds	r2, r5, #1
 8001f1a:	4210      	tst	r0, r2
 8001f1c:	d171      	bne.n	8002002 <__aeabi_fsub+0x252>
 8001f1e:	2d00      	cmp	r5, #0
 8001f20:	d000      	beq.n	8001f24 <__aeabi_fsub+0x174>
 8001f22:	e0a6      	b.n	8002072 <__aeabi_fsub+0x2c2>
 8001f24:	4663      	mov	r3, ip
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <__aeabi_fsub+0x17c>
 8001f2a:	e0d9      	b.n	80020e0 <__aeabi_fsub+0x330>
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2e00      	cmp	r6, #0
 8001f30:	d100      	bne.n	8001f34 <__aeabi_fsub+0x184>
 8001f32:	e788      	b.n	8001e46 <__aeabi_fsub+0x96>
 8001f34:	1b98      	subs	r0, r3, r6
 8001f36:	0143      	lsls	r3, r0, #5
 8001f38:	d400      	bmi.n	8001f3c <__aeabi_fsub+0x18c>
 8001f3a:	e0e1      	b.n	8002100 <__aeabi_fsub+0x350>
 8001f3c:	4663      	mov	r3, ip
 8001f3e:	000c      	movs	r4, r1
 8001f40:	1af0      	subs	r0, r6, r3
 8001f42:	e76f      	b.n	8001e24 <__aeabi_fsub+0x74>
 8001f44:	2e00      	cmp	r6, #0
 8001f46:	d100      	bne.n	8001f4a <__aeabi_fsub+0x19a>
 8001f48:	e0b7      	b.n	80020ba <__aeabi_fsub+0x30a>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	2801      	cmp	r0, #1
 8001f50:	d100      	bne.n	8001f54 <__aeabi_fsub+0x1a4>
 8001f52:	e09c      	b.n	800208e <__aeabi_fsub+0x2de>
 8001f54:	28ff      	cmp	r0, #255	; 0xff
 8001f56:	d026      	beq.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001f58:	4690      	mov	r8, r2
 8001f5a:	e788      	b.n	8001e6e <__aeabi_fsub+0xbe>
 8001f5c:	22ff      	movs	r2, #255	; 0xff
 8001f5e:	2700      	movs	r7, #0
 8001f60:	e771      	b.n	8001e46 <__aeabi_fsub+0x96>
 8001f62:	20fe      	movs	r0, #254	; 0xfe
 8001f64:	1c6a      	adds	r2, r5, #1
 8001f66:	4210      	tst	r0, r2
 8001f68:	d064      	beq.n	8002034 <__aeabi_fsub+0x284>
 8001f6a:	2aff      	cmp	r2, #255	; 0xff
 8001f6c:	d0f6      	beq.n	8001f5c <__aeabi_fsub+0x1ac>
 8001f6e:	0015      	movs	r5, r2
 8001f70:	4466      	add	r6, ip
 8001f72:	0870      	lsrs	r0, r6, #1
 8001f74:	0743      	lsls	r3, r0, #29
 8001f76:	d000      	beq.n	8001f7a <__aeabi_fsub+0x1ca>
 8001f78:	e756      	b.n	8001e28 <__aeabi_fsub+0x78>
 8001f7a:	08c3      	lsrs	r3, r0, #3
 8001f7c:	2dff      	cmp	r5, #255	; 0xff
 8001f7e:	d012      	beq.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001f80:	025b      	lsls	r3, r3, #9
 8001f82:	0a5f      	lsrs	r7, r3, #9
 8001f84:	b2ea      	uxtb	r2, r5
 8001f86:	e75e      	b.n	8001e46 <__aeabi_fsub+0x96>
 8001f88:	4662      	mov	r2, ip
 8001f8a:	2a00      	cmp	r2, #0
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_fsub+0x1e0>
 8001f8e:	e096      	b.n	80020be <__aeabi_fsub+0x30e>
 8001f90:	2e00      	cmp	r6, #0
 8001f92:	d008      	beq.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001f94:	2280      	movs	r2, #128	; 0x80
 8001f96:	03d2      	lsls	r2, r2, #15
 8001f98:	4213      	tst	r3, r2
 8001f9a:	d004      	beq.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001f9c:	4648      	mov	r0, r9
 8001f9e:	4210      	tst	r0, r2
 8001fa0:	d101      	bne.n	8001fa6 <__aeabi_fsub+0x1f6>
 8001fa2:	000c      	movs	r4, r1
 8001fa4:	464b      	mov	r3, r9
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0d8      	beq.n	8001f5c <__aeabi_fsub+0x1ac>
 8001faa:	2780      	movs	r7, #128	; 0x80
 8001fac:	03ff      	lsls	r7, r7, #15
 8001fae:	431f      	orrs	r7, r3
 8001fb0:	027f      	lsls	r7, r7, #9
 8001fb2:	22ff      	movs	r2, #255	; 0xff
 8001fb4:	0a7f      	lsrs	r7, r7, #9
 8001fb6:	e746      	b.n	8001e46 <__aeabi_fsub+0x96>
 8001fb8:	2320      	movs	r3, #32
 8001fba:	003a      	movs	r2, r7
 8001fbc:	1b45      	subs	r5, r0, r5
 8001fbe:	0038      	movs	r0, r7
 8001fc0:	3501      	adds	r5, #1
 8001fc2:	40ea      	lsrs	r2, r5
 8001fc4:	1b5d      	subs	r5, r3, r5
 8001fc6:	40a8      	lsls	r0, r5
 8001fc8:	1e43      	subs	r3, r0, #1
 8001fca:	4198      	sbcs	r0, r3
 8001fcc:	2500      	movs	r5, #0
 8001fce:	4310      	orrs	r0, r2
 8001fd0:	e728      	b.n	8001e24 <__aeabi_fsub+0x74>
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	1a1b      	subs	r3, r3, r0
 8001fd6:	0032      	movs	r2, r6
 8001fd8:	409e      	lsls	r6, r3
 8001fda:	40c2      	lsrs	r2, r0
 8001fdc:	0030      	movs	r0, r6
 8001fde:	1e43      	subs	r3, r0, #1
 8001fe0:	4198      	sbcs	r0, r3
 8001fe2:	4310      	orrs	r0, r2
 8001fe4:	e70c      	b.n	8001e00 <__aeabi_fsub+0x50>
 8001fe6:	2aff      	cmp	r2, #255	; 0xff
 8001fe8:	d0db      	beq.n	8001fa2 <__aeabi_fsub+0x1f2>
 8001fea:	2380      	movs	r3, #128	; 0x80
 8001fec:	4660      	mov	r0, ip
 8001fee:	04db      	lsls	r3, r3, #19
 8001ff0:	4318      	orrs	r0, r3
 8001ff2:	4684      	mov	ip, r0
 8001ff4:	2f1b      	cmp	r7, #27
 8001ff6:	dd56      	ble.n	80020a6 <__aeabi_fsub+0x2f6>
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	000c      	movs	r4, r1
 8001ffc:	0015      	movs	r5, r2
 8001ffe:	1a30      	subs	r0, r6, r0
 8002000:	e700      	b.n	8001e04 <__aeabi_fsub+0x54>
 8002002:	4663      	mov	r3, ip
 8002004:	1b9f      	subs	r7, r3, r6
 8002006:	017b      	lsls	r3, r7, #5
 8002008:	d43d      	bmi.n	8002086 <__aeabi_fsub+0x2d6>
 800200a:	2f00      	cmp	r7, #0
 800200c:	d000      	beq.n	8002010 <__aeabi_fsub+0x260>
 800200e:	e6fe      	b.n	8001e0e <__aeabi_fsub+0x5e>
 8002010:	2400      	movs	r4, #0
 8002012:	2200      	movs	r2, #0
 8002014:	2700      	movs	r7, #0
 8002016:	e716      	b.n	8001e46 <__aeabi_fsub+0x96>
 8002018:	0005      	movs	r5, r0
 800201a:	e7af      	b.n	8001f7c <__aeabi_fsub+0x1cc>
 800201c:	0032      	movs	r2, r6
 800201e:	4643      	mov	r3, r8
 8002020:	4641      	mov	r1, r8
 8002022:	40da      	lsrs	r2, r3
 8002024:	2320      	movs	r3, #32
 8002026:	1a5b      	subs	r3, r3, r1
 8002028:	409e      	lsls	r6, r3
 800202a:	0030      	movs	r0, r6
 800202c:	1e43      	subs	r3, r0, #1
 800202e:	4198      	sbcs	r0, r3
 8002030:	4310      	orrs	r0, r2
 8002032:	e721      	b.n	8001e78 <__aeabi_fsub+0xc8>
 8002034:	2d00      	cmp	r5, #0
 8002036:	d1a7      	bne.n	8001f88 <__aeabi_fsub+0x1d8>
 8002038:	4663      	mov	r3, ip
 800203a:	2b00      	cmp	r3, #0
 800203c:	d059      	beq.n	80020f2 <__aeabi_fsub+0x342>
 800203e:	2200      	movs	r2, #0
 8002040:	2e00      	cmp	r6, #0
 8002042:	d100      	bne.n	8002046 <__aeabi_fsub+0x296>
 8002044:	e6ff      	b.n	8001e46 <__aeabi_fsub+0x96>
 8002046:	0030      	movs	r0, r6
 8002048:	4460      	add	r0, ip
 800204a:	0143      	lsls	r3, r0, #5
 800204c:	d592      	bpl.n	8001f74 <__aeabi_fsub+0x1c4>
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <__aeabi_fsub+0x348>)
 8002050:	3501      	adds	r5, #1
 8002052:	4018      	ands	r0, r3
 8002054:	e78e      	b.n	8001f74 <__aeabi_fsub+0x1c4>
 8002056:	4663      	mov	r3, ip
 8002058:	2b00      	cmp	r3, #0
 800205a:	d047      	beq.n	80020ec <__aeabi_fsub+0x33c>
 800205c:	1e4b      	subs	r3, r1, #1
 800205e:	2901      	cmp	r1, #1
 8002060:	d015      	beq.n	800208e <__aeabi_fsub+0x2de>
 8002062:	29ff      	cmp	r1, #255	; 0xff
 8002064:	d02b      	beq.n	80020be <__aeabi_fsub+0x30e>
 8002066:	0019      	movs	r1, r3
 8002068:	e74e      	b.n	8001f08 <__aeabi_fsub+0x158>
 800206a:	000c      	movs	r4, r1
 800206c:	464b      	mov	r3, r9
 800206e:	003d      	movs	r5, r7
 8002070:	e784      	b.n	8001f7c <__aeabi_fsub+0x1cc>
 8002072:	4662      	mov	r2, ip
 8002074:	2a00      	cmp	r2, #0
 8002076:	d18b      	bne.n	8001f90 <__aeabi_fsub+0x1e0>
 8002078:	2e00      	cmp	r6, #0
 800207a:	d192      	bne.n	8001fa2 <__aeabi_fsub+0x1f2>
 800207c:	2780      	movs	r7, #128	; 0x80
 800207e:	2400      	movs	r4, #0
 8002080:	22ff      	movs	r2, #255	; 0xff
 8002082:	03ff      	lsls	r7, r7, #15
 8002084:	e6df      	b.n	8001e46 <__aeabi_fsub+0x96>
 8002086:	4663      	mov	r3, ip
 8002088:	000c      	movs	r4, r1
 800208a:	1af7      	subs	r7, r6, r3
 800208c:	e6bf      	b.n	8001e0e <__aeabi_fsub+0x5e>
 800208e:	0030      	movs	r0, r6
 8002090:	4460      	add	r0, ip
 8002092:	2501      	movs	r5, #1
 8002094:	0143      	lsls	r3, r0, #5
 8002096:	d400      	bmi.n	800209a <__aeabi_fsub+0x2ea>
 8002098:	e76c      	b.n	8001f74 <__aeabi_fsub+0x1c4>
 800209a:	2502      	movs	r5, #2
 800209c:	e6f2      	b.n	8001e84 <__aeabi_fsub+0xd4>
 800209e:	4663      	mov	r3, ip
 80020a0:	2501      	movs	r5, #1
 80020a2:	1b98      	subs	r0, r3, r6
 80020a4:	e6ae      	b.n	8001e04 <__aeabi_fsub+0x54>
 80020a6:	2320      	movs	r3, #32
 80020a8:	4664      	mov	r4, ip
 80020aa:	4660      	mov	r0, ip
 80020ac:	40fc      	lsrs	r4, r7
 80020ae:	1bdf      	subs	r7, r3, r7
 80020b0:	40b8      	lsls	r0, r7
 80020b2:	1e43      	subs	r3, r0, #1
 80020b4:	4198      	sbcs	r0, r3
 80020b6:	4320      	orrs	r0, r4
 80020b8:	e79f      	b.n	8001ffa <__aeabi_fsub+0x24a>
 80020ba:	0005      	movs	r5, r0
 80020bc:	e75e      	b.n	8001f7c <__aeabi_fsub+0x1cc>
 80020be:	464b      	mov	r3, r9
 80020c0:	e771      	b.n	8001fa6 <__aeabi_fsub+0x1f6>
 80020c2:	2320      	movs	r3, #32
 80020c4:	4665      	mov	r5, ip
 80020c6:	4660      	mov	r0, ip
 80020c8:	40cd      	lsrs	r5, r1
 80020ca:	1a59      	subs	r1, r3, r1
 80020cc:	4088      	lsls	r0, r1
 80020ce:	1e43      	subs	r3, r0, #1
 80020d0:	4198      	sbcs	r0, r3
 80020d2:	4328      	orrs	r0, r5
 80020d4:	e71c      	b.n	8001f10 <__aeabi_fsub+0x160>
 80020d6:	4663      	mov	r3, ip
 80020d8:	000c      	movs	r4, r1
 80020da:	2501      	movs	r5, #1
 80020dc:	1af0      	subs	r0, r6, r3
 80020de:	e691      	b.n	8001e04 <__aeabi_fsub+0x54>
 80020e0:	2e00      	cmp	r6, #0
 80020e2:	d095      	beq.n	8002010 <__aeabi_fsub+0x260>
 80020e4:	000c      	movs	r4, r1
 80020e6:	464f      	mov	r7, r9
 80020e8:	2200      	movs	r2, #0
 80020ea:	e6ac      	b.n	8001e46 <__aeabi_fsub+0x96>
 80020ec:	464b      	mov	r3, r9
 80020ee:	000d      	movs	r5, r1
 80020f0:	e744      	b.n	8001f7c <__aeabi_fsub+0x1cc>
 80020f2:	464f      	mov	r7, r9
 80020f4:	2200      	movs	r2, #0
 80020f6:	e6a6      	b.n	8001e46 <__aeabi_fsub+0x96>
 80020f8:	fbffffff 	.word	0xfbffffff
 80020fc:	7dffffff 	.word	0x7dffffff
 8002100:	2800      	cmp	r0, #0
 8002102:	d000      	beq.n	8002106 <__aeabi_fsub+0x356>
 8002104:	e736      	b.n	8001f74 <__aeabi_fsub+0x1c4>
 8002106:	2400      	movs	r4, #0
 8002108:	2700      	movs	r7, #0
 800210a:	e69c      	b.n	8001e46 <__aeabi_fsub+0x96>

0800210c <__aeabi_f2iz>:
 800210c:	0241      	lsls	r1, r0, #9
 800210e:	0042      	lsls	r2, r0, #1
 8002110:	0fc3      	lsrs	r3, r0, #31
 8002112:	0a49      	lsrs	r1, r1, #9
 8002114:	2000      	movs	r0, #0
 8002116:	0e12      	lsrs	r2, r2, #24
 8002118:	2a7e      	cmp	r2, #126	; 0x7e
 800211a:	dd03      	ble.n	8002124 <__aeabi_f2iz+0x18>
 800211c:	2a9d      	cmp	r2, #157	; 0x9d
 800211e:	dd02      	ble.n	8002126 <__aeabi_f2iz+0x1a>
 8002120:	4a09      	ldr	r2, [pc, #36]	; (8002148 <__aeabi_f2iz+0x3c>)
 8002122:	1898      	adds	r0, r3, r2
 8002124:	4770      	bx	lr
 8002126:	2080      	movs	r0, #128	; 0x80
 8002128:	0400      	lsls	r0, r0, #16
 800212a:	4301      	orrs	r1, r0
 800212c:	2a95      	cmp	r2, #149	; 0x95
 800212e:	dc07      	bgt.n	8002140 <__aeabi_f2iz+0x34>
 8002130:	2096      	movs	r0, #150	; 0x96
 8002132:	1a82      	subs	r2, r0, r2
 8002134:	40d1      	lsrs	r1, r2
 8002136:	4248      	negs	r0, r1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1f3      	bne.n	8002124 <__aeabi_f2iz+0x18>
 800213c:	0008      	movs	r0, r1
 800213e:	e7f1      	b.n	8002124 <__aeabi_f2iz+0x18>
 8002140:	3a96      	subs	r2, #150	; 0x96
 8002142:	4091      	lsls	r1, r2
 8002144:	e7f7      	b.n	8002136 <__aeabi_f2iz+0x2a>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	7fffffff 	.word	0x7fffffff

0800214c <__aeabi_i2f>:
 800214c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214e:	2800      	cmp	r0, #0
 8002150:	d013      	beq.n	800217a <__aeabi_i2f+0x2e>
 8002152:	17c3      	asrs	r3, r0, #31
 8002154:	18c6      	adds	r6, r0, r3
 8002156:	405e      	eors	r6, r3
 8002158:	0fc4      	lsrs	r4, r0, #31
 800215a:	0030      	movs	r0, r6
 800215c:	f000 f886 	bl	800226c <__clzsi2>
 8002160:	239e      	movs	r3, #158	; 0x9e
 8002162:	0005      	movs	r5, r0
 8002164:	1a1b      	subs	r3, r3, r0
 8002166:	2b96      	cmp	r3, #150	; 0x96
 8002168:	dc0f      	bgt.n	800218a <__aeabi_i2f+0x3e>
 800216a:	2808      	cmp	r0, #8
 800216c:	dd01      	ble.n	8002172 <__aeabi_i2f+0x26>
 800216e:	3d08      	subs	r5, #8
 8002170:	40ae      	lsls	r6, r5
 8002172:	0276      	lsls	r6, r6, #9
 8002174:	0a76      	lsrs	r6, r6, #9
 8002176:	b2d8      	uxtb	r0, r3
 8002178:	e002      	b.n	8002180 <__aeabi_i2f+0x34>
 800217a:	2400      	movs	r4, #0
 800217c:	2000      	movs	r0, #0
 800217e:	2600      	movs	r6, #0
 8002180:	05c0      	lsls	r0, r0, #23
 8002182:	4330      	orrs	r0, r6
 8002184:	07e4      	lsls	r4, r4, #31
 8002186:	4320      	orrs	r0, r4
 8002188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800218a:	2b99      	cmp	r3, #153	; 0x99
 800218c:	dd0c      	ble.n	80021a8 <__aeabi_i2f+0x5c>
 800218e:	2205      	movs	r2, #5
 8002190:	0031      	movs	r1, r6
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d1      	lsrs	r1, r2
 8002196:	000a      	movs	r2, r1
 8002198:	0001      	movs	r1, r0
 800219a:	0030      	movs	r0, r6
 800219c:	311b      	adds	r1, #27
 800219e:	4088      	lsls	r0, r1
 80021a0:	1e41      	subs	r1, r0, #1
 80021a2:	4188      	sbcs	r0, r1
 80021a4:	4302      	orrs	r2, r0
 80021a6:	0016      	movs	r6, r2
 80021a8:	2d05      	cmp	r5, #5
 80021aa:	dc12      	bgt.n	80021d2 <__aeabi_i2f+0x86>
 80021ac:	0031      	movs	r1, r6
 80021ae:	4f0d      	ldr	r7, [pc, #52]	; (80021e4 <__aeabi_i2f+0x98>)
 80021b0:	4039      	ands	r1, r7
 80021b2:	0772      	lsls	r2, r6, #29
 80021b4:	d009      	beq.n	80021ca <__aeabi_i2f+0x7e>
 80021b6:	200f      	movs	r0, #15
 80021b8:	4030      	ands	r0, r6
 80021ba:	2804      	cmp	r0, #4
 80021bc:	d005      	beq.n	80021ca <__aeabi_i2f+0x7e>
 80021be:	3104      	adds	r1, #4
 80021c0:	014a      	lsls	r2, r1, #5
 80021c2:	d502      	bpl.n	80021ca <__aeabi_i2f+0x7e>
 80021c4:	239f      	movs	r3, #159	; 0x9f
 80021c6:	4039      	ands	r1, r7
 80021c8:	1b5b      	subs	r3, r3, r5
 80021ca:	0189      	lsls	r1, r1, #6
 80021cc:	0a4e      	lsrs	r6, r1, #9
 80021ce:	b2d8      	uxtb	r0, r3
 80021d0:	e7d6      	b.n	8002180 <__aeabi_i2f+0x34>
 80021d2:	1f6a      	subs	r2, r5, #5
 80021d4:	4096      	lsls	r6, r2
 80021d6:	0031      	movs	r1, r6
 80021d8:	4f02      	ldr	r7, [pc, #8]	; (80021e4 <__aeabi_i2f+0x98>)
 80021da:	4039      	ands	r1, r7
 80021dc:	0772      	lsls	r2, r6, #29
 80021de:	d0f4      	beq.n	80021ca <__aeabi_i2f+0x7e>
 80021e0:	e7e9      	b.n	80021b6 <__aeabi_i2f+0x6a>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	fbffffff 	.word	0xfbffffff

080021e8 <__aeabi_ui2f>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	1e05      	subs	r5, r0, #0
 80021ec:	d00e      	beq.n	800220c <__aeabi_ui2f+0x24>
 80021ee:	f000 f83d 	bl	800226c <__clzsi2>
 80021f2:	239e      	movs	r3, #158	; 0x9e
 80021f4:	0004      	movs	r4, r0
 80021f6:	1a1b      	subs	r3, r3, r0
 80021f8:	2b96      	cmp	r3, #150	; 0x96
 80021fa:	dc0c      	bgt.n	8002216 <__aeabi_ui2f+0x2e>
 80021fc:	2808      	cmp	r0, #8
 80021fe:	dd01      	ble.n	8002204 <__aeabi_ui2f+0x1c>
 8002200:	3c08      	subs	r4, #8
 8002202:	40a5      	lsls	r5, r4
 8002204:	026d      	lsls	r5, r5, #9
 8002206:	0a6d      	lsrs	r5, r5, #9
 8002208:	b2d8      	uxtb	r0, r3
 800220a:	e001      	b.n	8002210 <__aeabi_ui2f+0x28>
 800220c:	2000      	movs	r0, #0
 800220e:	2500      	movs	r5, #0
 8002210:	05c0      	lsls	r0, r0, #23
 8002212:	4328      	orrs	r0, r5
 8002214:	bd70      	pop	{r4, r5, r6, pc}
 8002216:	2b99      	cmp	r3, #153	; 0x99
 8002218:	dd09      	ble.n	800222e <__aeabi_ui2f+0x46>
 800221a:	0002      	movs	r2, r0
 800221c:	0029      	movs	r1, r5
 800221e:	321b      	adds	r2, #27
 8002220:	4091      	lsls	r1, r2
 8002222:	1e4a      	subs	r2, r1, #1
 8002224:	4191      	sbcs	r1, r2
 8002226:	2205      	movs	r2, #5
 8002228:	1a12      	subs	r2, r2, r0
 800222a:	40d5      	lsrs	r5, r2
 800222c:	430d      	orrs	r5, r1
 800222e:	2c05      	cmp	r4, #5
 8002230:	dc12      	bgt.n	8002258 <__aeabi_ui2f+0x70>
 8002232:	0029      	movs	r1, r5
 8002234:	4e0c      	ldr	r6, [pc, #48]	; (8002268 <__aeabi_ui2f+0x80>)
 8002236:	4031      	ands	r1, r6
 8002238:	076a      	lsls	r2, r5, #29
 800223a:	d009      	beq.n	8002250 <__aeabi_ui2f+0x68>
 800223c:	200f      	movs	r0, #15
 800223e:	4028      	ands	r0, r5
 8002240:	2804      	cmp	r0, #4
 8002242:	d005      	beq.n	8002250 <__aeabi_ui2f+0x68>
 8002244:	3104      	adds	r1, #4
 8002246:	014a      	lsls	r2, r1, #5
 8002248:	d502      	bpl.n	8002250 <__aeabi_ui2f+0x68>
 800224a:	239f      	movs	r3, #159	; 0x9f
 800224c:	4031      	ands	r1, r6
 800224e:	1b1b      	subs	r3, r3, r4
 8002250:	0189      	lsls	r1, r1, #6
 8002252:	0a4d      	lsrs	r5, r1, #9
 8002254:	b2d8      	uxtb	r0, r3
 8002256:	e7db      	b.n	8002210 <__aeabi_ui2f+0x28>
 8002258:	1f62      	subs	r2, r4, #5
 800225a:	4095      	lsls	r5, r2
 800225c:	0029      	movs	r1, r5
 800225e:	4e02      	ldr	r6, [pc, #8]	; (8002268 <__aeabi_ui2f+0x80>)
 8002260:	4031      	ands	r1, r6
 8002262:	076a      	lsls	r2, r5, #29
 8002264:	d0f4      	beq.n	8002250 <__aeabi_ui2f+0x68>
 8002266:	e7e9      	b.n	800223c <__aeabi_ui2f+0x54>
 8002268:	fbffffff 	.word	0xfbffffff

0800226c <__clzsi2>:
 800226c:	211c      	movs	r1, #28
 800226e:	2301      	movs	r3, #1
 8002270:	041b      	lsls	r3, r3, #16
 8002272:	4298      	cmp	r0, r3
 8002274:	d301      	bcc.n	800227a <__clzsi2+0xe>
 8002276:	0c00      	lsrs	r0, r0, #16
 8002278:	3910      	subs	r1, #16
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	4298      	cmp	r0, r3
 800227e:	d301      	bcc.n	8002284 <__clzsi2+0x18>
 8002280:	0a00      	lsrs	r0, r0, #8
 8002282:	3908      	subs	r1, #8
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	4298      	cmp	r0, r3
 8002288:	d301      	bcc.n	800228e <__clzsi2+0x22>
 800228a:	0900      	lsrs	r0, r0, #4
 800228c:	3904      	subs	r1, #4
 800228e:	a202      	add	r2, pc, #8	; (adr r2, 8002298 <__clzsi2+0x2c>)
 8002290:	5c10      	ldrb	r0, [r2, r0]
 8002292:	1840      	adds	r0, r0, r1
 8002294:	4770      	bx	lr
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	02020304 	.word	0x02020304
 800229c:	01010101 	.word	0x01010101
	...

080022a8 <ADC_init>:

uint16_t get_adc2 (void) {
	return  adc_dat.adc_2;
}*/

void ADC_init (void){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER4);      // установить аналог мод
 80022ac:	2390      	movs	r3, #144	; 0x90
 80022ae:	05db      	lsls	r3, r3, #23
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2390      	movs	r3, #144	; 0x90
 80022b4:	05db      	lsls	r3, r3, #23
 80022b6:	21c0      	movs	r1, #192	; 0xc0
 80022b8:	0089      	lsls	r1, r1, #2
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]
	//SET_BIT(GPIOA->MODER, GPIO_MODER_MODER5);    // установить аналог мод
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADCEN);      // включим тактирование
 80022be:	4b2b      	ldr	r3, [pc, #172]	; (800236c <ADC_init+0xc4>)
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	4b2a      	ldr	r3, [pc, #168]	; (800236c <ADC_init+0xc4>)
 80022c4:	2180      	movs	r1, #128	; 0x80
 80022c6:	0089      	lsls	r1, r1, #2
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
	SET_BIT(ADC1->SMPR, 0b011 << ADC_SMPR_SMP_Pos);                    // Количество циклов преобразования
 80022cc:	4b28      	ldr	r3, [pc, #160]	; (8002370 <ADC_init+0xc8>)
 80022ce:	695a      	ldr	r2, [r3, #20]
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <ADC_init+0xc8>)
 80022d2:	2103      	movs	r1, #3
 80022d4:	430a      	orrs	r2, r1
 80022d6:	615a      	str	r2, [r3, #20]
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL4 | ADC_CHSELR_CHSEL5);      // выбор канала 4, выбор канала 5
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <ADC_init+0xc8>)
 80022da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022dc:	4b24      	ldr	r3, [pc, #144]	; (8002370 <ADC_init+0xc8>)
 80022de:	2130      	movs	r1, #48	; 0x30
 80022e0:	430a      	orrs	r2, r1
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
    //SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL5);    // выбор канала 5
//SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL16);       // выбор канала temperature
//SET_BIT(ADC->CCR, ADC_CCR_TSEN);                 // температурный датчик включить
	SET_BIT(ADC1->CR, ADC_CR_ADCAL);               // Запустим калибровку
 80022e4:	4b22      	ldr	r3, [pc, #136]	; (8002370 <ADC_init+0xc8>)
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <ADC_init+0xc8>)
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	0609      	lsls	r1, r1, #24
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
	while (READ_BIT(ADC1->CR, ADC_CR_ADCAL));      // Дождемся поднятия флага о готовности
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <ADC_init+0xc8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	dbfb      	blt.n	80022f4 <ADC_init+0x4c>
	//SET_BIT(ADC1->IER, ADC_IER_EOCIE);           // включить прерывание
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_CONT);          // постоянный режим преобразования
 80022fc:	4b1c      	ldr	r3, [pc, #112]	; (8002370 <ADC_init+0xc8>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <ADC_init+0xc8>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0189      	lsls	r1, r1, #6
 8002306:	430a      	orrs	r2, r1
 8002308:	60da      	str	r2, [r3, #12]
	//SET_BIT(ADC1->CFGR1, ADC_CFGR1_ALIGN);       // левое правое выравнивание
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);         // ДМА ключить, ДМА в круговом режиме
 800230a:	4b19      	ldr	r3, [pc, #100]	; (8002370 <ADC_init+0xc8>)
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <ADC_init+0xc8>)
 8002310:	2103      	movs	r1, #3
 8002312:	430a      	orrs	r2, r1
 8002314:	60da      	str	r2, [r3, #12]
//SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMACFG);          // ДМА в круговом режиме
	SET_BIT(ADC1->CR, ADC_CR_ADEN);                // Включим АЦП
 8002316:	4b16      	ldr	r3, [pc, #88]	; (8002370 <ADC_init+0xc8>)
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <ADC_init+0xc8>)
 800231c:	2101      	movs	r1, #1
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
	SET_BIT(ADC1->CR, ADC_CR_ADSTART);             // Запустим преобразование
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <ADC_init+0xc8>)
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <ADC_init+0xc8>)
 8002328:	2104      	movs	r1, #4
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
	//NVIC_EnableIRQ(ADC1_IRQn);
	//NVIC_SetPriority(ADC1_IRQn, 3);              // выставим приоритет

	//----------------------- DMA --------------------------//
	SET_BIT(RCC->AHBENR, RCC_AHBENR_DMAEN);                 // включим тактирование ДМА
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <ADC_init+0xc4>)
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <ADC_init+0xc4>)
 8002334:	2101      	movs	r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	615a      	str	r2, [r3, #20]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);            // адрес для переферии для считывания
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <ADC_init+0xcc>)
 800233c:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <ADC_init+0xd0>)
 800233e:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)adc_buf;                // адрес памяти
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <ADC_init+0xcc>)
 8002342:	4a0e      	ldr	r2, [pc, #56]	; (800237c <ADC_init+0xd4>)
 8002344:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 2;                               // размер буффера приема
 8002346:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <ADC_init+0xcc>)
 8002348:	2202      	movs	r2, #2
 800234a:	605a      	str	r2, [r3, #4]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_PL_1 | DMA_CCR_CIRC | DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0 | DMA_CCR_MINC);   // максимальный приоритет
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <ADC_init+0xcc>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <ADC_init+0xcc>)
 8002352:	490b      	ldr	r1, [pc, #44]	; (8002380 <ADC_init+0xd8>)
 8002354:	430a      	orrs	r2, r1
 8002356:	601a      	str	r2, [r3, #0]
//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MSIZE_0);           // Размер памяти 16 бит
//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_PSIZE_0);           // Размер переферии 16 бит
//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MINC);              // инкрементировать память
	//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_TCIE);          // прерывание после передачи, а надо?
	//NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_EN);                // включить дма
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <ADC_init+0xcc>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <ADC_init+0xcc>)
 800235e:	2101      	movs	r1, #1
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	40021000 	.word	0x40021000
 8002370:	40012400 	.word	0x40012400
 8002374:	40020008 	.word	0x40020008
 8002378:	40012440 	.word	0x40012440
 800237c:	2000003c 	.word	0x2000003c
 8002380:	000025a0 	.word	0x000025a0

08002384 <map>:

#include "main.h"

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	69b9      	ldr	r1, [r7, #24]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	1a8a      	subs	r2, r1, r2
 800239e:	435a      	muls	r2, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	0019      	movs	r1, r3
 80023aa:	f7fe ff37 	bl	800121c <__divsi3>
 80023ae:	0003      	movs	r3, r0
 80023b0:	001a      	movs	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	18d3      	adds	r3, r2, r3
}
 80023b6:	0018      	movs	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	b004      	add	sp, #16
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <new_speed>:
		CLEAR_BIT(USART1->CR1, USART_CR1_UE);  // отключим USART
		set_baud(USART2, baud);
		SET_BIT(USART1->CR1, USART_CR1_UE);    // включим USART
}

uint32_t new_speed (uint32_t speed, uint32_t num_motor){     // новая скорость вращения.
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
	if (speed > 1000) return 0;                              // поиграться с этими параметрами
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	23fa      	movs	r3, #250	; 0xfa
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d901      	bls.n	80023d8 <new_speed+0x18>
 80023d4:	2300      	movs	r3, #0
 80023d6:	e020      	b.n	800241a <new_speed+0x5a>
	if (num_motor == 0) {
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <new_speed+0x38>
		TIM17->ARR = map (speed, 0, 1000, 30000, 100);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	4910      	ldr	r1, [pc, #64]	; (8002424 <new_speed+0x64>)
 80023e2:	23fa      	movs	r3, #250	; 0xfa
 80023e4:	009a      	lsls	r2, r3, #2
 80023e6:	2364      	movs	r3, #100	; 0x64
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	000b      	movs	r3, r1
 80023ec:	2100      	movs	r1, #0
 80023ee:	f7ff ffc9 	bl	8002384 <map>
 80023f2:	0002      	movs	r2, r0
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <new_speed+0x68>)
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (num_motor == 1) {
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d10c      	bne.n	8002418 <new_speed+0x58>
		TIM16->ARR = map (speed, 0, 1000, 30000, 100);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4908      	ldr	r1, [pc, #32]	; (8002424 <new_speed+0x64>)
 8002402:	23fa      	movs	r3, #250	; 0xfa
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	2364      	movs	r3, #100	; 0x64
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	000b      	movs	r3, r1
 800240c:	2100      	movs	r1, #0
 800240e:	f7ff ffb9 	bl	8002384 <map>
 8002412:	0002      	movs	r2, r0
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <new_speed+0x6c>)
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return speed;
 8002418:	687b      	ldr	r3, [r7, #4]
}
 800241a:	0018      	movs	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	b002      	add	sp, #8
 8002420:	bd80      	pop	{r7, pc}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	00007530 	.word	0x00007530
 8002428:	40014800 	.word	0x40014800
 800242c:	40014400 	.word	0x40014400

08002430 <init_flash_data>:

void init_flash_data (void) {                                // инициализация параметров из памяти
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
	TIM17->ARR = 10000;                     // скорость
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <init_flash_data+0x34>)
 8002436:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <init_flash_data+0x38>)
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c
	write_to_TMC2300 (1,0x6C, 0x3008001);   //  выберем шаг 32
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <init_flash_data+0x3c>)
 800243c:	001a      	movs	r2, r3
 800243e:	216c      	movs	r1, #108	; 0x6c
 8002440:	2001      	movs	r0, #1
 8002442:	f001 f94d 	bl	80036e0 <write_to_TMC2300>
	Delay_ms(2);
 8002446:	2002      	movs	r0, #2
 8002448:	f000 fa02 	bl	8002850 <Delay_ms>
	write_to_TMC2300 (3,0x6C, 0x3008001);   //  выберем шаг 32
 800244c:	4b07      	ldr	r3, [pc, #28]	; (800246c <init_flash_data+0x3c>)
 800244e:	001a      	movs	r2, r3
 8002450:	216c      	movs	r1, #108	; 0x6c
 8002452:	2003      	movs	r0, #3
 8002454:	f001 f944 	bl	80036e0 <write_to_TMC2300>
	Delay_ms(2);
 8002458:	2002      	movs	r0, #2
 800245a:	f000 f9f9 	bl	8002850 <Delay_ms>

}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40014800 	.word	0x40014800
 8002468:	00002710 	.word	0x00002710
 800246c:	03008001 	.word	0x03008001

08002470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	0002      	movs	r2, r0
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b7f      	cmp	r3, #127	; 0x7f
 8002482:	d809      	bhi.n	8002498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002484:	1dfb      	adds	r3, r7, #7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	001a      	movs	r2, r3
 800248a:	231f      	movs	r3, #31
 800248c:	401a      	ands	r2, r3
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_EnableIRQ+0x30>)
 8002490:	2101      	movs	r1, #1
 8002492:	4091      	lsls	r1, r2
 8002494:	000a      	movs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]
  }
}
 8002498:	46c0      	nop			; (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	e000e100 	.word	0xe000e100

080024a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a4:	b590      	push	{r4, r7, lr}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	0002      	movs	r2, r0
 80024ac:	6039      	str	r1, [r7, #0]
 80024ae:	1dfb      	adds	r3, r7, #7
 80024b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024b2:	1dfb      	adds	r3, r7, #7
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b7f      	cmp	r3, #127	; 0x7f
 80024b8:	d828      	bhi.n	800250c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024ba:	4a2f      	ldr	r2, [pc, #188]	; (8002578 <__NVIC_SetPriority+0xd4>)
 80024bc:	1dfb      	adds	r3, r7, #7
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b25b      	sxtb	r3, r3
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	33c0      	adds	r3, #192	; 0xc0
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	589b      	ldr	r3, [r3, r2]
 80024ca:	1dfa      	adds	r2, r7, #7
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	0011      	movs	r1, r2
 80024d0:	2203      	movs	r2, #3
 80024d2:	400a      	ands	r2, r1
 80024d4:	00d2      	lsls	r2, r2, #3
 80024d6:	21ff      	movs	r1, #255	; 0xff
 80024d8:	4091      	lsls	r1, r2
 80024da:	000a      	movs	r2, r1
 80024dc:	43d2      	mvns	r2, r2
 80024de:	401a      	ands	r2, r3
 80024e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	019b      	lsls	r3, r3, #6
 80024e6:	22ff      	movs	r2, #255	; 0xff
 80024e8:	401a      	ands	r2, r3
 80024ea:	1dfb      	adds	r3, r7, #7
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	0018      	movs	r0, r3
 80024f0:	2303      	movs	r3, #3
 80024f2:	4003      	ands	r3, r0
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024f8:	481f      	ldr	r0, [pc, #124]	; (8002578 <__NVIC_SetPriority+0xd4>)
 80024fa:	1dfb      	adds	r3, r7, #7
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	430a      	orrs	r2, r1
 8002504:	33c0      	adds	r3, #192	; 0xc0
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800250a:	e031      	b.n	8002570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <__NVIC_SetPriority+0xd8>)
 800250e:	1dfb      	adds	r3, r7, #7
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	0019      	movs	r1, r3
 8002514:	230f      	movs	r3, #15
 8002516:	400b      	ands	r3, r1
 8002518:	3b08      	subs	r3, #8
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3306      	adds	r3, #6
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	18d3      	adds	r3, r2, r3
 8002522:	3304      	adds	r3, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	1dfa      	adds	r2, r7, #7
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	0011      	movs	r1, r2
 800252c:	2203      	movs	r2, #3
 800252e:	400a      	ands	r2, r1
 8002530:	00d2      	lsls	r2, r2, #3
 8002532:	21ff      	movs	r1, #255	; 0xff
 8002534:	4091      	lsls	r1, r2
 8002536:	000a      	movs	r2, r1
 8002538:	43d2      	mvns	r2, r2
 800253a:	401a      	ands	r2, r3
 800253c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	019b      	lsls	r3, r3, #6
 8002542:	22ff      	movs	r2, #255	; 0xff
 8002544:	401a      	ands	r2, r3
 8002546:	1dfb      	adds	r3, r7, #7
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	0018      	movs	r0, r3
 800254c:	2303      	movs	r3, #3
 800254e:	4003      	ands	r3, r0
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002554:	4809      	ldr	r0, [pc, #36]	; (800257c <__NVIC_SetPriority+0xd8>)
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	001c      	movs	r4, r3
 800255c:	230f      	movs	r3, #15
 800255e:	4023      	ands	r3, r4
 8002560:	3b08      	subs	r3, #8
 8002562:	089b      	lsrs	r3, r3, #2
 8002564:	430a      	orrs	r2, r1
 8002566:	3306      	adds	r3, #6
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	18c3      	adds	r3, r0, r3
 800256c:	3304      	adds	r3, #4
 800256e:	601a      	str	r2, [r3, #0]
}
 8002570:	46c0      	nop			; (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b003      	add	sp, #12
 8002576:	bd90      	pop	{r4, r7, pc}
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <init_rcc>:
volatile uint32_t Delay_counter_ms = 0; // Счетчик для функции Delay_ms
volatile uint32_t counter_ms = 0;       // Счетчик для функции pid
volatile uint32_t counter_ms1 = 0;      // Счетчик для функции pid
extern struct _flags *point_flags;

void init_rcc(void) {
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_HSEON);                                        // Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <init_rcc+0xc8>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <init_rcc+0xc8>)
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	0249      	lsls	r1, r1, #9
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);                         // Дождемся поднятия флага о готовности
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <init_rcc+0xc8>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	4013      	ands	r3, r2
 800259e:	d0f9      	beq.n	8002594 <init_rcc+0x14>
	SET_BIT(FLASH->ACR, FLASH_ACR_LATENCY);                                // включим тактирование флеша
 80025a0:	4b2a      	ldr	r3, [pc, #168]	; (800264c <init_rcc+0xcc>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <init_rcc+0xcc>)
 80025a6:	2101      	movs	r1, #1
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]
	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE);                                 // включим буфер предварительной выборки ??
 80025ac:	4b27      	ldr	r3, [pc, #156]	; (800264c <init_rcc+0xcc>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b26      	ldr	r3, [pc, #152]	; (800264c <init_rcc+0xcc>)
 80025b2:	2110      	movs	r1, #16
 80025b4:	430a      	orrs	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL, RCC_CFGR_PLLMUL6);              // умножаем на 6 PLLMUL
 80025b8:	4b23      	ldr	r3, [pc, #140]	; (8002648 <init_rcc+0xc8>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a24      	ldr	r2, [pc, #144]	; (8002650 <init_rcc+0xd0>)
 80025be:	401a      	ands	r2, r3
 80025c0:	4b21      	ldr	r3, [pc, #132]	; (8002648 <init_rcc+0xc8>)
 80025c2:	2180      	movs	r1, #128	; 0x80
 80025c4:	0349      	lsls	r1, r1, #13
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_CFGR_PPRE_DIV1);              // APB1 делитель 1
 80025ca:	4b1f      	ldr	r3, [pc, #124]	; (8002648 <init_rcc+0xc8>)
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4b1e      	ldr	r3, [pc, #120]	; (8002648 <init_rcc+0xc8>)
 80025d0:	4920      	ldr	r1, [pc, #128]	; (8002654 <init_rcc+0xd4>)
 80025d2:	400a      	ands	r2, r1
 80025d4:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1);              // AHB делитель 1
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <init_rcc+0xc8>)
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4b1b      	ldr	r3, [pc, #108]	; (8002648 <init_rcc+0xc8>)
 80025dc:	21f0      	movs	r1, #240	; 0xf0
 80025de:	438a      	bics	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC, RCC_CFGR_PLLSRC_HSE_PREDIV);    // HSE как входящий для PLL
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <init_rcc+0xc8>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <init_rcc+0xd8>)
 80025e8:	401a      	ands	r2, r3
 80025ea:	4b17      	ldr	r3, [pc, #92]	; (8002648 <init_rcc+0xc8>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0249      	lsls	r1, r1, #9
 80025f0:	430a      	orrs	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]
	SET_BIT(RCC->CR, RCC_CR_CSSON);                                        // Включим CSS
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <init_rcc+0xc8>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <init_rcc+0xc8>)
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	0309      	lsls	r1, r1, #12
 80025fe:	430a      	orrs	r2, r1
 8002600:	601a      	str	r2, [r3, #0]
	SET_BIT(RCC->CR, RCC_CR_PLLON);                                        // Запустим PLL
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <init_rcc+0xc8>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <init_rcc+0xc8>)
 8002608:	2180      	movs	r1, #128	; 0x80
 800260a:	0449      	lsls	r1, r1, #17
 800260c:	430a      	orrs	r2, r1
 800260e:	601a      	str	r2, [r3, #0]
	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0);                         // Дожидемся поднятия флага включения PLL
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <init_rcc+0xc8>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	049b      	lsls	r3, r3, #18
 800261a:	4013      	ands	r3, r2
 800261c:	d0f9      	beq.n	8002612 <init_rcc+0x92>
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);                   // Выберем PLL в качестве System Clock
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <init_rcc+0xc8>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2203      	movs	r2, #3
 8002624:	4393      	bics	r3, r2
 8002626:	001a      	movs	r2, r3
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <init_rcc+0xc8>)
 800262a:	2102      	movs	r1, #2
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]

	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN); //Включим тактирование порта А, Включим тактирование порта В
 8002630:	4b05      	ldr	r3, [pc, #20]	; (8002648 <init_rcc+0xc8>)
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <init_rcc+0xc8>)
 8002636:	21c0      	movs	r1, #192	; 0xc0
 8002638:	02c9      	lsls	r1, r1, #11
 800263a:	430a      	orrs	r2, r1
 800263c:	615a      	str	r2, [r3, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800263e:	b662      	cpsie	i
}
 8002640:	46c0      	nop			; (mov r8, r8)
	//SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN); //Включим тактирование порта В
	__enable_irq();                                                        // важно!
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	40021000 	.word	0x40021000
 800264c:	40022000 	.word	0x40022000
 8002650:	ffc3ffff 	.word	0xffc3ffff
 8002654:	fffff8ff 	.word	0xfffff8ff
 8002658:	fffe7fff 	.word	0xfffe7fff

0800265c <init_wdt>:

void init_wdt(void) {
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
	WRITE_REG(IWDG->RLR, 0xFFF);              // запишем время до сброса
	WRITE_REG(IWDG->KR, 0xCCCC);              // запустим ватч дог
	while (IWDG->SR);                         // дождемся установки
	WRITE_REG(IWDG->KR, 0xAAAA);              // сброс ватч дога
#endif
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <iwdt_reset>:

void iwdt_reset(void) {
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
	WRITE_REG(IWDG->KR, 0xAAAA);              // сброс ватч дога
 800266c:	4b02      	ldr	r3, [pc, #8]	; (8002678 <iwdt_reset+0x10>)
 800266e:	4a03      	ldr	r2, [pc, #12]	; (800267c <iwdt_reset+0x14>)
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40003000 	.word	0x40003000
 800267c:	0000aaaa 	.word	0x0000aaaa

08002680 <CMSIS_SysTick_Timer_init>:

void CMSIS_SysTick_Timer_init(void) {
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
	/* п. 4.5.1 SysTick control and status register (STK_CTRL) (стр. 151)*/
	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 800268a:	2101      	movs	r1, #1
 800268c:	438a      	bics	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 8002696:	2102      	movs	r1, #2
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 48MHz
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026a2:	2104      	movs	r1, #4
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk,
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0e1b      	lsrs	r3, r3, #24
 80026ae:	061a      	lsls	r2, r3, #24
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026b2:	490b      	ldr	r1, [pc, #44]	; (80026e0 <CMSIS_SysTick_Timer_init+0x60>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	605a      	str	r2, [r3, #4]
			47999 << SysTick_LOAD_RELOAD_Pos); //Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk,
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	0e1b      	lsrs	r3, r3, #24
 80026be:	061a      	lsls	r2, r3, #24
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026c2:	4907      	ldr	r1, [pc, #28]	; (80026e0 <CMSIS_SysTick_Timer_init+0x60>)
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
			47999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 47999
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 80026c8:	4b04      	ldr	r3, [pc, #16]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <CMSIS_SysTick_Timer_init+0x5c>)
 80026ce:	2101      	movs	r1, #1
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
}
 80026d4:	46c0      	nop			; (mov r8, r8)
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	e000e010 	.word	0xe000e010
 80026e0:	0000bb7f 	.word	0x0000bb7f

080026e4 <SysTick_Handler>:

void SysTick_Handler(void) {
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <SysTick_Handler+0x150>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	4b51      	ldr	r3, [pc, #324]	; (8002834 <SysTick_Handler+0x150>)
 80026f0:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms) {
 80026f2:	4b51      	ldr	r3, [pc, #324]	; (8002838 <SysTick_Handler+0x154>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <SysTick_Handler+0x20>
		Delay_counter_ms--;
 80026fa:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <SysTick_Handler+0x154>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	1e5a      	subs	r2, r3, #1
 8002700:	4b4d      	ldr	r3, [pc, #308]	; (8002838 <SysTick_Handler+0x154>)
 8002702:	601a      	str	r2, [r3, #0]
	}

	if (counter_ms < 20)
 8002704:	4b4d      	ldr	r3, [pc, #308]	; (800283c <SysTick_Handler+0x158>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b13      	cmp	r3, #19
 800270a:	d805      	bhi.n	8002718 <SysTick_Handler+0x34>
		counter_ms++;
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <SysTick_Handler+0x158>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <SysTick_Handler+0x158>)
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e008      	b.n	800272a <SysTick_Handler+0x46>
	else {
		point_flags->pid_ok = TRUE;
 8002718:	4b49      	ldr	r3, [pc, #292]	; (8002840 <SysTick_Handler+0x15c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	789a      	ldrb	r2, [r3, #2]
 800271e:	2110      	movs	r1, #16
 8002720:	430a      	orrs	r2, r1
 8002722:	709a      	strb	r2, [r3, #2]
		counter_ms = 0;
 8002724:	4b45      	ldr	r3, [pc, #276]	; (800283c <SysTick_Handler+0x158>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
	}

	if (point_flags->iwdt_res) {
 800272a:	4b45      	ldr	r3, [pc, #276]	; (8002840 <SysTick_Handler+0x15c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	789b      	ldrb	r3, [r3, #2]
 8002730:	2208      	movs	r2, #8
 8002732:	4013      	ands	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d002      	beq.n	8002740 <SysTick_Handler+0x5c>
		WRITE_REG(IWDG->KR, 0xAAAA);        // сброс ватч дога
 800273a:	4b42      	ldr	r3, [pc, #264]	; (8002844 <SysTick_Handler+0x160>)
 800273c:	4a42      	ldr	r2, [pc, #264]	; (8002848 <SysTick_Handler+0x164>)
 800273e:	601a      	str	r2, [r3, #0]
	}

	if (point_flags->delay > 0) { // тут бы в дальнейшем переделать на другой таймер
 8002740:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <SysTick_Handler+0x15c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	23f0      	movs	r3, #240	; 0xf0
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	4013      	ands	r3, r2
 800274c:	d06f      	beq.n	800282e <SysTick_Handler+0x14a>
		if (point_flags->delay == 5) {
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <SysTick_Handler+0x15c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	23f0      	movs	r3, #240	; 0xf0
 8002756:	025b      	lsls	r3, r3, #9
 8002758:	401a      	ands	r2, r3
 800275a:	23a0      	movs	r3, #160	; 0xa0
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	429a      	cmp	r2, r3
 8002760:	d108      	bne.n	8002774 <SysTick_Handler+0x90>
			STEP3_OFF;
 8002762:	2390      	movs	r3, #144	; 0x90
 8002764:	05db      	lsls	r3, r3, #23
 8002766:	699a      	ldr	r2, [r3, #24]
 8002768:	2390      	movs	r3, #144	; 0x90
 800276a:	05db      	lsls	r3, r3, #23
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	0409      	lsls	r1, r1, #16
 8002770:	430a      	orrs	r2, r1
 8002772:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 4) {
 8002774:	4b32      	ldr	r3, [pc, #200]	; (8002840 <SysTick_Handler+0x15c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	23f0      	movs	r3, #240	; 0xf0
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	401a      	ands	r2, r3
 8002780:	2380      	movs	r3, #128	; 0x80
 8002782:	021b      	lsls	r3, r3, #8
 8002784:	429a      	cmp	r2, r3
 8002786:	d107      	bne.n	8002798 <SysTick_Handler+0xb4>
			STEP3_ON;
 8002788:	2390      	movs	r3, #144	; 0x90
 800278a:	05db      	lsls	r3, r3, #23
 800278c:	699a      	ldr	r2, [r3, #24]
 800278e:	2390      	movs	r3, #144	; 0x90
 8002790:	05db      	lsls	r3, r3, #23
 8002792:	2180      	movs	r1, #128	; 0x80
 8002794:	430a      	orrs	r2, r1
 8002796:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 3) { // 5 вкл 3 раза, 3 вкл 2 раза, 1 вкл 1 раз
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <SysTick_Handler+0x15c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	23f0      	movs	r3, #240	; 0xf0
 80027a0:	025b      	lsls	r3, r3, #9
 80027a2:	401a      	ands	r2, r3
 80027a4:	23c0      	movs	r3, #192	; 0xc0
 80027a6:	01db      	lsls	r3, r3, #7
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d108      	bne.n	80027be <SysTick_Handler+0xda>
			STEP3_OFF;
 80027ac:	2390      	movs	r3, #144	; 0x90
 80027ae:	05db      	lsls	r3, r3, #23
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	2390      	movs	r3, #144	; 0x90
 80027b4:	05db      	lsls	r3, r3, #23
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	0409      	lsls	r1, r1, #16
 80027ba:	430a      	orrs	r2, r1
 80027bc:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 2) {
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <SysTick_Handler+0x15c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	23f0      	movs	r3, #240	; 0xf0
 80027c6:	025b      	lsls	r3, r3, #9
 80027c8:	401a      	ands	r2, r3
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	01db      	lsls	r3, r3, #7
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d107      	bne.n	80027e2 <SysTick_Handler+0xfe>
			STEP3_ON;
 80027d2:	2390      	movs	r3, #144	; 0x90
 80027d4:	05db      	lsls	r3, r3, #23
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	2390      	movs	r3, #144	; 0x90
 80027da:	05db      	lsls	r3, r3, #23
 80027dc:	2180      	movs	r1, #128	; 0x80
 80027de:	430a      	orrs	r2, r1
 80027e0:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 1) {
 80027e2:	4b17      	ldr	r3, [pc, #92]	; (8002840 <SysTick_Handler+0x15c>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	23f0      	movs	r3, #240	; 0xf0
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	401a      	ands	r2, r3
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	019b      	lsls	r3, r3, #6
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d108      	bne.n	8002808 <SysTick_Handler+0x124>
			STEP3_OFF;
 80027f6:	2390      	movs	r3, #144	; 0x90
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	2390      	movs	r3, #144	; 0x90
 80027fe:	05db      	lsls	r3, r3, #23
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0409      	lsls	r1, r1, #16
 8002804:	430a      	orrs	r2, r1
 8002806:	619a      	str	r2, [r3, #24]
		}
		point_flags->delay--;
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <SysTick_Handler+0x15c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	03d2      	lsls	r2, r2, #15
 8002810:	0f12      	lsrs	r2, r2, #28
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	320f      	adds	r2, #15
 8002816:	1c11      	adds	r1, r2, #0
 8002818:	220f      	movs	r2, #15
 800281a:	400a      	ands	r2, r1
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	210f      	movs	r1, #15
 8002820:	400a      	ands	r2, r1
 8002822:	0352      	lsls	r2, r2, #13
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	4809      	ldr	r0, [pc, #36]	; (800284c <SysTick_Handler+0x168>)
 8002828:	4001      	ands	r1, r0
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
	}
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000040 	.word	0x20000040
 8002838:	20000044 	.word	0x20000044
 800283c:	20000048 	.word	0x20000048
 8002840:	20000000 	.word	0x20000000
 8002844:	40003000 	.word	0x40003000
 8002848:	0000aaaa 	.word	0x0000aaaa
 800284c:	fffe1fff 	.word	0xfffe1fff

08002850 <Delay_ms>:

void Delay_ms(uint32_t Milliseconds) {
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <Delay_ms+0x24>)
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0);
 800285e:	46c0      	nop			; (mov r8, r8)
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <Delay_ms+0x24>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1fb      	bne.n	8002860 <Delay_ms+0x10>
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	46bd      	mov	sp, r7
 800286e:	b002      	add	sp, #8
 8002870:	bd80      	pop	{r7, pc}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	20000044 	.word	0x20000044

08002878 <init_tim3>:

void init_tim3(void) {
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);             // включим тактирование
 800287c:	4b21      	ldr	r3, [pc, #132]	; (8002904 <init_tim3+0x8c>)
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	4b20      	ldr	r3, [pc, #128]	; (8002904 <init_tim3+0x8c>)
 8002882:	2102      	movs	r1, #2
 8002884:	430a      	orrs	r2, r1
 8002886:	61da      	str	r2, [r3, #28]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER6_1);            // альтернативная функция
 8002888:	2390      	movs	r3, #144	; 0x90
 800288a:	05db      	lsls	r3, r3, #23
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	2390      	movs	r3, #144	; 0x90
 8002890:	05db      	lsls	r3, r3, #23
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	0189      	lsls	r1, r1, #6
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->AFR[0], 1 << GPIO_AFRL_AFRL6_Pos);      // TIM3
 800289a:	2390      	movs	r3, #144	; 0x90
 800289c:	05db      	lsls	r3, r3, #23
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	2390      	movs	r3, #144	; 0x90
 80028a2:	05db      	lsls	r3, r3, #23
 80028a4:	2180      	movs	r1, #128	; 0x80
 80028a6:	0449      	lsls	r1, r1, #17
 80028a8:	430a      	orrs	r2, r1
 80028aa:	621a      	str	r2, [r3, #32]
	TIM3->PSC = 0;
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <init_tim3+0x90>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 600;
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <init_tim3+0x90>)
 80028b4:	2296      	movs	r2, #150	; 0x96
 80028b6:	0092      	lsls	r2, r2, #2
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 200;
 80028ba:	4b13      	ldr	r3, [pc, #76]	; (8002908 <init_tim3+0x90>)
 80028bc:	22c8      	movs	r2, #200	; 0xc8
 80028be:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(TIM3->CR1, TIM_CR1_ARPE);                      // включить автоматическую перезагрузку
 80028c0:	4b11      	ldr	r3, [pc, #68]	; (8002908 <init_tim3+0x90>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <init_tim3+0x90>)
 80028c6:	2180      	movs	r1, #128	; 0x80
 80028c8:	430a      	orrs	r2, r1
 80028ca:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM3->CCMR1, TIM_CCMR1_OC1PE);                 // загрузка значений в регистр сравнения немедленно
 80028cc:	4b0e      	ldr	r3, [pc, #56]	; (8002908 <init_tim3+0x90>)
 80028ce:	699a      	ldr	r2, [r3, #24]
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <init_tim3+0x90>)
 80028d2:	2108      	movs	r1, #8
 80028d4:	430a      	orrs	r2, r1
 80028d6:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM3->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos);     // шим режим 1 (счет вперед)
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <init_tim3+0x90>)
 80028da:	699a      	ldr	r2, [r3, #24]
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <init_tim3+0x90>)
 80028de:	2160      	movs	r1, #96	; 0x60
 80028e0:	430a      	orrs	r2, r1
 80028e2:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM3->CCER, TIM_CCER_CC1E);                    // Сравнение 1 выхода включен.
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <init_tim3+0x90>)
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	4b07      	ldr	r3, [pc, #28]	; (8002908 <init_tim3+0x90>)
 80028ea:	2101      	movs	r1, #1
 80028ec:	430a      	orrs	r2, r1
 80028ee:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);                       // включить таймер
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <init_tim3+0x90>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <init_tim3+0x90>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	40021000 	.word	0x40021000
 8002908:	40000400 	.word	0x40000400

0800290c <init_tim17>:

void init_tim17(uint16_t prescaler, uint16_t reload) {
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	0002      	movs	r2, r0
 8002914:	1dbb      	adds	r3, r7, #6
 8002916:	801a      	strh	r2, [r3, #0]
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	1c0a      	adds	r2, r1, #0
 800291c:	801a      	strh	r2, [r3, #0]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM17EN);   // включим тактирование
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <init_tim17+0x6c>)
 8002920:	699a      	ldr	r2, [r3, #24]
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <init_tim17+0x6c>)
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	02c9      	lsls	r1, r1, #11
 8002928:	430a      	orrs	r2, r1
 800292a:	619a      	str	r2, [r3, #24]
	TIM17->PSC = prescaler - 1;
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	4b12      	ldr	r3, [pc, #72]	; (800297c <init_tim17+0x70>)
 8002934:	629a      	str	r2, [r3, #40]	; 0x28
	TIM17->ARR = reload;
 8002936:	4b11      	ldr	r3, [pc, #68]	; (800297c <init_tim17+0x70>)
 8002938:	1d3a      	adds	r2, r7, #4
 800293a:	8812      	ldrh	r2, [r2, #0]
 800293c:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM17->CR1, TIM_CR1_ARPE);       // включить автоматическую перезагрузку
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <init_tim17+0x70>)
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b0e      	ldr	r3, [pc, #56]	; (800297c <init_tim17+0x70>)
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	430a      	orrs	r2, r1
 8002948:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM17->CR1, TIM_CR1_CEN);        // включить таймер
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <init_tim17+0x70>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b0b      	ldr	r3, [pc, #44]	; (800297c <init_tim17+0x70>)
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);      // включим прерывание по обновлению
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <init_tim17+0x70>)
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <init_tim17+0x70>)
 800295c:	2101      	movs	r1, #1
 800295e:	430a      	orrs	r2, r1
 8002960:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(TIM17_IRQn);
 8002962:	2016      	movs	r0, #22
 8002964:	f7ff fd84 	bl	8002470 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM17_IRQn, 2);         // выставим приоритет
 8002968:	2102      	movs	r1, #2
 800296a:	2016      	movs	r0, #22
 800296c:	f7ff fd9a 	bl	80024a4 <__NVIC_SetPriority>
}
 8002970:	46c0      	nop			; (mov r8, r8)
 8002972:	46bd      	mov	sp, r7
 8002974:	b002      	add	sp, #8
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	40014800 	.word	0x40014800

08002980 <init_tim16>:

void init_tim16(uint16_t prescaler, uint16_t reload) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	0002      	movs	r2, r0
 8002988:	1dbb      	adds	r3, r7, #6
 800298a:	801a      	strh	r2, [r3, #0]
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	1c0a      	adds	r2, r1, #0
 8002990:	801a      	strh	r2, [r3, #0]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM16EN);   // включим тактирование
 8002992:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <init_tim16+0x60>)
 8002994:	699a      	ldr	r2, [r3, #24]
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <init_tim16+0x60>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0289      	lsls	r1, r1, #10
 800299c:	430a      	orrs	r2, r1
 800299e:	619a      	str	r2, [r3, #24]
	TIM16->PSC = prescaler - 1;
 80029a0:	1dbb      	adds	r3, r7, #6
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	1e5a      	subs	r2, r3, #1
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <init_tim16+0x64>)
 80029a8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = reload;
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <init_tim16+0x64>)
 80029ac:	1d3a      	adds	r2, r7, #4
 80029ae:	8812      	ldrh	r2, [r2, #0]
 80029b0:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM16->CR1, TIM_CR1_ARPE);            // включить автоматическую перезагрузку
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <init_tim16+0x64>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <init_tim16+0x64>)
 80029b8:	2180      	movs	r1, #128	; 0x80
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM16->CR1, TIM_CR1_CEN);             // включить таймер
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <init_tim16+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <init_tim16+0x64>)
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
	//SET_BIT(TIM16->DIER, TIM_DIER_UIE);         // включим прерывание по обновлению

	NVIC_EnableIRQ(TIM16_IRQn);
 80029ca:	2015      	movs	r0, #21
 80029cc:	f7ff fd50 	bl	8002470 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM16_IRQn, 2);              // выставим приоритет
 80029d0:	2102      	movs	r1, #2
 80029d2:	2015      	movs	r0, #21
 80029d4:	f7ff fd66 	bl	80024a4 <__NVIC_SetPriority>
}
 80029d8:	46c0      	nop			; (mov r8, r8)
 80029da:	46bd      	mov	sp, r7
 80029dc:	b002      	add	sp, #8
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40014400 	.word	0x40014400

080029e8 <init_pins>:

void init_pins(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER7_0);  // на выход А0,А1,А7
 80029ec:	2390      	movs	r3, #144	; 0x90
 80029ee:	05db      	lsls	r3, r3, #23
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	2390      	movs	r3, #144	; 0x90
 80029f4:	05db      	lsls	r3, r3, #23
 80029f6:	4914      	ldr	r1, [pc, #80]	; (8002a48 <init_pins+0x60>)
 80029f8:	430a      	orrs	r2, r1
 80029fa:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR0 | GPIO_OSPEEDR_OSPEEDR1| GPIO_OSPEEDR_OSPEEDR7);     // максимальная скорость
 80029fc:	2390      	movs	r3, #144	; 0x90
 80029fe:	05db      	lsls	r3, r3, #23
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	2390      	movs	r3, #144	; 0x90
 8002a04:	05db      	lsls	r3, r3, #23
 8002a06:	4911      	ldr	r1, [pc, #68]	; (8002a4c <init_pins+0x64>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER1_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);  // на выход В1, В3, В4, В5
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <init_pins+0x68>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <init_pins+0x68>)
 8002a12:	4910      	ldr	r1, [pc, #64]	; (8002a54 <init_pins+0x6c>)
 8002a14:	430a      	orrs	r2, r1
 8002a16:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR1 | GPIO_OSPEEDR_OSPEEDR3 | GPIO_OSPEEDR_OSPEEDR4 | GPIO_OSPEEDR_OSPEEDR5);     // максимальная скорость
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <init_pins+0x68>)
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <init_pins+0x68>)
 8002a1e:	490e      	ldr	r1, [pc, #56]	; (8002a58 <init_pins+0x70>)
 8002a20:	430a      	orrs	r2, r1
 8002a22:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6); // на вход В6
 8002a24:	4b0a      	ldr	r3, [pc, #40]	; (8002a50 <init_pins+0x68>)
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <init_pins+0x68>)
 8002a2a:	21c0      	movs	r1, #192	; 0xc0
 8002a2c:	0189      	lsls	r1, r1, #6
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR7); // на вход В7
 8002a32:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <init_pins+0x68>)
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <init_pins+0x68>)
 8002a38:	21c0      	movs	r1, #192	; 0xc0
 8002a3a:	0209      	lsls	r1, r1, #8
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]

}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	00004005 	.word	0x00004005
 8002a4c:	0000c00f 	.word	0x0000c00f
 8002a50:	48000400 	.word	0x48000400
 8002a54:	00000544 	.word	0x00000544
 8002a58:	00000fcc 	.word	0x00000fcc

08002a5c <new_data_flag>:
struct stepp stepp_2;

struct _flags flags;
struct _flags *point_flags = &flags;

void new_data_flag (uint32_t flag) {                           // проверяем если биты совпадают то ничего не делаем
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
	if (point_flags->ir_filter == 0 && (flag & 0x01)){         // а если не совпадают то переставляем бит и делаем операцию
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <new_data_flag+0x9c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	227f      	movs	r2, #127	; 0x7f
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11a      	bne.n	8002aaa <new_data_flag+0x4e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d016      	beq.n	8002aaa <new_data_flag+0x4e>
		point_flags->ir_filter = 1;
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	; (8002af8 <new_data_flag+0x9c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	4249      	negs	r1, r1
 8002a86:	430a      	orrs	r2, r1
 8002a88:	701a      	strb	r2, [r3, #0]
		STEP3_ON;
 8002a8a:	2390      	movs	r3, #144	; 0x90
 8002a8c:	05db      	lsls	r3, r3, #23
 8002a8e:	699a      	ldr	r2, [r3, #24]
 8002a90:	2390      	movs	r3, #144	; 0x90
 8002a92:	05db      	lsls	r3, r3, #23
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	430a      	orrs	r2, r1
 8002a98:	619a      	str	r2, [r3, #24]
		flags.delay = 4;
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <new_data_flag+0xa0>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4918      	ldr	r1, [pc, #96]	; (8002b00 <new_data_flag+0xa4>)
 8002aa0:	400a      	ands	r2, r1
 8002aa2:	2180      	movs	r1, #128	; 0x80
 8002aa4:	0209      	lsls	r1, r1, #8
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
	}
	if (point_flags->ir_filter == 1 && !(flag & 0x01)) {
 8002aaa:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <new_data_flag+0x9c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	227f      	movs	r2, #127	; 0x7f
 8002ab2:	4393      	bics	r3, r2
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d019      	beq.n	8002aee <new_data_flag+0x92>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	d115      	bne.n	8002aee <new_data_flag+0x92>
		point_flags->ir_filter = 0;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <new_data_flag+0x9c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	217f      	movs	r1, #127	; 0x7f
 8002aca:	400a      	ands	r2, r1
 8002acc:	701a      	strb	r2, [r3, #0]
		STEP3_ON;
 8002ace:	2390      	movs	r3, #144	; 0x90
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	2390      	movs	r3, #144	; 0x90
 8002ad6:	05db      	lsls	r3, r3, #23
 8002ad8:	2180      	movs	r1, #128	; 0x80
 8002ada:	430a      	orrs	r2, r1
 8002adc:	619a      	str	r2, [r3, #24]
		flags.delay = 4;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <new_data_flag+0xa0>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4907      	ldr	r1, [pc, #28]	; (8002b00 <new_data_flag+0xa4>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	2180      	movs	r1, #128	; 0x80
 8002ae8:	0209      	lsls	r1, r1, #8
 8002aea:	430a      	orrs	r2, r1
 8002aec:	601a      	str	r2, [r3, #0]
	}
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	20000000 	.word	0x20000000
 8002afc:	2000006c 	.word	0x2000006c
 8002b00:	fffe1fff 	.word	0xfffe1fff

08002b04 <stop_motor>:

void stop_motor (void){
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
	stepp_1.curent_steps = stepp_1.last_steps;
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <stop_motor+0x1c>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <stop_motor+0x1c>)
 8002b0e:	605a      	str	r2, [r3, #4]
	stepp_2.curent_steps = stepp_2.last_steps;
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <stop_motor+0x20>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <stop_motor+0x20>)
 8002b16:	605a      	str	r2, [r3, #4]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	46c0      	nop			; (mov r8, r8)
 8002b20:	2000004c 	.word	0x2000004c
 8002b24:	2000005c 	.word	0x2000005c

08002b28 <poz_motor>:

uint32_t poz_motor (uint8_t num_motor){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0002      	movs	r2, r0
 8002b30:	1dfb      	adds	r3, r7, #7
 8002b32:	701a      	strb	r2, [r3, #0]
	if (num_motor == 1) {
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d102      	bne.n	8002b42 <poz_motor+0x1a>
		return stepp_1.last_steps ;  // для совместимости с входящими данными
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <poz_motor+0x34>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	e007      	b.n	8002b52 <poz_motor+0x2a>
	}
	if (num_motor == 2) {
 8002b42:	1dfb      	adds	r3, r7, #7
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d102      	bne.n	8002b50 <poz_motor+0x28>
		return stepp_2.last_steps ;
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <poz_motor+0x38>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	e000      	b.n	8002b52 <poz_motor+0x2a>
	}
	return 0;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	2000004c 	.word	0x2000004c
 8002b60:	2000005c 	.word	0x2000005c

08002b64 <search_zero>:

static inline void search_zero(void) {              // поиск нуля
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	if (!flags.start_zero) {                        // если мы первый раз заходим в прерывание
 8002b68:	4b5b      	ldr	r3, [pc, #364]	; (8002cd8 <search_zero+0x174>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2204      	movs	r2, #4
 8002b6e:	4013      	ands	r3, r2
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d112      	bne.n	8002b9c <search_zero+0x38>
		flags.start_zero = TRUE;                    // сбросим флаг первого раза
 8002b76:	4b58      	ldr	r3, [pc, #352]	; (8002cd8 <search_zero+0x174>)
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	2104      	movs	r1, #4
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	701a      	strb	r2, [r3, #0]
		DIR1_OFF;                                    // установим дир в нужное положение, чтоб шагать к концевику
 8002b80:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <search_zero+0x178>)
 8002b82:	699a      	ldr	r2, [r3, #24]
 8002b84:	4b55      	ldr	r3, [pc, #340]	; (8002cdc <search_zero+0x178>)
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	0389      	lsls	r1, r1, #14
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	619a      	str	r2, [r3, #24]
		DIR2_ON;                                    // сюда заходим один раз чтоб сначала установить дир, а потом шагать
 8002b8e:	4b53      	ldr	r3, [pc, #332]	; (8002cdc <search_zero+0x178>)
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	4b52      	ldr	r3, [pc, #328]	; (8002cdc <search_zero+0x178>)
 8002b94:	2110      	movs	r1, #16
 8002b96:	430a      	orrs	r2, r1
 8002b98:	619a      	str	r2, [r3, #24]
 8002b9a:	e06f      	b.n	8002c7c <search_zero+0x118>
	} else {                                        // если уже не первый раз заходим
		if (!READ_LIM1 && !flags.zero_pos1) {        // считаем состояние концевика, если не ноль, шагаем
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <search_zero+0x178>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d124      	bne.n	8002bf0 <search_zero+0x8c>
 8002ba6:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <search_zero+0x174>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2201      	movs	r2, #1
 8002bac:	4013      	ands	r3, r2
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11d      	bne.n	8002bf0 <search_zero+0x8c>
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002bb4:	2390      	movs	r3, #144	; 0x90
 8002bb6:	05db      	lsls	r3, r3, #23
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <search_zero+0x70>
				STEP1_OFF;                          // если 1 то выставим 0
 8002bc0:	2390      	movs	r3, #144	; 0x90
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	699a      	ldr	r2, [r3, #24]
 8002bc6:	2390      	movs	r3, #144	; 0x90
 8002bc8:	05db      	lsls	r3, r3, #23
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	0249      	lsls	r1, r1, #9
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002bd2:	e01b      	b.n	8002c0c <search_zero+0xa8>
			else {
				STEP1_ON;                           // если же там 0 то установим 1 на выходе
 8002bd4:	2390      	movs	r3, #144	; 0x90
 8002bd6:	05db      	lsls	r3, r3, #23
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	2390      	movs	r3, #144	; 0x90
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	2101      	movs	r1, #1
 8002be0:	430a      	orrs	r2, r1
 8002be2:	619a      	str	r2, [r3, #24]
				stepp_1.step_down --;               // считаем переменную количества шагов от конца --;
 8002be4:	4b3e      	ldr	r3, [pc, #248]	; (8002ce0 <search_zero+0x17c>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	1e5a      	subs	r2, r3, #1
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <search_zero+0x17c>)
 8002bec:	60da      	str	r2, [r3, #12]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002bee:	e00d      	b.n	8002c0c <search_zero+0xa8>
			}
		} else {
			flags.zero_pos1 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002bf0:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <search_zero+0x174>)
 8002bf2:	781a      	ldrb	r2, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
			STEP1_OFF;                              // и сбрасываем степ в 0
 8002bfa:	2390      	movs	r3, #144	; 0x90
 8002bfc:	05db      	lsls	r3, r3, #23
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	2390      	movs	r3, #144	; 0x90
 8002c02:	05db      	lsls	r3, r3, #23
 8002c04:	2180      	movs	r1, #128	; 0x80
 8002c06:	0249      	lsls	r1, r1, #9
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	619a      	str	r2, [r3, #24]
		}
		if (READ_LIM2 && !flags.zero_pos2) {        // считаем состояние концевика, если не ноль, шагаем
 8002c0c:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <search_zero+0x178>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	d024      	beq.n	8002c60 <search_zero+0xfc>
 8002c16:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <search_zero+0x174>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d11d      	bne.n	8002c60 <search_zero+0xfc>
			if (GPIOA->IDR & GPIO_IDR_1)
 8002c24:	2390      	movs	r3, #144	; 0x90
 8002c26:	05db      	lsls	r3, r3, #23
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	d009      	beq.n	8002c44 <search_zero+0xe0>
				STEP2_OFF;                          // считаем что у нас сейчас в регистре выхода, если 1 то выставим 0
 8002c30:	2390      	movs	r3, #144	; 0x90
 8002c32:	05db      	lsls	r3, r3, #23
 8002c34:	699a      	ldr	r2, [r3, #24]
 8002c36:	2390      	movs	r3, #144	; 0x90
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	2180      	movs	r1, #128	; 0x80
 8002c3c:	0289      	lsls	r1, r1, #10
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002c42:	e01b      	b.n	8002c7c <search_zero+0x118>
			else {
				STEP2_ON;                           // если же там 0 то установим 1 на выходе
 8002c44:	2390      	movs	r3, #144	; 0x90
 8002c46:	05db      	lsls	r3, r3, #23
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	2390      	movs	r3, #144	; 0x90
 8002c4c:	05db      	lsls	r3, r3, #23
 8002c4e:	2102      	movs	r1, #2
 8002c50:	430a      	orrs	r2, r1
 8002c52:	619a      	str	r2, [r3, #24]
				stepp_2.step_down --;
 8002c54:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <search_zero+0x180>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <search_zero+0x180>)
 8002c5c:	60da      	str	r2, [r3, #12]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002c5e:	e00d      	b.n	8002c7c <search_zero+0x118>
			}
		} else {
			flags.zero_pos2 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <search_zero+0x174>)
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	2102      	movs	r1, #2
 8002c66:	430a      	orrs	r2, r1
 8002c68:	701a      	strb	r2, [r3, #0]
			STEP2_OFF;
 8002c6a:	2390      	movs	r3, #144	; 0x90
 8002c6c:	05db      	lsls	r3, r3, #23
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	2390      	movs	r3, #144	; 0x90
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	0289      	lsls	r1, r1, #10
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	619a      	str	r2, [r3, #24]
		}
	}

	if (flags.zero_pos1 && flags.zero_pos2) {            // если сработало два флага значит мы в нулях
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <search_zero+0x174>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2201      	movs	r2, #1
 8002c82:	4013      	ands	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d022      	beq.n	8002cd0 <search_zero+0x16c>
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <search_zero+0x174>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01b      	beq.n	8002cd0 <search_zero+0x16c>
		flags.zero_ok = TRUE;                            // установим флаг
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <search_zero+0x174>)
 8002c9a:	781a      	ldrb	r2, [r3, #0]
 8002c9c:	2118      	movs	r1, #24
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	1c11      	adds	r1, r2, #0
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	701a      	strb	r2, [r3, #0]
		stepp_1.last_steps = 0;//stepp_1.step_down << 5;     // приравняем в текущие шаги то сколько отшагали от конца
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <search_zero+0x17c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
		stepp_2.last_steps = 0;//stepp_2.step_down << 5;
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <search_zero+0x180>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]
		stepp_1.curent_steps = stepp_1.last_steps;
 8002cb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <search_zero+0x17c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <search_zero+0x17c>)
 8002cba:	605a      	str	r2, [r3, #4]
		stepp_2.curent_steps = stepp_2.last_steps;
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <search_zero+0x180>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <search_zero+0x180>)
 8002cc2:	605a      	str	r2, [r3, #4]
		//flags.zero_in_programm = FALSE;             // сбросить флаг обнуления в программе
		//flags.reset_setting = TRUE;                 // установить флаг что нужно перенастроить шаги, скорость
		CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);         // выключим прерывание по обновлению
 8002cc4:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <search_zero+0x184>)
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <search_zero+0x184>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	438a      	bics	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]
	}
}
 8002cd0:	46c0      	nop			; (mov r8, r8)
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	2000006c 	.word	0x2000006c
 8002cdc:	48000400 	.word	0x48000400
 8002ce0:	2000004c 	.word	0x2000004c
 8002ce4:	2000005c 	.word	0x2000005c
 8002ce8:	40014800 	.word	0x40014800

08002cec <revers_zero>:

static inline void revers_zero (void){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
	if (!flags.start_zero) {                        // если мы первый раз заходим в прерывание
 8002cf0:	4b54      	ldr	r3, [pc, #336]	; (8002e44 <revers_zero+0x158>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d112      	bne.n	8002d24 <revers_zero+0x38>
		flags.start_zero = TRUE;                    // сбросим флаг первого раза
 8002cfe:	4b51      	ldr	r3, [pc, #324]	; (8002e44 <revers_zero+0x158>)
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	2104      	movs	r1, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	701a      	strb	r2, [r3, #0]
		DIR1_ON;                                   // установим дир в нужное положение, чтоб шагать к концевику
 8002d08:	4b4f      	ldr	r3, [pc, #316]	; (8002e48 <revers_zero+0x15c>)
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <revers_zero+0x15c>)
 8002d0e:	2120      	movs	r1, #32
 8002d10:	430a      	orrs	r2, r1
 8002d12:	619a      	str	r2, [r3, #24]
		DIR2_OFF;                                    // сюда заходим один раз чтоб сначала установить дир, а потом шагать
 8002d14:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <revers_zero+0x15c>)
 8002d16:	699a      	ldr	r2, [r3, #24]
 8002d18:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <revers_zero+0x15c>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0349      	lsls	r1, r1, #13
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	619a      	str	r2, [r3, #24]
 8002d22:	e06f      	b.n	8002e04 <revers_zero+0x118>
	} else {                                        // если уже не первый раз заходим
		if (READ_LIM1 && !flags.zero_pos1) {       // считаем состояние концевика, если ноль, шагаем
 8002d24:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <revers_zero+0x15c>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d024      	beq.n	8002d78 <revers_zero+0x8c>
 8002d2e:	4b45      	ldr	r3, [pc, #276]	; (8002e44 <revers_zero+0x158>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4013      	ands	r3, r2
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11d      	bne.n	8002d78 <revers_zero+0x8c>
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002d3c:	2390      	movs	r3, #144	; 0x90
 8002d3e:	05db      	lsls	r3, r3, #23
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d009      	beq.n	8002d5c <revers_zero+0x70>
				STEP1_OFF;                          // если 1 то выставим 0
 8002d48:	2390      	movs	r3, #144	; 0x90
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	2390      	movs	r3, #144	; 0x90
 8002d50:	05db      	lsls	r3, r3, #23
 8002d52:	2180      	movs	r1, #128	; 0x80
 8002d54:	0249      	lsls	r1, r1, #9
 8002d56:	430a      	orrs	r2, r1
 8002d58:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002d5a:	e01b      	b.n	8002d94 <revers_zero+0xa8>
			else {
				STEP1_ON;                           // если же там 0 то установим 1 на выходе
 8002d5c:	2390      	movs	r3, #144	; 0x90
 8002d5e:	05db      	lsls	r3, r3, #23
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	2390      	movs	r3, #144	; 0x90
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]
			    stepp_1.step_up ++;                 // считаем переменную количества шагов от конца
 8002d6c:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <revers_zero+0x160>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	4b36      	ldr	r3, [pc, #216]	; (8002e4c <revers_zero+0x160>)
 8002d74:	609a      	str	r2, [r3, #8]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002d76:	e00d      	b.n	8002d94 <revers_zero+0xa8>
			}
		} else {
			flags.zero_pos1 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002d78:	4b32      	ldr	r3, [pc, #200]	; (8002e44 <revers_zero+0x158>)
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	701a      	strb	r2, [r3, #0]
			STEP1_OFF;                              // и сбрасываем степ в 0
 8002d82:	2390      	movs	r3, #144	; 0x90
 8002d84:	05db      	lsls	r3, r3, #23
 8002d86:	699a      	ldr	r2, [r3, #24]
 8002d88:	2390      	movs	r3, #144	; 0x90
 8002d8a:	05db      	lsls	r3, r3, #23
 8002d8c:	2180      	movs	r1, #128	; 0x80
 8002d8e:	0249      	lsls	r1, r1, #9
 8002d90:	430a      	orrs	r2, r1
 8002d92:	619a      	str	r2, [r3, #24]
		}
		if (!READ_LIM2 && !flags.zero_pos2) {       // считаем состояние концевика, если не ноль, шагаем
 8002d94:	4b2c      	ldr	r3, [pc, #176]	; (8002e48 <revers_zero+0x15c>)
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2240      	movs	r2, #64	; 0x40
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d124      	bne.n	8002de8 <revers_zero+0xfc>
 8002d9e:	4b29      	ldr	r3, [pc, #164]	; (8002e44 <revers_zero+0x158>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2202      	movs	r2, #2
 8002da4:	4013      	ands	r3, r2
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d11d      	bne.n	8002de8 <revers_zero+0xfc>
			if (GPIOA->IDR & GPIO_IDR_1)
 8002dac:	2390      	movs	r3, #144	; 0x90
 8002dae:	05db      	lsls	r3, r3, #23
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2202      	movs	r2, #2
 8002db4:	4013      	ands	r3, r2
 8002db6:	d009      	beq.n	8002dcc <revers_zero+0xe0>
				STEP2_OFF;                          // считаем что у нас сейчас в регистре выхода, если 1 то выставим 0
 8002db8:	2390      	movs	r3, #144	; 0x90
 8002dba:	05db      	lsls	r3, r3, #23
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	2390      	movs	r3, #144	; 0x90
 8002dc0:	05db      	lsls	r3, r3, #23
 8002dc2:	2180      	movs	r1, #128	; 0x80
 8002dc4:	0289      	lsls	r1, r1, #10
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002dca:	e01b      	b.n	8002e04 <revers_zero+0x118>
			else {
				STEP2_ON;                           // если же там 0 то установим 1 на выходе
 8002dcc:	2390      	movs	r3, #144	; 0x90
 8002dce:	05db      	lsls	r3, r3, #23
 8002dd0:	699a      	ldr	r2, [r3, #24]
 8002dd2:	2390      	movs	r3, #144	; 0x90
 8002dd4:	05db      	lsls	r3, r3, #23
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	619a      	str	r2, [r3, #24]
				stepp_2.step_up ++;
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	; (8002e50 <revers_zero+0x164>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <revers_zero+0x164>)
 8002de4:	609a      	str	r2, [r3, #8]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002de6:	e00d      	b.n	8002e04 <revers_zero+0x118>
			}
		} else {
			flags.zero_pos2 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <revers_zero+0x158>)
 8002dea:	781a      	ldrb	r2, [r3, #0]
 8002dec:	2102      	movs	r1, #2
 8002dee:	430a      	orrs	r2, r1
 8002df0:	701a      	strb	r2, [r3, #0]
			STEP2_OFF;
 8002df2:	2390      	movs	r3, #144	; 0x90
 8002df4:	05db      	lsls	r3, r3, #23
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	2390      	movs	r3, #144	; 0x90
 8002dfa:	05db      	lsls	r3, r3, #23
 8002dfc:	2180      	movs	r1, #128	; 0x80
 8002dfe:	0289      	lsls	r1, r1, #10
 8002e00:	430a      	orrs	r2, r1
 8002e02:	619a      	str	r2, [r3, #24]
		}
	}

	if (flags.zero_pos1 && flags.zero_pos2) {       // если сработало два флага значит мы в нулях
 8002e04:	4b0f      	ldr	r3, [pc, #60]	; (8002e44 <revers_zero+0x158>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d014      	beq.n	8002e3c <revers_zero+0x150>
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <revers_zero+0x158>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2202      	movs	r2, #2
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00d      	beq.n	8002e3c <revers_zero+0x150>
		flags.zero_ok = TRUE;                       // установим флаг
 8002e20:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <revers_zero+0x158>)
 8002e22:	781a      	ldrb	r2, [r3, #0]
 8002e24:	2118      	movs	r1, #24
 8002e26:	438a      	bics	r2, r1
 8002e28:	1c11      	adds	r1, r2, #0
 8002e2a:	2208      	movs	r2, #8
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);       // выключим прерывание по обновлению
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <revers_zero+0x168>)
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <revers_zero+0x168>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	60da      	str	r2, [r3, #12]
	}
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	2000006c 	.word	0x2000006c
 8002e48:	48000400 	.word	0x48000400
 8002e4c:	2000004c 	.word	0x2000004c
 8002e50:	2000005c 	.word	0x2000005c
 8002e54:	40014800 	.word	0x40014800

08002e58 <new_step_go1>:

static inline void new_step_go1(void) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	if (flags.balance_1) {                                   // если новое движение
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <new_step_go1+0xd4>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2220      	movs	r2, #32
 8002e62:	4013      	ands	r3, r2
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <new_step_go1+0x46>
		if (stepp_1.curent_steps > stepp_1.last_steps)       // если у нас движение в одну сторону
 8002e6a:	4b31      	ldr	r3, [pc, #196]	; (8002f30 <new_step_go1+0xd8>)
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4b30      	ldr	r3, [pc, #192]	; (8002f30 <new_step_go1+0xd8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	dd07      	ble.n	8002e86 <new_step_go1+0x2e>
			DIR1_OFF;                                        // установим единичку на дир
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <new_step_go1+0xdc>)
 8002e78:	699a      	ldr	r2, [r3, #24]
 8002e7a:	4b2e      	ldr	r3, [pc, #184]	; (8002f34 <new_step_go1+0xdc>)
 8002e7c:	2180      	movs	r1, #128	; 0x80
 8002e7e:	0389      	lsls	r1, r1, #14
 8002e80:	430a      	orrs	r2, r1
 8002e82:	619a      	str	r2, [r3, #24]
 8002e84:	e005      	b.n	8002e92 <new_step_go1+0x3a>
		else                                                 // если в другую
			DIR1_ON;                                         // установим нолик на дир
 8002e86:	4b2b      	ldr	r3, [pc, #172]	; (8002f34 <new_step_go1+0xdc>)
 8002e88:	699a      	ldr	r2, [r3, #24]
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	; (8002f34 <new_step_go1+0xdc>)
 8002e8c:	2120      	movs	r1, #32
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]
		flags.balance_1 = FALSE;                             // сбросим новое движение
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <new_step_go1+0xd4>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	2120      	movs	r1, #32
 8002e98:	438a      	bics	r2, r1
 8002e9a:	701a      	strb	r2, [r3, #0]
			else
				stepp_1.last_steps ++;
			}
		}
	}
}
 8002e9c:	e042      	b.n	8002f24 <new_step_go1+0xcc>
		if (stepp_1.curent_steps == stepp_1.last_steps) {    // если шаги равны то пропускаем движение
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <new_step_go1+0xd8>)
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <new_step_go1+0xd8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d113      	bne.n	8002ed2 <new_step_go1+0x7a>
			CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);            // если шагать не нужно выключим прерывания
 8002eaa:	4b23      	ldr	r3, [pc, #140]	; (8002f38 <new_step_go1+0xe0>)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4b22      	ldr	r3, [pc, #136]	; (8002f38 <new_step_go1+0xe0>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	438a      	bics	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]
			stepp_1.last_steps = stepp_1.curent_steps;       // приравняем значения
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <new_step_go1+0xd8>)
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <new_step_go1+0xd8>)
 8002ebc:	601a      	str	r2, [r3, #0]
			STEP1_OFF;                                       // и сбросим степ
 8002ebe:	2390      	movs	r3, #144	; 0x90
 8002ec0:	05db      	lsls	r3, r3, #23
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	2390      	movs	r3, #144	; 0x90
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0249      	lsls	r1, r1, #9
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	619a      	str	r2, [r3, #24]
}
 8002ed0:	e028      	b.n	8002f24 <new_step_go1+0xcc>
			if (GPIOA->IDR & GPIO_IDR_0) {                   // считаем регистр, если там единичка
 8002ed2:	2390      	movs	r3, #144	; 0x90
 8002ed4:	05db      	lsls	r3, r3, #23
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4013      	ands	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <new_step_go1+0x9a>
				STEP1_OFF;                                   // переведем степ в 0
 8002ede:	2390      	movs	r3, #144	; 0x90
 8002ee0:	05db      	lsls	r3, r3, #23
 8002ee2:	699a      	ldr	r2, [r3, #24]
 8002ee4:	2390      	movs	r3, #144	; 0x90
 8002ee6:	05db      	lsls	r3, r3, #23
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0249      	lsls	r1, r1, #9
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
}
 8002ef0:	e018      	b.n	8002f24 <new_step_go1+0xcc>
				STEP1_ON;                                    // переведем степ в 1
 8002ef2:	2390      	movs	r3, #144	; 0x90
 8002ef4:	05db      	lsls	r3, r3, #23
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	2390      	movs	r3, #144	; 0x90
 8002efa:	05db      	lsls	r3, r3, #23
 8002efc:	2101      	movs	r1, #1
 8002efe:	430a      	orrs	r2, r1
 8002f00:	619a      	str	r2, [r3, #24]
			if (stepp_1.curent_steps < stepp_1.last_steps)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <new_step_go1+0xd8>)
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <new_step_go1+0xd8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	da05      	bge.n	8002f1a <new_step_go1+0xc2>
				stepp_1.last_steps --;                       // а так же изменим текущие шаги
 8002f0e:	4b08      	ldr	r3, [pc, #32]	; (8002f30 <new_step_go1+0xd8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1e5a      	subs	r2, r3, #1
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <new_step_go1+0xd8>)
 8002f16:	601a      	str	r2, [r3, #0]
}
 8002f18:	e004      	b.n	8002f24 <new_step_go1+0xcc>
				stepp_1.last_steps ++;
 8002f1a:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <new_step_go1+0xd8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <new_step_go1+0xd8>)
 8002f22:	601a      	str	r2, [r3, #0]
}
 8002f24:	46c0      	nop			; (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	2000006c 	.word	0x2000006c
 8002f30:	2000004c 	.word	0x2000004c
 8002f34:	48000400 	.word	0x48000400
 8002f38:	40014800 	.word	0x40014800

08002f3c <new_step_go2>:
//DIR инвертирован
static inline void new_step_go2(void) {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
	if (flags.balance_2) {
 8002f40:	4b33      	ldr	r3, [pc, #204]	; (8003010 <new_step_go2+0xd4>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2240      	movs	r2, #64	; 0x40
 8002f46:	4013      	ands	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d019      	beq.n	8002f82 <new_step_go2+0x46>
		if (stepp_2.curent_steps > stepp_2.last_steps)
 8002f4e:	4b31      	ldr	r3, [pc, #196]	; (8003014 <new_step_go2+0xd8>)
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	4b30      	ldr	r3, [pc, #192]	; (8003014 <new_step_go2+0xd8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	dd06      	ble.n	8002f68 <new_step_go2+0x2c>
			DIR2_ON;                                        // установим единичку на дир
 8002f5a:	4b2f      	ldr	r3, [pc, #188]	; (8003018 <new_step_go2+0xdc>)
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	4b2e      	ldr	r3, [pc, #184]	; (8003018 <new_step_go2+0xdc>)
 8002f60:	2110      	movs	r1, #16
 8002f62:	430a      	orrs	r2, r1
 8002f64:	619a      	str	r2, [r3, #24]
 8002f66:	e006      	b.n	8002f76 <new_step_go2+0x3a>
		else
			DIR2_OFF;                                         // установим нолик на дир
 8002f68:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <new_step_go2+0xdc>)
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	4b2a      	ldr	r3, [pc, #168]	; (8003018 <new_step_go2+0xdc>)
 8002f6e:	2180      	movs	r1, #128	; 0x80
 8002f70:	0349      	lsls	r1, r1, #13
 8002f72:	430a      	orrs	r2, r1
 8002f74:	619a      	str	r2, [r3, #24]
		flags.balance_2 = FALSE;
 8002f76:	4b26      	ldr	r3, [pc, #152]	; (8003010 <new_step_go2+0xd4>)
 8002f78:	781a      	ldrb	r2, [r3, #0]
 8002f7a:	2140      	movs	r1, #64	; 0x40
 8002f7c:	438a      	bics	r2, r1
 8002f7e:	701a      	strb	r2, [r3, #0]
			else
				stepp_2.last_steps ++;
			}
		}
	}
}
 8002f80:	e042      	b.n	8003008 <new_step_go2+0xcc>
		if (stepp_2.curent_steps == stepp_2.last_steps) {    // если шаги равны то пропускаем движение
 8002f82:	4b24      	ldr	r3, [pc, #144]	; (8003014 <new_step_go2+0xd8>)
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	4b23      	ldr	r3, [pc, #140]	; (8003014 <new_step_go2+0xd8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d113      	bne.n	8002fb6 <new_step_go2+0x7a>
			CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);            // если шагать не нужно выключим прерывания
 8002f8e:	4b23      	ldr	r3, [pc, #140]	; (800301c <new_step_go2+0xe0>)
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	4b22      	ldr	r3, [pc, #136]	; (800301c <new_step_go2+0xe0>)
 8002f94:	2101      	movs	r1, #1
 8002f96:	438a      	bics	r2, r1
 8002f98:	60da      	str	r2, [r3, #12]
			stepp_2.last_steps = stepp_2.curent_steps;       // приравняем значения
 8002f9a:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <new_step_go2+0xd8>)
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <new_step_go2+0xd8>)
 8002fa0:	601a      	str	r2, [r3, #0]
			STEP2_OFF;                                       // и сбросим степ
 8002fa2:	2390      	movs	r3, #144	; 0x90
 8002fa4:	05db      	lsls	r3, r3, #23
 8002fa6:	699a      	ldr	r2, [r3, #24]
 8002fa8:	2390      	movs	r3, #144	; 0x90
 8002faa:	05db      	lsls	r3, r3, #23
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	0289      	lsls	r1, r1, #10
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	619a      	str	r2, [r3, #24]
}
 8002fb4:	e028      	b.n	8003008 <new_step_go2+0xcc>
			if (GPIOA->IDR & GPIO_IDR_1) {                   // считаем регистр, если там единичка
 8002fb6:	2390      	movs	r3, #144	; 0x90
 8002fb8:	05db      	lsls	r3, r3, #23
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d009      	beq.n	8002fd6 <new_step_go2+0x9a>
				STEP2_OFF;                                   // переведем степ в 0
 8002fc2:	2390      	movs	r3, #144	; 0x90
 8002fc4:	05db      	lsls	r3, r3, #23
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	2390      	movs	r3, #144	; 0x90
 8002fca:	05db      	lsls	r3, r3, #23
 8002fcc:	2180      	movs	r1, #128	; 0x80
 8002fce:	0289      	lsls	r1, r1, #10
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	619a      	str	r2, [r3, #24]
}
 8002fd4:	e018      	b.n	8003008 <new_step_go2+0xcc>
				STEP2_ON;                                    // переведем степ в 1
 8002fd6:	2390      	movs	r3, #144	; 0x90
 8002fd8:	05db      	lsls	r3, r3, #23
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	2390      	movs	r3, #144	; 0x90
 8002fde:	05db      	lsls	r3, r3, #23
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	619a      	str	r2, [r3, #24]
			if (stepp_2.curent_steps < stepp_2.last_steps)
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <new_step_go2+0xd8>)
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <new_step_go2+0xd8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	da05      	bge.n	8002ffe <new_step_go2+0xc2>
				stepp_2.last_steps --;                       // а так же изменим текущие шаги
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <new_step_go2+0xd8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	1e5a      	subs	r2, r3, #1
 8002ff8:	4b06      	ldr	r3, [pc, #24]	; (8003014 <new_step_go2+0xd8>)
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	e004      	b.n	8003008 <new_step_go2+0xcc>
				stepp_2.last_steps ++;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <new_step_go2+0xd8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	1c5a      	adds	r2, r3, #1
 8003004:	4b03      	ldr	r3, [pc, #12]	; (8003014 <new_step_go2+0xd8>)
 8003006:	601a      	str	r2, [r3, #0]
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	2000006c 	.word	0x2000006c
 8003014:	2000005c 	.word	0x2000005c
 8003018:	48000400 	.word	0x48000400
 800301c:	40014400 	.word	0x40014400

08003020 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void) {
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
	TIM17->SR &= ~TIM_SR_UIF;                                // сбросим флаг прерывания
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <TIM17_IRQHandler+0x44>)
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <TIM17_IRQHandler+0x44>)
 800302a:	2101      	movs	r1, #1
 800302c:	438a      	bics	r2, r1
 800302e:	611a      	str	r2, [r3, #16]
	if (flags.zero_ok == 0) {
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <TIM17_IRQHandler+0x48>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2218      	movs	r2, #24
 8003036:	4013      	ands	r3, r2
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d102      	bne.n	8003044 <TIM17_IRQHandler+0x24>
		search_zero();
 800303e:	f7ff fd91 	bl	8002b64 <search_zero>
	} else if (flags.zero_ok == 1) {
		new_step_go1();
	} else {
		revers_zero ();
	}
}
 8003042:	e00b      	b.n	800305c <TIM17_IRQHandler+0x3c>
	} else if (flags.zero_ok == 1) {
 8003044:	4b08      	ldr	r3, [pc, #32]	; (8003068 <TIM17_IRQHandler+0x48>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2218      	movs	r2, #24
 800304a:	4013      	ands	r3, r2
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b08      	cmp	r3, #8
 8003050:	d102      	bne.n	8003058 <TIM17_IRQHandler+0x38>
		new_step_go1();
 8003052:	f7ff ff01 	bl	8002e58 <new_step_go1>
}
 8003056:	e001      	b.n	800305c <TIM17_IRQHandler+0x3c>
		revers_zero ();
 8003058:	f7ff fe48 	bl	8002cec <revers_zero>
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	40014800 	.word	0x40014800
 8003068:	2000006c 	.word	0x2000006c

0800306c <TIM16_IRQHandler>:

void TIM16_IRQHandler(void) {
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
	TIM16->SR &= ~TIM_SR_UIF;                                // сбросим флаг прерывания
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <TIM16_IRQHandler+0x1c>)
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <TIM16_IRQHandler+0x1c>)
 8003076:	2101      	movs	r1, #1
 8003078:	438a      	bics	r2, r1
 800307a:	611a      	str	r2, [r3, #16]
	new_step_go2();
 800307c:	f7ff ff5e 	bl	8002f3c <new_step_go2>
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	40014400 	.word	0x40014400

0800308c <stepper>:

uint32_t stepper( int32_t stepper, uint32_t num_motor) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
	if (num_motor > 1) return 0;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d901      	bls.n	80030a0 <stepper+0x14>
 800309c:	2300      	movs	r3, #0
 800309e:	e028      	b.n	80030f2 <stepper+0x66>
	if (num_motor == 0) {
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d110      	bne.n	80030c8 <stepper+0x3c>
		stepp_1.curent_steps = stepper;
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <stepper+0x70>)
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	605a      	str	r2, [r3, #4]
		flags.balance_1 = 1;
 80030ac:	4b14      	ldr	r3, [pc, #80]	; (8003100 <stepper+0x74>)
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	2120      	movs	r1, #32
 80030b2:	430a      	orrs	r2, r1
 80030b4:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <stepper+0x78>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <stepper+0x78>)
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	4b10      	ldr	r3, [pc, #64]	; (8003104 <stepper+0x78>)
 80030c2:	2101      	movs	r1, #1
 80030c4:	430a      	orrs	r2, r1
 80030c6:	60da      	str	r2, [r3, #12]
	}
	if (num_motor == 1) {
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d110      	bne.n	80030f0 <stepper+0x64>
		stepp_2.curent_steps = stepper;
 80030ce:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <stepper+0x7c>)
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]
		flags.balance_2 = 1;
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <stepper+0x74>)
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	2140      	movs	r1, #64	; 0x40
 80030da:	430a      	orrs	r2, r1
 80030dc:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <stepper+0x80>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM16->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <stepper+0x80>)
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	4b08      	ldr	r3, [pc, #32]	; (800310c <stepper+0x80>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]
	}
	return 1;
 80030f0:	2301      	movs	r3, #1
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	2000004c 	.word	0x2000004c
 8003100:	2000006c 	.word	0x2000006c
 8003104:	40014800 	.word	0x40014800
 8003108:	2000005c 	.word	0x2000005c
 800310c:	40014400 	.word	0x40014400

08003110 <extrn_step>:

uint32_t extrn_step(uint32_t stepper, uint32_t num_motor){
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
	if (num_motor > 1) return 0;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d901      	bls.n	8003124 <extrn_step+0x14>
 8003120:	2300      	movs	r3, #0
 8003122:	e028      	b.n	8003176 <extrn_step+0x66>
	//if (stepper > RESOLUTION) return 0;
	if (num_motor == 0) {
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d110      	bne.n	800314c <extrn_step+0x3c>
		//stepp_1.curent_steps = map (stepper, 0, RESOLUTION, (stepp_1.step_up<<4)-PROTECT, (stepp_1.step_down<<4)-PROTECT); // >>1 для полного шага потому что переменная складывается 2 раза
		stepp_1.curent_steps = stepper;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4b14      	ldr	r3, [pc, #80]	; (8003180 <extrn_step+0x70>)
 800312e:	605a      	str	r2, [r3, #4]
		flags.balance_1 = 1;
 8003130:	4b14      	ldr	r3, [pc, #80]	; (8003184 <extrn_step+0x74>)
 8003132:	781a      	ldrb	r2, [r3, #0]
 8003134:	2120      	movs	r1, #32
 8003136:	430a      	orrs	r2, r1
 8003138:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 800313a:	4b13      	ldr	r3, [pc, #76]	; (8003188 <extrn_step+0x78>)
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <extrn_step+0x78>)
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	4b10      	ldr	r3, [pc, #64]	; (8003188 <extrn_step+0x78>)
 8003146:	2101      	movs	r1, #1
 8003148:	430a      	orrs	r2, r1
 800314a:	60da      	str	r2, [r3, #12]
	}
	if (num_motor == 1) {
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d110      	bne.n	8003174 <extrn_step+0x64>
		//stepp_2.curent_steps = map (stepper, 0,RESOLUTION, (stepp_2.step_down<<4)-PROTECT, (stepp_2.step_up<<4)-PROTECT); // тут умножение на 32 заменено смещением на 4
		stepp_2.curent_steps = stepper;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <extrn_step+0x7c>)
 8003156:	605a      	str	r2, [r3, #4]
		flags.balance_2 = 1;     // но так как у нас переменная считается в прерывании 2 раза то нужно еще и разделит на 2, но можем просто делить на 16
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <extrn_step+0x74>)
 800315a:	781a      	ldrb	r2, [r3, #0]
 800315c:	2140      	movs	r1, #64	; 0x40
 800315e:	430a      	orrs	r2, r1
 8003160:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <extrn_step+0x80>)
 8003164:	2200      	movs	r2, #0
 8003166:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM16->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <extrn_step+0x80>)
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <extrn_step+0x80>)
 800316e:	2101      	movs	r1, #1
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]
	}
	return 1;
 8003174:	2301      	movs	r3, #1
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b002      	add	sp, #8
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	2000004c 	.word	0x2000004c
 8003184:	2000006c 	.word	0x2000006c
 8003188:	40014800 	.word	0x40014800
 800318c:	2000005c 	.word	0x2000005c
 8003190:	40014400 	.word	0x40014400

08003194 <max_step>:

uint32_t max_step (uint32_t num_motor) {              // отдать максимальное количество шагов
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	uint32_t return_data = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
	if (num_motor == 0) {
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10d      	bne.n	80031c2 <max_step+0x2e>
		return_data = (-stepp_1.step_down << 5) << 16;
 80031a6:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <max_step+0x5c>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	425b      	negs	r3, r3
 80031ac:	055b      	lsls	r3, r3, #21
 80031ae:	60fb      	str	r3, [r7, #12]
		return_data |= (stepp_1.step_up << 5);        // *32 чтоб мы могли двигаться по дробленому шагу
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <max_step+0x5c>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	015b      	lsls	r3, r3, #5
 80031b6:	001a      	movs	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
		return return_data; //return (stepp_1.step_down << 5)  + (stepp_1.step_up << 5);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	e011      	b.n	80031e6 <max_step+0x52>
	}
	if (num_motor == 1) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10d      	bne.n	80031e4 <max_step+0x50>
		return_data = (stepp_2.step_up << 5) << 16;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <max_step+0x60>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	055b      	lsls	r3, r3, #21
 80031ce:	60fb      	str	r3, [r7, #12]
		return_data |= (-stepp_2.step_down << 5);        // *32 чтоб мы могли двигаться по дробленому шагу
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <max_step+0x60>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	425b      	negs	r3, r3
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	001a      	movs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
		return return_data; //return (stepp_2.step_down << 5) + (stepp_2.step_up << 5);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	e000      	b.n	80031e6 <max_step+0x52>
	}
	return 0;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	2000004c 	.word	0x2000004c
 80031f4:	2000005c 	.word	0x2000005c

080031f8 <init_struct>:

void init_struct (void){                         // инициализируем ячейки
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	flags.ir_filter = TRUE;
 80031fc:	4b1c      	ldr	r3, [pc, #112]	; (8003270 <init_struct+0x78>)
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	4249      	negs	r1, r1
 8003204:	430a      	orrs	r2, r1
 8003206:	701a      	strb	r2, [r3, #0]
	flags.iris_drive = FALSE;
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <init_struct+0x78>)
 800320a:	785a      	ldrb	r2, [r3, #1]
 800320c:	2101      	movs	r1, #1
 800320e:	438a      	bics	r2, r1
 8003210:	705a      	strb	r2, [r3, #1]
	flags.zero_ok = TRUE;                        // это первоначальная инициализация чтоб можно было пошагать
 8003212:	4b17      	ldr	r3, [pc, #92]	; (8003270 <init_struct+0x78>)
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	2118      	movs	r1, #24
 8003218:	438a      	bics	r2, r1
 800321a:	1c11      	adds	r1, r2, #0
 800321c:	2208      	movs	r2, #8
 800321e:	430a      	orrs	r2, r1
 8003220:	701a      	strb	r2, [r3, #0]
	flags.zero_in_programm = FALSE;
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <init_struct+0x78>)
 8003224:	789a      	ldrb	r2, [r3, #2]
 8003226:	2102      	movs	r1, #2
 8003228:	438a      	bics	r2, r1
 800322a:	709a      	strb	r2, [r3, #2]
	flags.reset_setting = TRUE;
 800322c:	4b10      	ldr	r3, [pc, #64]	; (8003270 <init_struct+0x78>)
 800322e:	789a      	ldrb	r2, [r3, #2]
 8003230:	2104      	movs	r1, #4
 8003232:	430a      	orrs	r2, r1
 8003234:	709a      	strb	r2, [r3, #2]
	flags.change_pin_conf = FALSE;
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <init_struct+0x78>)
 8003238:	789a      	ldrb	r2, [r3, #2]
 800323a:	2140      	movs	r1, #64	; 0x40
 800323c:	438a      	bics	r2, r1
 800323e:	709a      	strb	r2, [r3, #2]
	flags.iwdt_res = FALSE;
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <init_struct+0x78>)
 8003242:	789a      	ldrb	r2, [r3, #2]
 8003244:	2108      	movs	r1, #8
 8003246:	438a      	bics	r2, r1
 8003248:	709a      	strb	r2, [r3, #2]
	stepp_1.last_steps = 0;                      // это чтоб с самого начала могли пошагать в -8000
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <init_struct+0x7c>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
	stepp_2.last_steps = 0;
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <init_struct+0x80>)
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
	STEP3_OFF;                                   // ?
 8003256:	2390      	movs	r3, #144	; 0x90
 8003258:	05db      	lsls	r3, r3, #23
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	2390      	movs	r3, #144	; 0x90
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0409      	lsls	r1, r1, #16
 8003264:	430a      	orrs	r2, r1
 8003266:	619a      	str	r2, [r3, #24]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	2000006c 	.word	0x2000006c
 8003274:	2000004c 	.word	0x2000004c
 8003278:	2000005c 	.word	0x2000005c

0800327c <zero_position>:

void zero_position(void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
	CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8003280:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <zero_position+0x64>)
 8003282:	2200      	movs	r2, #0
 8003284:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);         // а тут выключим прерывания
 8003286:	4b16      	ldr	r3, [pc, #88]	; (80032e0 <zero_position+0x64>)
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <zero_position+0x64>)
 800328c:	2101      	movs	r1, #1
 800328e:	438a      	bics	r2, r1
 8003290:	60da      	str	r2, [r3, #12]
	flags.zero_ok = FALSE;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <zero_position+0x68>)
 8003294:	781a      	ldrb	r2, [r3, #0]
 8003296:	2118      	movs	r1, #24
 8003298:	438a      	bics	r2, r1
 800329a:	701a      	strb	r2, [r3, #0]
	flags.zero_pos1 = FALSE;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <zero_position+0x68>)
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	438a      	bics	r2, r1
 80032a4:	701a      	strb	r2, [r3, #0]
	flags.zero_pos2 = FALSE;
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <zero_position+0x68>)
 80032a8:	781a      	ldrb	r2, [r3, #0]
 80032aa:	2102      	movs	r1, #2
 80032ac:	438a      	bics	r2, r1
 80032ae:	701a      	strb	r2, [r3, #0]
	flags.start_zero = FALSE;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <zero_position+0x68>)
 80032b2:	781a      	ldrb	r2, [r3, #0]
 80032b4:	2104      	movs	r1, #4
 80032b6:	438a      	bics	r2, r1
 80032b8:	701a      	strb	r2, [r3, #0]
	stepp_1.step_down = 0;                        // сбросим счетчик шагов "вниз"
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <zero_position+0x6c>)
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
	stepp_2.step_down = 0;
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <zero_position+0x70>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
	CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 80032c6:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <zero_position+0x74>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 80032cc:	4b08      	ldr	r3, [pc, #32]	; (80032f0 <zero_position+0x74>)
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	4b07      	ldr	r3, [pc, #28]	; (80032f0 <zero_position+0x74>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]
}
 80032d8:	46c0      	nop			; (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	46c0      	nop			; (mov r8, r8)
 80032e0:	40014400 	.word	0x40014400
 80032e4:	2000006c 	.word	0x2000006c
 80032e8:	2000004c 	.word	0x2000004c
 80032ec:	2000005c 	.word	0x2000005c
 80032f0:	40014800 	.word	0x40014800

080032f4 <search_steps>:

void search_steps (void) {                        // поиск количества шагов от максимума
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 80032f8:	4b18      	ldr	r3, [pc, #96]	; (800335c <search_steps+0x68>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);         // а тут выключим прерывания
 80032fe:	4b17      	ldr	r3, [pc, #92]	; (800335c <search_steps+0x68>)
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	4b16      	ldr	r3, [pc, #88]	; (800335c <search_steps+0x68>)
 8003304:	2101      	movs	r1, #1
 8003306:	438a      	bics	r2, r1
 8003308:	60da      	str	r2, [r3, #12]
	stepp_1.step_up = 0;                          // сбросим счетчик шагов "вверх"
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <search_steps+0x6c>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
	stepp_2.step_up = 0;
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <search_steps+0x70>)
 8003312:	2200      	movs	r2, #0
 8003314:	609a      	str	r2, [r3, #8]
	flags.zero_ok = 2;
 8003316:	4b14      	ldr	r3, [pc, #80]	; (8003368 <search_steps+0x74>)
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	2118      	movs	r1, #24
 800331c:	438a      	bics	r2, r1
 800331e:	1c11      	adds	r1, r2, #0
 8003320:	2210      	movs	r2, #16
 8003322:	430a      	orrs	r2, r1
 8003324:	701a      	strb	r2, [r3, #0]
	flags.zero_pos1 = FALSE;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <search_steps+0x74>)
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	2101      	movs	r1, #1
 800332c:	438a      	bics	r2, r1
 800332e:	701a      	strb	r2, [r3, #0]
	flags.zero_pos2 = FALSE;
 8003330:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <search_steps+0x74>)
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	2102      	movs	r1, #2
 8003336:	438a      	bics	r2, r1
 8003338:	701a      	strb	r2, [r3, #0]
	flags.start_zero = FALSE;                     // это для первичного выбора направления движения
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <search_steps+0x74>)
 800333c:	781a      	ldrb	r2, [r3, #0]
 800333e:	2104      	movs	r1, #4
 8003340:	438a      	bics	r2, r1
 8003342:	701a      	strb	r2, [r3, #0]
	CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <search_steps+0x78>)
 8003346:	2200      	movs	r2, #0
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <search_steps+0x78>)
 800334c:	68da      	ldr	r2, [r3, #12]
 800334e:	4b07      	ldr	r3, [pc, #28]	; (800336c <search_steps+0x78>)
 8003350:	2101      	movs	r1, #1
 8003352:	430a      	orrs	r2, r1
 8003354:	60da      	str	r2, [r3, #12]

}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40014400 	.word	0x40014400
 8003360:	2000004c 	.word	0x2000004c
 8003364:	2000005c 	.word	0x2000005c
 8003368:	2000006c 	.word	0x2000006c
 800336c:	40014800 	.word	0x40014800

08003370 <__NVIC_EnableIRQ>:
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	0002      	movs	r2, r0
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800337c:	1dfb      	adds	r3, r7, #7
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b7f      	cmp	r3, #127	; 0x7f
 8003382:	d809      	bhi.n	8003398 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003384:	1dfb      	adds	r3, r7, #7
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	001a      	movs	r2, r3
 800338a:	231f      	movs	r3, #31
 800338c:	401a      	ands	r2, r3
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <__NVIC_EnableIRQ+0x30>)
 8003390:	2101      	movs	r1, #1
 8003392:	4091      	lsls	r1, r2
 8003394:	000a      	movs	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
}
 8003398:	46c0      	nop			; (mov r8, r8)
 800339a:	46bd      	mov	sp, r7
 800339c:	b002      	add	sp, #8
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	0002      	movs	r2, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b7f      	cmp	r3, #127	; 0x7f
 80033b8:	d828      	bhi.n	800340c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033ba:	4a2f      	ldr	r2, [pc, #188]	; (8003478 <__NVIC_SetPriority+0xd4>)
 80033bc:	1dfb      	adds	r3, r7, #7
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b25b      	sxtb	r3, r3
 80033c2:	089b      	lsrs	r3, r3, #2
 80033c4:	33c0      	adds	r3, #192	; 0xc0
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	589b      	ldr	r3, [r3, r2]
 80033ca:	1dfa      	adds	r2, r7, #7
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	0011      	movs	r1, r2
 80033d0:	2203      	movs	r2, #3
 80033d2:	400a      	ands	r2, r1
 80033d4:	00d2      	lsls	r2, r2, #3
 80033d6:	21ff      	movs	r1, #255	; 0xff
 80033d8:	4091      	lsls	r1, r2
 80033da:	000a      	movs	r2, r1
 80033dc:	43d2      	mvns	r2, r2
 80033de:	401a      	ands	r2, r3
 80033e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	019b      	lsls	r3, r3, #6
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	401a      	ands	r2, r3
 80033ea:	1dfb      	adds	r3, r7, #7
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	0018      	movs	r0, r3
 80033f0:	2303      	movs	r3, #3
 80033f2:	4003      	ands	r3, r0
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033f8:	481f      	ldr	r0, [pc, #124]	; (8003478 <__NVIC_SetPriority+0xd4>)
 80033fa:	1dfb      	adds	r3, r7, #7
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	430a      	orrs	r2, r1
 8003404:	33c0      	adds	r3, #192	; 0xc0
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	501a      	str	r2, [r3, r0]
}
 800340a:	e031      	b.n	8003470 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800340c:	4a1b      	ldr	r2, [pc, #108]	; (800347c <__NVIC_SetPriority+0xd8>)
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	0019      	movs	r1, r3
 8003414:	230f      	movs	r3, #15
 8003416:	400b      	ands	r3, r1
 8003418:	3b08      	subs	r3, #8
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3306      	adds	r3, #6
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	18d3      	adds	r3, r2, r3
 8003422:	3304      	adds	r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	1dfa      	adds	r2, r7, #7
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	0011      	movs	r1, r2
 800342c:	2203      	movs	r2, #3
 800342e:	400a      	ands	r2, r1
 8003430:	00d2      	lsls	r2, r2, #3
 8003432:	21ff      	movs	r1, #255	; 0xff
 8003434:	4091      	lsls	r1, r2
 8003436:	000a      	movs	r2, r1
 8003438:	43d2      	mvns	r2, r2
 800343a:	401a      	ands	r2, r3
 800343c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	019b      	lsls	r3, r3, #6
 8003442:	22ff      	movs	r2, #255	; 0xff
 8003444:	401a      	ands	r2, r3
 8003446:	1dfb      	adds	r3, r7, #7
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	0018      	movs	r0, r3
 800344c:	2303      	movs	r3, #3
 800344e:	4003      	ands	r3, r0
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003454:	4809      	ldr	r0, [pc, #36]	; (800347c <__NVIC_SetPriority+0xd8>)
 8003456:	1dfb      	adds	r3, r7, #7
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	001c      	movs	r4, r3
 800345c:	230f      	movs	r3, #15
 800345e:	4023      	ands	r3, r4
 8003460:	3b08      	subs	r3, #8
 8003462:	089b      	lsrs	r3, r3, #2
 8003464:	430a      	orrs	r2, r1
 8003466:	3306      	adds	r3, #6
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	18c3      	adds	r3, r0, r3
 800346c:	3304      	adds	r3, #4
 800346e:	601a      	str	r2, [r3, #0]
}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b003      	add	sp, #12
 8003476:	bd90      	pop	{r4, r7, pc}
 8003478:	e000e100 	.word	0xe000e100
 800347c:	e000ed00 	.word	0xe000ed00

08003480 <init_Uart1>:

struct USART_TX_only husart1;
struct USART husart2;
struct data send_data;

void init_Uart1(uint32_t baud) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);  // включим тактирование
 8003488:	4b26      	ldr	r3, [pc, #152]	; (8003524 <init_Uart1+0xa4>)
 800348a:	699a      	ldr	r2, [r3, #24]
 800348c:	4b25      	ldr	r3, [pc, #148]	; (8003524 <init_Uart1+0xa4>)
 800348e:	2180      	movs	r1, #128	; 0x80
 8003490:	01c9      	lsls	r1, r1, #7
 8003492:	430a      	orrs	r2, r1
 8003494:	619a      	str	r2, [r3, #24]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER9_1); // альтернативную функцию включим
 8003496:	2390      	movs	r3, #144	; 0x90
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	2390      	movs	r3, #144	; 0x90
 800349e:	05db      	lsls	r3, r3, #23
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	0309      	lsls	r1, r1, #12
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR9); // максимальную скорость
 80034a8:	2390      	movs	r3, #144	; 0x90
 80034aa:	05db      	lsls	r3, r3, #23
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	2390      	movs	r3, #144	; 0x90
 80034b0:	05db      	lsls	r3, r3, #23
 80034b2:	21c0      	movs	r1, #192	; 0xc0
 80034b4:	0309      	lsls	r1, r1, #12
 80034b6:	430a      	orrs	r2, r1
 80034b8:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_9); // открытый колектор
 80034ba:	2390      	movs	r3, #144	; 0x90
 80034bc:	05db      	lsls	r3, r3, #23
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	2390      	movs	r3, #144	; 0x90
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0089      	lsls	r1, r1, #2
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
	SET_BIT(GPIOA->AFR[1], 1<<GPIO_AFRH_AFSEL9_Pos); // альтернативную функцию включим см даташит
 80034cc:	2390      	movs	r3, #144	; 0x90
 80034ce:	05db      	lsls	r3, r3, #23
 80034d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034d2:	2390      	movs	r3, #144	; 0x90
 80034d4:	05db      	lsls	r3, r3, #23
 80034d6:	2110      	movs	r1, #16
 80034d8:	430a      	orrs	r2, r1
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(USART1->CR1, USART_CR1_OVER8 | USART_CR1_TE | USART_CR1_RE | USART_CR3_HDSEL);// делитель на 8
 80034dc:	4b12      	ldr	r3, [pc, #72]	; (8003528 <init_Uart1+0xa8>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <init_Uart1+0xa8>)
 80034e2:	4912      	ldr	r1, [pc, #72]	; (800352c <init_Uart1+0xac>)
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART1->CR1, USART_CR1_TXEIE);    // TXE прерывание при передаче нужно включать только после отправки первого байта
	//SET_BIT(USART1->CR1, USART_CR1_TE);       // передатчик включить
	//SET_BIT(USART1->CR1, USART_CR1_RE);       // приемник включить
	//SET_BIT(USART1->CR3, USART_CR3_HDSEL);    // однопроводной режим

	set_baud(USART1, baud);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <init_Uart1+0xa8>)
 80034ec:	0019      	movs	r1, r3
 80034ee:	0010      	movs	r0, r2
 80034f0:	f000 f876 	bl	80035e0 <set_baud>

	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);     // прерывание на прием
 80034f4:	4b0c      	ldr	r3, [pc, #48]	; (8003528 <init_Uart1+0xa8>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <init_Uart1+0xa8>)
 80034fa:	2120      	movs	r1, #32
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART1->CR1, USART_CR1_IDLEIE);   // прерывание IDLEIE для надежности обнулим руками
	SET_BIT(USART1->CR1, USART_CR1_UE);         // включим USART
 8003500:	4b09      	ldr	r3, [pc, #36]	; (8003528 <init_Uart1+0xa8>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <init_Uart1+0xa8>)
 8003506:	2101      	movs	r1, #1
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);                // Включим прерывания по USART
 800350c:	201b      	movs	r0, #27
 800350e:	f7ff ff2f 	bl	8003370 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);           // выставим приоритет
 8003512:	2101      	movs	r1, #1
 8003514:	201b      	movs	r0, #27
 8003516:	f7ff ff45 	bl	80033a4 <__NVIC_SetPriority>
}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b002      	add	sp, #8
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40021000 	.word	0x40021000
 8003528:	40013800 	.word	0x40013800
 800352c:	0000800c 	.word	0x0000800c

08003530 <init_Uart2>:

void init_Uart2(uint32_t baud) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);                                 // включим тактирование юарта
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <init_Uart2+0xa4>)
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	4b25      	ldr	r3, [pc, #148]	; (80035d4 <init_Uart2+0xa4>)
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	0289      	lsls	r1, r1, #10
 8003542:	430a      	orrs	r2, r1
 8003544:	61da      	str	r2, [r3, #28]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);            // альтернативную функцию включим для ножки А2
 8003546:	2390      	movs	r3, #144	; 0x90
 8003548:	05db      	lsls	r3, r3, #23
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2390      	movs	r3, #144	; 0x90
 800354e:	05db      	lsls	r3, r3, #23
 8003550:	21a0      	movs	r1, #160	; 0xa0
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR3);    // максимальную скорость
 8003556:	2390      	movs	r3, #144	; 0x90
 8003558:	05db      	lsls	r3, r3, #23
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	2390      	movs	r3, #144	; 0x90
 800355e:	05db      	lsls	r3, r3, #23
 8003560:	21f0      	movs	r1, #240	; 0xf0
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_2);                                    // открытый колектор
 8003566:	2390      	movs	r3, #144	; 0x90
 8003568:	05db      	lsls	r3, r3, #23
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	2390      	movs	r3, #144	; 0x90
 800356e:	05db      	lsls	r3, r3, #23
 8003570:	2104      	movs	r1, #4
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
	SET_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR2_0 | GPIO_PUPDR_PUPDR3_0);            // резистор к +
 8003576:	2390      	movs	r3, #144	; 0x90
 8003578:	05db      	lsls	r3, r3, #23
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	2390      	movs	r3, #144	; 0x90
 800357e:	05db      	lsls	r3, r3, #23
 8003580:	2150      	movs	r1, #80	; 0x50
 8003582:	430a      	orrs	r2, r1
 8003584:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->AFR[0], 1<<GPIO_AFRL_AFSEL2_Pos | 1<<GPIO_AFRL_AFSEL3_Pos);   // альтернативную функцию включим см даташит 37стрн
 8003586:	2390      	movs	r3, #144	; 0x90
 8003588:	05db      	lsls	r3, r3, #23
 800358a:	6a1a      	ldr	r2, [r3, #32]
 800358c:	2390      	movs	r3, #144	; 0x90
 800358e:	05db      	lsls	r3, r3, #23
 8003590:	2188      	movs	r1, #136	; 0x88
 8003592:	0149      	lsls	r1, r1, #5
 8003594:	430a      	orrs	r2, r1
 8003596:	621a      	str	r2, [r3, #32]
	//SET_BIT(GPIOA->MODER, GPIO_MODER_MODER3_1);          // альтернативную функцию включим
	//SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR3);     // максимальную скорость
	//SET_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR3_0);          // резистор к +
	//SET_BIT(GPIOA->AFR[0], 1<<GPIO_AFRL_AFSEL3_Pos);     // альтернативную функцию включим см даташит

	SET_BIT(USART2->CR1, USART_CR1_OVER8 | USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);    // делитель на 8
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <init_Uart2+0xa8>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <init_Uart2+0xa8>)
 800359e:	490f      	ldr	r1, [pc, #60]	; (80035dc <init_Uart2+0xac>)
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART2->CR1, USART_CR1_TE);       // передатчик включить
	//SET_BIT(USART2->CR1, USART_CR1_RE);       // приемник включить
	//SET_BIT(USART2->CR1, USART_CR1_RXNEIE);   // прерывание на прием
	//SET_BIT(USART2->CR1, USART_CR1_IDLEIE);   // прерывание IDLEIE

	set_baud(USART2, baud);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <init_Uart2+0xa8>)
 80035a8:	0019      	movs	r1, r3
 80035aa:	0010      	movs	r0, r2
 80035ac:	f000 f818 	bl	80035e0 <set_baud>

	SET_BIT(USART2->CR1, USART_CR1_UE);   // включим USART
 80035b0:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <init_Uart2+0xa8>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <init_Uart2+0xa8>)
 80035b6:	2101      	movs	r1, #1
 80035b8:	430a      	orrs	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);          // Включим прерывания по USART
 80035bc:	201c      	movs	r0, #28
 80035be:	f7ff fed7 	bl	8003370 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART2_IRQn, 1);     // выставим приоритет
 80035c2:	2101      	movs	r1, #1
 80035c4:	201c      	movs	r0, #28
 80035c6:	f7ff feed 	bl	80033a4 <__NVIC_SetPriority>
}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	46bd      	mov	sp, r7
 80035ce:	b002      	add	sp, #8
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	40021000 	.word	0x40021000
 80035d8:	40004400 	.word	0x40004400
 80035dc:	0000803c 	.word	0x0000803c

080035e0 <set_baud>:

void set_baud(USART_TypeDef *usart, uint32_t baud) {   //добавить защиту если не один из баудов не совпал пилить на какой то скорости
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
	uint16_t push;
	usart->BRR = (2 * SYS_CLOCK / baud);       // настройка частоты
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	4813      	ldr	r0, [pc, #76]	; (800363c <set_baud+0x5c>)
 80035ee:	f7fd fd8b 	bl	8001108 <__udivsi3>
 80035f2:	0003      	movs	r3, r0
 80035f4:	001a      	movs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	60da      	str	r2, [r3, #12]
	push = usart->BRR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	210e      	movs	r1, #14
 8003600:	187b      	adds	r3, r7, r1
 8003602:	801a      	strh	r2, [r3, #0]
	push = push << 12;
 8003604:	187b      	adds	r3, r7, r1
 8003606:	187a      	adds	r2, r7, r1
 8003608:	8812      	ldrh	r2, [r2, #0]
 800360a:	0312      	lsls	r2, r2, #12
 800360c:	801a      	strh	r2, [r3, #0]
	push = push >> 13;
 800360e:	187b      	adds	r3, r7, r1
 8003610:	187a      	adds	r2, r7, r1
 8003612:	8812      	ldrh	r2, [r2, #0]
 8003614:	0b52      	lsrs	r2, r2, #13
 8003616:	801a      	strh	r2, [r3, #0]
	usart->BRR &= ~0xF;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	220f      	movs	r2, #15
 800361e:	4393      	bics	r3, r2
 8003620:	001a      	movs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
	usart->BRR |= push;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	187b      	adds	r3, r7, r1
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	60da      	str	r2, [r3, #12]
}
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	46bd      	mov	sp, r7
 8003638:	b004      	add	sp, #16
 800363a:	bd80      	pop	{r7, pc}
 800363c:	05b8d800 	.word	0x05b8d800

08003640 <UART1_transmit>:

void UART1_transmit(uint8_t lenght, uint8_t *data) {
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	0002      	movs	r2, r0
 8003648:	6039      	str	r1, [r7, #0]
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	701a      	strb	r2, [r3, #0]
	while (husart1.tx_counter);     // Ждем, пока линия не освободится
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <UART1_transmit+0x44>)
 8003652:	7e5b      	ldrb	r3, [r3, #25]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1fb      	bne.n	8003650 <UART1_transmit+0x10>
	USART1->TDR = *data;            // Кидаем данные
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	781a      	ldrb	r2, [r3, #0]
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <UART1_transmit+0x48>)
 800365e:	b292      	uxth	r2, r2
 8003660:	851a      	strh	r2, [r3, #40]	; 0x28
	husart1.tx_size = lenght;
 8003662:	4b08      	ldr	r3, [pc, #32]	; (8003684 <UART1_transmit+0x44>)
 8003664:	1dfa      	adds	r2, r7, #7
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	76da      	strb	r2, [r3, #27]
	husart1.tx_counter = 1;         // увеличиваем счетчик
 800366a:	4b06      	ldr	r3, [pc, #24]	; (8003684 <UART1_transmit+0x44>)
 800366c:	2201      	movs	r2, #1
 800366e:	765a      	strb	r2, [r3, #25]
	USART1->CR1 |= USART_CR1_TXEIE; // включим прерывание
 8003670:	4b05      	ldr	r3, [pc, #20]	; (8003688 <UART1_transmit+0x48>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <UART1_transmit+0x48>)
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	46bd      	mov	sp, r7
 8003680:	b002      	add	sp, #8
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000070 	.word	0x20000070
 8003688:	40013800 	.word	0x40013800

0800368c <UART2_transmit>:

void UART2_transmit(uint8_t lenght, uint8_t *data) {
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	0002      	movs	r2, r0
 8003694:	6039      	str	r1, [r7, #0]
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	701a      	strb	r2, [r3, #0]
	while (husart2.tx_counter)
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <UART2_transmit+0x4c>)
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	5c9b      	ldrb	r3, [r3, r2]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1fa      	bne.n	800369c <UART2_transmit+0x10>
		;   //Ждем, пока линия не освободится
	USART2->TDR = *data;          //Кидаем данные
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781a      	ldrb	r2, [r3, #0]
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <UART2_transmit+0x50>)
 80036ac:	b292      	uxth	r2, r2
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
	husart2.tx_size = lenght;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <UART2_transmit+0x4c>)
 80036b2:	1dfa      	adds	r2, r7, #7
 80036b4:	2142      	movs	r1, #66	; 0x42
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	545a      	strb	r2, [r3, r1]
	husart2.tx_counter = 1;
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <UART2_transmit+0x4c>)
 80036bc:	2240      	movs	r2, #64	; 0x40
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
	USART2->CR1 |= USART_CR1_TXEIE; // включим прерывание
 80036c2:	4b06      	ldr	r3, [pc, #24]	; (80036dc <UART2_transmit+0x50>)
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	4b05      	ldr	r3, [pc, #20]	; (80036dc <UART2_transmit+0x50>)
 80036c8:	2180      	movs	r1, #128	; 0x80
 80036ca:	430a      	orrs	r2, r1
 80036cc:	601a      	str	r2, [r3, #0]
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	20000090 	.word	0x20000090
 80036dc:	40004400 	.word	0x40004400

080036e0 <write_to_TMC2300>:

void write_to_TMC2300(uint8_t adr, uint8_t reg, uint32_t data) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	603a      	str	r2, [r7, #0]
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	1c02      	adds	r2, r0, #0
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	1c0a      	adds	r2, r1, #0
 80036f2:	701a      	strb	r2, [r3, #0]
	husart1.tx_buffer[0] = 0x55;        // это синхронизация
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <write_to_TMC2300+0x7c>)
 80036f6:	2255      	movs	r2, #85	; 0x55
 80036f8:	701a      	strb	r2, [r3, #0]
	husart1.tx_buffer[1] = adr;         // адрес модуля
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <write_to_TMC2300+0x7c>)
 80036fc:	1dfa      	adds	r2, r7, #7
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	705a      	strb	r2, [r3, #1]
	husart1.tx_buffer[2] = 0x80;        // устновим бит записи
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <write_to_TMC2300+0x7c>)
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	709a      	strb	r2, [r3, #2]
	husart1.tx_buffer[2] |= reg;        // регистр в который пишем + бит записи
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <write_to_TMC2300+0x7c>)
 800370a:	789a      	ldrb	r2, [r3, #2]
 800370c:	1dbb      	adds	r3, r7, #6
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4313      	orrs	r3, r2
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b11      	ldr	r3, [pc, #68]	; (800375c <write_to_TMC2300+0x7c>)
 8003716:	709a      	strb	r2, [r3, #2]
	husart1.tx_buffer[3] = data >> 24;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	0e1b      	lsrs	r3, r3, #24
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <write_to_TMC2300+0x7c>)
 8003720:	70da      	strb	r2, [r3, #3]
	husart1.tx_buffer[4] = data >> 16;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	0c1b      	lsrs	r3, r3, #16
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <write_to_TMC2300+0x7c>)
 800372a:	711a      	strb	r2, [r3, #4]
	husart1.tx_buffer[5] = data >> 8;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	b2da      	uxtb	r2, r3
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <write_to_TMC2300+0x7c>)
 8003734:	715a      	strb	r2, [r3, #5]
	husart1.tx_buffer[6] = data;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <write_to_TMC2300+0x7c>)
 800373c:	719a      	strb	r2, [r3, #6]
	swuart_calcCRC(husart1.tx_buffer, 8);
 800373e:	4b07      	ldr	r3, [pc, #28]	; (800375c <write_to_TMC2300+0x7c>)
 8003740:	2108      	movs	r1, #8
 8003742:	0018      	movs	r0, r3
 8003744:	f000 fa6c 	bl	8003c20 <swuart_calcCRC>
	UART1_transmit(8, husart1.tx_buffer);
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <write_to_TMC2300+0x7c>)
 800374a:	0019      	movs	r1, r3
 800374c:	2008      	movs	r0, #8
 800374e:	f7ff ff77 	bl	8003640 <UART1_transmit>
}
 8003752:	46c0      	nop			; (mov r8, r8)
 8003754:	46bd      	mov	sp, r7
 8003756:	b002      	add	sp, #8
 8003758:	bd80      	pop	{r7, pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	20000070 	.word	0x20000070

08003760 <read_TMC2300>:

void read_TMC2300(uint8_t adr, uint8_t reg) {  //0x6A считать
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	0002      	movs	r2, r0
 8003768:	1dfb      	adds	r3, r7, #7
 800376a:	701a      	strb	r2, [r3, #0]
 800376c:	1dbb      	adds	r3, r7, #6
 800376e:	1c0a      	adds	r2, r1, #0
 8003770:	701a      	strb	r2, [r3, #0]
 husart1.tx_buffer[0] = 0x55; // это синхронизация
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <read_TMC2300+0x44>)
 8003774:	2255      	movs	r2, #85	; 0x55
 8003776:	701a      	strb	r2, [r3, #0]
 husart1.tx_buffer[1] = adr; // адрес модуля
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <read_TMC2300+0x44>)
 800377a:	1dfa      	adds	r2, r7, #7
 800377c:	7812      	ldrb	r2, [r2, #0]
 800377e:	705a      	strb	r2, [r3, #1]
 husart1.tx_buffer[2] = reg; // регистр в который пишем + бит записи
 8003780:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <read_TMC2300+0x44>)
 8003782:	1dba      	adds	r2, r7, #6
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	709a      	strb	r2, [r3, #2]
 swuart_calcCRC (husart1.tx_buffer, 4);
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <read_TMC2300+0x44>)
 800378a:	2104      	movs	r1, #4
 800378c:	0018      	movs	r0, r3
 800378e:	f000 fa47 	bl	8003c20 <swuart_calcCRC>
 UART1_transmit(4, husart1.tx_buffer);
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <read_TMC2300+0x44>)
 8003794:	0019      	movs	r1, r3
 8003796:	2004      	movs	r0, #4
 8003798:	f7ff ff52 	bl	8003640 <UART1_transmit>
 }
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000070 	.word	0x20000070

080037a8 <setting_TMC230>:

void setting_TMC230(void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	write_to_TMC2300(0, 0x6C, 0x8008001);        // включим, выберем шаг STEP3 // 8
 80037ac:	4b13      	ldr	r3, [pc, #76]	; (80037fc <setting_TMC230+0x54>)
 80037ae:	001a      	movs	r2, r3
 80037b0:	216c      	movs	r1, #108	; 0x6c
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7ff ff94 	bl	80036e0 <write_to_TMC2300>
	Delay_ms(2);
 80037b8:	2002      	movs	r0, #2
 80037ba:	f7ff f849 	bl	8002850 <Delay_ms>
	write_to_TMC2300(0, 0x10, 0x10208);          // выберем ток STEP3
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <setting_TMC230+0x58>)
 80037c0:	001a      	movs	r2, r3
 80037c2:	2110      	movs	r1, #16
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7ff ff8b 	bl	80036e0 <write_to_TMC2300>
	Delay_ms(2);
 80037ca:	2002      	movs	r0, #2
 80037cc:	f7ff f840 	bl	8002850 <Delay_ms>
	write_to_TMC2300(1, 0x6C, 0x8008001);        // включим, полный шаг STEP1
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <setting_TMC230+0x54>)
 80037d2:	001a      	movs	r2, r3
 80037d4:	216c      	movs	r1, #108	; 0x6c
 80037d6:	2001      	movs	r0, #1
 80037d8:	f7ff ff82 	bl	80036e0 <write_to_TMC2300>
	Delay_ms(2);
 80037dc:	2002      	movs	r0, #2
 80037de:	f7ff f837 	bl	8002850 <Delay_ms>
	write_to_TMC2300(3, 0x6C, 0x8008001);        // включим, полный шаг STEP2
 80037e2:	4b06      	ldr	r3, [pc, #24]	; (80037fc <setting_TMC230+0x54>)
 80037e4:	001a      	movs	r2, r3
 80037e6:	216c      	movs	r1, #108	; 0x6c
 80037e8:	2003      	movs	r0, #3
 80037ea:	f7ff ff79 	bl	80036e0 <write_to_TMC2300>
	Delay_ms(2);
 80037ee:	2002      	movs	r0, #2
 80037f0:	f7ff f82e 	bl	8002850 <Delay_ms>
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	08008001 	.word	0x08008001
 8003800:	00010208 	.word	0x00010208

08003804 <parsing_data>:

void parsing_data(void) {  // парсим данные
 8003804:	b5b0      	push	{r4, r5, r7, lr}
 8003806:	af00      	add	r7, sp, #0
	//uint32_t bdt = 0;      // для запоминания скорости перед установкой
	if (husart2.rx_ok) {   // если флаг ок, сбросим его
 8003808:	4b75      	ldr	r3, [pc, #468]	; (80039e0 <parsing_data+0x1dc>)
 800380a:	2243      	movs	r2, #67	; 0x43
 800380c:	5c9b      	ldrb	r3, [r3, r2]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d100      	bne.n	8003814 <parsing_data+0x10>
 8003812:	e0e2      	b.n	80039da <parsing_data+0x1d6>
		husart2.rx_ok = 0;
 8003814:	4b72      	ldr	r3, [pc, #456]	; (80039e0 <parsing_data+0x1dc>)
 8003816:	2243      	movs	r2, #67	; 0x43
 8003818:	2100      	movs	r1, #0
 800381a:	5499      	strb	r1, [r3, r2]
		if (husart2.rx_buffer[0] == 0x02) { // если совпадает начало посылки  умножение на 4 заменим смещением на 2
 800381c:	4b70      	ldr	r3, [pc, #448]	; (80039e0 <parsing_data+0x1dc>)
 800381e:	2220      	movs	r2, #32
 8003820:	5c9b      	ldrb	r3, [r3, r2]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d000      	beq.n	8003828 <parsing_data+0x24>
 8003826:	e0d8      	b.n	80039da <parsing_data+0x1d6>
			if (calcCRC(((husart2.rx_buffer[1] << 2) + 3), husart2.rx_buffer)
 8003828:	4b6d      	ldr	r3, [pc, #436]	; (80039e0 <parsing_data+0x1dc>)
 800382a:	2221      	movs	r2, #33	; 0x21
 800382c:	5c9b      	ldrb	r3, [r3, r2]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	b2db      	uxtb	r3, r3
 8003832:	3303      	adds	r3, #3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	4a6b      	ldr	r2, [pc, #428]	; (80039e4 <parsing_data+0x1e0>)
 8003838:	0011      	movs	r1, r2
 800383a:	0018      	movs	r0, r3
 800383c:	f000 fa44 	bl	8003cc8 <calcCRC>
 8003840:	0003      	movs	r3, r0
 8003842:	0018      	movs	r0, r3
					== husart2.rx_buffer[((husart2.rx_buffer[1] << 2) + 3)]) { // проверим срс
 8003844:	4b66      	ldr	r3, [pc, #408]	; (80039e0 <parsing_data+0x1dc>)
 8003846:	2221      	movs	r2, #33	; 0x21
 8003848:	5c9b      	ldrb	r3, [r3, r2]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	3303      	adds	r3, #3
 800384e:	4a64      	ldr	r2, [pc, #400]	; (80039e0 <parsing_data+0x1dc>)
 8003850:	2120      	movs	r1, #32
 8003852:	18d3      	adds	r3, r2, r3
 8003854:	185b      	adds	r3, r3, r1
 8003856:	781b      	ldrb	r3, [r3, #0]
			if (calcCRC(((husart2.rx_buffer[1] << 2) + 3), husart2.rx_buffer)
 8003858:	4298      	cmp	r0, r3
 800385a:	d000      	beq.n	800385e <parsing_data+0x5a>
 800385c:	e0b1      	b.n	80039c2 <parsing_data+0x1be>
				switch (husart2.rx_buffer[2]) { // в зависимости от типа посылки выполняем операции
 800385e:	4b60      	ldr	r3, [pc, #384]	; (80039e0 <parsing_data+0x1dc>)
 8003860:	2222      	movs	r2, #34	; 0x22
 8003862:	5c9b      	ldrb	r3, [r3, r2]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d900      	bls.n	800386a <parsing_data+0x66>
 8003868:	e0b7      	b.n	80039da <parsing_data+0x1d6>
 800386a:	009a      	lsls	r2, r3, #2
 800386c:	4b5e      	ldr	r3, [pc, #376]	; (80039e8 <parsing_data+0x1e4>)
 800386e:	18d3      	adds	r3, r2, r3
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	469f      	mov	pc, r3
				case 1:
					send_data.one = 0x01; // запишем что нужно передать в первую переменную структуры
 8003874:	4b5d      	ldr	r3, [pc, #372]	; (80039ec <parsing_data+0x1e8>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
					form_send_byte(PING, 1); // отправим ответ на пинг (тип посылки, одна переменная)
 800387a:	2101      	movs	r1, #1
 800387c:	2001      	movs	r0, #1
 800387e:	f000 f8f9 	bl	8003a74 <form_send_byte>
					break;
 8003882:	e0aa      	b.n	80039da <parsing_data+0x1d6>
				case 2:
					new_data_flag(make_32bit(husart2.rx_buffer + 3)); // соберем из переданного буфера переменную с 3 элемента
 8003884:	4b5a      	ldr	r3, [pc, #360]	; (80039f0 <parsing_data+0x1ec>)
 8003886:	0018      	movs	r0, r3
 8003888:	f000 f972 	bl	8003b70 <make_32bit>
 800388c:	0003      	movs	r3, r0
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff f8e4 	bl	8002a5c <new_data_flag>
					send_data.one = read_flag();
 8003894:	f000 f8b0 	bl	80039f8 <read_flag>
 8003898:	0002      	movs	r2, r0
 800389a:	4b54      	ldr	r3, [pc, #336]	; (80039ec <parsing_data+0x1e8>)
 800389c:	601a      	str	r2, [r3, #0]
					form_send_byte(SET_PARAM, 1);
 800389e:	2101      	movs	r1, #1
 80038a0:	2002      	movs	r0, #2
 80038a2:	f000 f8e7 	bl	8003a74 <form_send_byte>
					break;
 80038a6:	e098      	b.n	80039da <parsing_data+0x1d6>
				case 3:
					send_data.one = poz_motor(1); // записать текущую позицию мотора
 80038a8:	2001      	movs	r0, #1
 80038aa:	f7ff f93d 	bl	8002b28 <poz_motor>
 80038ae:	0002      	movs	r2, r0
 80038b0:	4b4e      	ldr	r3, [pc, #312]	; (80039ec <parsing_data+0x1e8>)
 80038b2:	601a      	str	r2, [r3, #0]
					send_data.two = poz_motor(2);
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7ff f937 	bl	8002b28 <poz_motor>
 80038ba:	0002      	movs	r2, r0
 80038bc:	4b4b      	ldr	r3, [pc, #300]	; (80039ec <parsing_data+0x1e8>)
 80038be:	605a      	str	r2, [r3, #4]
					send_data.three = read_flag(); // и флаг (доделать движение моторов)
 80038c0:	f000 f89a 	bl	80039f8 <read_flag>
 80038c4:	0002      	movs	r2, r0
 80038c6:	4b49      	ldr	r3, [pc, #292]	; (80039ec <parsing_data+0x1e8>)
 80038c8:	609a      	str	r2, [r3, #8]
					form_send_byte(MOTOR_POS, 3);
 80038ca:	2103      	movs	r1, #3
 80038cc:	2003      	movs	r0, #3
 80038ce:	f000 f8d1 	bl	8003a74 <form_send_byte>
					break;
 80038d2:	e082      	b.n	80039da <parsing_data+0x1d6>
					//form_send_byte(SET_BAUD, 1);  // ответить скоростью
					//Delay_ms(5);
					//if (bdt) new_baud_set (bdt);  // если бауд правильный то установить его
					break;
				case 5:
					send_data.one = extrn_step(make_32bit(husart2.rx_buffer + 3),
 80038d4:	4b46      	ldr	r3, [pc, #280]	; (80039f0 <parsing_data+0x1ec>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 f94a 	bl	8003b70 <make_32bit>
 80038dc:	0004      	movs	r4, r0
 80038de:	4b45      	ldr	r3, [pc, #276]	; (80039f4 <parsing_data+0x1f0>)
 80038e0:	0018      	movs	r0, r3
 80038e2:	f000 f945 	bl	8003b70 <make_32bit>
 80038e6:	0003      	movs	r3, r0
 80038e8:	0019      	movs	r1, r3
 80038ea:	0020      	movs	r0, r4
 80038ec:	f7ff fc10 	bl	8003110 <extrn_step>
 80038f0:	0002      	movs	r2, r0
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <parsing_data+0x1e8>)
 80038f4:	601a      	str	r2, [r3, #0]
							make_32bit(husart2.rx_buffer + 7)); // установить поз моторов
					form_send_byte(NEW_POS, 1);
 80038f6:	2101      	movs	r1, #1
 80038f8:	2005      	movs	r0, #5
 80038fa:	f000 f8bb 	bl	8003a74 <form_send_byte>
					break;
 80038fe:	e06c      	b.n	80039da <parsing_data+0x1d6>
				case 6:
					send_data.one = setting_pin_rasbery (make_32bit(husart2.rx_buffer + 3));
 8003900:	4b3b      	ldr	r3, [pc, #236]	; (80039f0 <parsing_data+0x1ec>)
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f934 	bl	8003b70 <make_32bit>
 8003908:	0003      	movs	r3, r0
 800390a:	0018      	movs	r0, r3
 800390c:	f000 fd70 	bl	80043f0 <setting_pin_rasbery>
 8003910:	0002      	movs	r2, r0
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <parsing_data+0x1e8>)
 8003914:	601a      	str	r2, [r3, #0]
					form_send_byte(SIGN, 1);
 8003916:	2101      	movs	r1, #1
 8003918:	2006      	movs	r0, #6
 800391a:	f000 f8ab 	bl	8003a74 <form_send_byte>
					break;
 800391e:	e05c      	b.n	80039da <parsing_data+0x1d6>
				case 7:
					send_data.one = new_speed(make_32bit(husart2.rx_buffer + 3),make_32bit(husart2.rx_buffer + 7));
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <parsing_data+0x1ec>)
 8003922:	0018      	movs	r0, r3
 8003924:	f000 f924 	bl	8003b70 <make_32bit>
 8003928:	0004      	movs	r4, r0
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <parsing_data+0x1f0>)
 800392c:	0018      	movs	r0, r3
 800392e:	f000 f91f 	bl	8003b70 <make_32bit>
 8003932:	0003      	movs	r3, r0
 8003934:	0019      	movs	r1, r3
 8003936:	0020      	movs	r0, r4
 8003938:	f7fe fd42 	bl	80023c0 <new_speed>
 800393c:	0002      	movs	r2, r0
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <parsing_data+0x1e8>)
 8003940:	601a      	str	r2, [r3, #0]
					form_send_byte(NEW_SPEED, 1);
 8003942:	2101      	movs	r1, #1
 8003944:	2007      	movs	r0, #7
 8003946:	f000 f895 	bl	8003a74 <form_send_byte>
					break;
 800394a:	e046      	b.n	80039da <parsing_data+0x1d6>
				case 8:
					send_data.one = max_step(0); // записать текущую позицию мотора
 800394c:	2000      	movs	r0, #0
 800394e:	f7ff fc21 	bl	8003194 <max_step>
 8003952:	0002      	movs	r2, r0
 8003954:	4b25      	ldr	r3, [pc, #148]	; (80039ec <parsing_data+0x1e8>)
 8003956:	601a      	str	r2, [r3, #0]
					send_data.two = max_step(1);
 8003958:	2001      	movs	r0, #1
 800395a:	f7ff fc1b 	bl	8003194 <max_step>
 800395e:	0002      	movs	r2, r0
 8003960:	4b22      	ldr	r3, [pc, #136]	; (80039ec <parsing_data+0x1e8>)
 8003962:	605a      	str	r2, [r3, #4]
					form_send_byte(STEP_COUNT, 2);
 8003964:	2102      	movs	r1, #2
 8003966:	2008      	movs	r0, #8
 8003968:	f000 f884 	bl	8003a74 <form_send_byte>
					break;
 800396c:	e035      	b.n	80039da <parsing_data+0x1d6>
				case 9:
					send_data.one = 0x01;   // отправить ок
 800396e:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <parsing_data+0x1e8>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
					form_send_byte(STOP_MOTOR, 1);
 8003974:	2101      	movs	r1, #1
 8003976:	2009      	movs	r0, #9
 8003978:	f000 f87c 	bl	8003a74 <form_send_byte>
					stop_motor();           // остановить моторы
 800397c:	f7ff f8c2 	bl	8002b04 <stop_motor>
					break;
 8003980:	e02b      	b.n	80039da <parsing_data+0x1d6>
				case 10:
					send_data.one = VERSIONS; // отправить версию
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <parsing_data+0x1e8>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]
					form_send_byte(VERSION, 1);
 8003988:	2101      	movs	r1, #1
 800398a:	200a      	movs	r0, #10
 800398c:	f000 f872 	bl	8003a74 <form_send_byte>
					break;
 8003990:	e023      	b.n	80039da <parsing_data+0x1d6>
				case 11:
					send_data.one = set_pid(make_32bit(husart2.rx_buffer + 3));
 8003992:	4b17      	ldr	r3, [pc, #92]	; (80039f0 <parsing_data+0x1ec>)
 8003994:	0018      	movs	r0, r3
 8003996:	f000 f8eb 	bl	8003b70 <make_32bit>
 800399a:	0003      	movs	r3, r0
 800399c:	0018      	movs	r0, r3
 800399e:	f000 fcf1 	bl	8004384 <set_pid>
 80039a2:	0002      	movs	r2, r0
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <parsing_data+0x1e8>)
 80039a6:	601a      	str	r2, [r3, #0]
					form_send_byte(NEW_PID, 1);
 80039a8:	2101      	movs	r1, #1
 80039aa:	200b      	movs	r0, #11
 80039ac:	f000 f862 	bl	8003a74 <form_send_byte>
					break;
 80039b0:	e013      	b.n	80039da <parsing_data+0x1d6>
				case 12:
					send_data.one = 0x01;
 80039b2:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <parsing_data+0x1e8>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
					form_send_byte(RESTARTS, 1);
 80039b8:	2101      	movs	r1, #1
 80039ba:	200c      	movs	r0, #12
 80039bc:	f000 f85a 	bl	8003a74 <form_send_byte>
					while (1);
 80039c0:	e7fe      	b.n	80039c0 <parsing_data+0x1bc>
					break;
				}
			} else {                                       // если не совпал срс
				send_data.one = 0x00;   // отправить не ок
 80039c2:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <parsing_data+0x1e8>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
				form_send_byte(husart2.rx_buffer[2], 0);
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <parsing_data+0x1dc>)
 80039ca:	2222      	movs	r2, #34	; 0x22
 80039cc:	5c9b      	ldrb	r3, [r3, r2]
 80039ce:	2100      	movs	r1, #0
 80039d0:	0018      	movs	r0, r3
 80039d2:	f000 f84f 	bl	8003a74 <form_send_byte>
			}
		}
	}
}
 80039d6:	e000      	b.n	80039da <parsing_data+0x1d6>
					break;
 80039d8:	46c0      	nop			; (mov r8, r8)
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	bdb0      	pop	{r4, r5, r7, pc}
 80039e0:	20000090 	.word	0x20000090
 80039e4:	200000b0 	.word	0x200000b0
 80039e8:	080045e4 	.word	0x080045e4
 80039ec:	200000d4 	.word	0x200000d4
 80039f0:	200000b3 	.word	0x200000b3
 80039f4:	200000b7 	.word	0x200000b7

080039f8 <read_flag>:

uint32_t read_flag(void) {           // считем отдельные флаги в одну переменную
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
	data = point_flags->ir_filter;
 8003a02:	4b1a      	ldr	r3, [pc, #104]	; (8003a6c <read_flag+0x74>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	061b      	lsls	r3, r3, #24
 8003a0a:	0fdb      	lsrs	r3, r3, #31
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	607b      	str	r3, [r7, #4]
	data |= point_flags->iris_drive << 1;
 8003a10:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <read_flag+0x74>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	785b      	ldrb	r3, [r3, #1]
 8003a16:	07db      	lsls	r3, r3, #31
 8003a18:	0fdb      	lsrs	r3, r3, #31
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	001a      	movs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	607b      	str	r3, [r7, #4]
	//data |= point_flags->set_led << 2;        //??
	if (READ_MOTOR1)
 8003a26:	2390      	movs	r3, #144	; 0x90
 8003a28:	05db      	lsls	r3, r3, #23
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	019b      	lsls	r3, r3, #6
 8003a30:	4013      	ands	r3, r2
 8003a32:	d003      	beq.n	8003a3c <read_flag+0x44>
		data |= 1 << 3;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2208      	movs	r2, #8
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	607b      	str	r3, [r7, #4]
	if (READ_MOTOR2)
 8003a3c:	2390      	movs	r3, #144	; 0x90
 8003a3e:	05db      	lsls	r3, r3, #23
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	2380      	movs	r3, #128	; 0x80
 8003a44:	01db      	lsls	r3, r3, #7
 8003a46:	4013      	ands	r3, r2
 8003a48:	d003      	beq.n	8003a52 <read_flag+0x5a>
		data |= 1 << 4;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	607b      	str	r3, [r7, #4]
	data |= pid_param << 5;
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <read_flag+0x78>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	015b      	lsls	r3, r3, #5
 8003a58:	001a      	movs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	607b      	str	r3, [r7, #4]
	return data;
 8003a60:	687b      	ldr	r3, [r7, #4]
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b002      	add	sp, #8
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	2000001c 	.word	0x2000001c

08003a74 <form_send_byte>:

void form_send_byte(uint8_t number_send, uint8_t num_byte) { // функция для формирования ответа. указываем количество 32байтных данных для отправки
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	0002      	movs	r2, r0
 8003a7c:	1dfb      	adds	r3, r7, #7
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	1dbb      	adds	r3, r7, #6
 8003a82:	1c0a      	adds	r2, r1, #0
 8003a84:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[0] = 0x02;        // начало посылки
 8003a86:	4b38      	ldr	r3, [pc, #224]	; (8003b68 <form_send_byte+0xf4>)
 8003a88:	2202      	movs	r2, #2
 8003a8a:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[1] = num_byte;    // сколько полезных данных
 8003a8c:	4b36      	ldr	r3, [pc, #216]	; (8003b68 <form_send_byte+0xf4>)
 8003a8e:	1dba      	adds	r2, r7, #6
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	705a      	strb	r2, [r3, #1]
	husart2.tx_buffer[2] = number_send; // номер посылки (ее смысл)
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <form_send_byte+0xf4>)
 8003a96:	1dfa      	adds	r2, r7, #7
 8003a98:	7812      	ldrb	r2, [r2, #0]
 8003a9a:	709a      	strb	r2, [r3, #2]
	divide_32bit(send_data.one, 3);     // раскладываем переменную в буфер
 8003a9c:	4b33      	ldr	r3, [pc, #204]	; (8003b6c <form_send_byte+0xf8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2103      	movs	r1, #3
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 f890 	bl	8003bc8 <divide_32bit>
	switch (num_byte) {
 8003aa8:	1dbb      	adds	r3, r7, #6
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d03b      	beq.n	8003b28 <form_send_byte+0xb4>
 8003ab0:	dc55      	bgt.n	8003b5e <form_send_byte+0xea>
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d023      	beq.n	8003afe <form_send_byte+0x8a>
 8003ab6:	dc52      	bgt.n	8003b5e <form_send_byte+0xea>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <form_send_byte+0x4e>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d00f      	beq.n	8003ae0 <form_send_byte+0x6c>
		divide_32bit(send_data.three, 11);
		husart2.tx_buffer[15] = calcCRC(15, husart2.tx_buffer);
		UART2_transmit(16, husart2.tx_buffer);
		break;
	}
}
 8003ac0:	e04d      	b.n	8003b5e <form_send_byte+0xea>
		husart2.tx_buffer[3] = calcCRC(3, husart2.tx_buffer);
 8003ac2:	4b29      	ldr	r3, [pc, #164]	; (8003b68 <form_send_byte+0xf4>)
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	2003      	movs	r0, #3
 8003ac8:	f000 f8fe 	bl	8003cc8 <calcCRC>
 8003acc:	0003      	movs	r3, r0
 8003ace:	001a      	movs	r2, r3
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <form_send_byte+0xf4>)
 8003ad2:	70da      	strb	r2, [r3, #3]
		UART2_transmit(4, husart2.tx_buffer);
 8003ad4:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <form_send_byte+0xf4>)
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	2004      	movs	r0, #4
 8003ada:	f7ff fdd7 	bl	800368c <UART2_transmit>
		break;
 8003ade:	e03e      	b.n	8003b5e <form_send_byte+0xea>
		husart2.tx_buffer[7] = calcCRC(7, husart2.tx_buffer);
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <form_send_byte+0xf4>)
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	2007      	movs	r0, #7
 8003ae6:	f000 f8ef 	bl	8003cc8 <calcCRC>
 8003aea:	0003      	movs	r3, r0
 8003aec:	001a      	movs	r2, r3
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <form_send_byte+0xf4>)
 8003af0:	71da      	strb	r2, [r3, #7]
		UART2_transmit(8, husart2.tx_buffer);
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <form_send_byte+0xf4>)
 8003af4:	0019      	movs	r1, r3
 8003af6:	2008      	movs	r0, #8
 8003af8:	f7ff fdc8 	bl	800368c <UART2_transmit>
		break;
 8003afc:	e02f      	b.n	8003b5e <form_send_byte+0xea>
		divide_32bit(send_data.two, 7);
 8003afe:	4b1b      	ldr	r3, [pc, #108]	; (8003b6c <form_send_byte+0xf8>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2107      	movs	r1, #7
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 f85f 	bl	8003bc8 <divide_32bit>
		husart2.tx_buffer[11] = calcCRC(11, husart2.tx_buffer);
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <form_send_byte+0xf4>)
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	200b      	movs	r0, #11
 8003b10:	f000 f8da 	bl	8003cc8 <calcCRC>
 8003b14:	0003      	movs	r3, r0
 8003b16:	001a      	movs	r2, r3
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <form_send_byte+0xf4>)
 8003b1a:	72da      	strb	r2, [r3, #11]
		UART2_transmit(12, husart2.tx_buffer);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <form_send_byte+0xf4>)
 8003b1e:	0019      	movs	r1, r3
 8003b20:	200c      	movs	r0, #12
 8003b22:	f7ff fdb3 	bl	800368c <UART2_transmit>
		break;
 8003b26:	e01a      	b.n	8003b5e <form_send_byte+0xea>
		divide_32bit(send_data.two, 7);
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <form_send_byte+0xf8>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2107      	movs	r1, #7
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f84a 	bl	8003bc8 <divide_32bit>
		divide_32bit(send_data.three, 11);
 8003b34:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <form_send_byte+0xf8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	210b      	movs	r1, #11
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f844 	bl	8003bc8 <divide_32bit>
		husart2.tx_buffer[15] = calcCRC(15, husart2.tx_buffer);
 8003b40:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <form_send_byte+0xf4>)
 8003b42:	0019      	movs	r1, r3
 8003b44:	200f      	movs	r0, #15
 8003b46:	f000 f8bf 	bl	8003cc8 <calcCRC>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	001a      	movs	r2, r3
 8003b4e:	4b06      	ldr	r3, [pc, #24]	; (8003b68 <form_send_byte+0xf4>)
 8003b50:	73da      	strb	r2, [r3, #15]
		UART2_transmit(16, husart2.tx_buffer);
 8003b52:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <form_send_byte+0xf4>)
 8003b54:	0019      	movs	r1, r3
 8003b56:	2010      	movs	r0, #16
 8003b58:	f7ff fd98 	bl	800368c <UART2_transmit>
		break;
 8003b5c:	46c0      	nop			; (mov r8, r8)
}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b002      	add	sp, #8
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	20000090 	.word	0x20000090
 8003b6c:	200000d4 	.word	0x200000d4

08003b70 <make_32bit>:

uint32_t make_32bit(uint8_t *start_num) { // собрать 32битную переменную из буфера
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
	data = *start_num << 24;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	061b      	lsls	r3, r3, #24
 8003b82:	60fb      	str	r3, [r7, #12]
	start_num++;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
	data |= *start_num << 16;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	001a      	movs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
	start_num++;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	607b      	str	r3, [r7, #4]
	data |= *start_num  << 8;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
	start_num++;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
	data |= *start_num ;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
	return data;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
}
 8003bc0:	0018      	movs	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b004      	add	sp, #16
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <divide_32bit>:

void divide_32bit(uint32_t data, uint8_t start_num) { // разложить 32битную переменную в буфер
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	000a      	movs	r2, r1
 8003bd2:	1cfb      	adds	r3, r7, #3
 8003bd4:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[start_num] = data >> 24;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	0e1a      	lsrs	r2, r3, #24
 8003bda:	1cfb      	adds	r3, r7, #3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	b2d1      	uxtb	r1, r2
 8003be0:	4a0e      	ldr	r2, [pc, #56]	; (8003c1c <divide_32bit+0x54>)
 8003be2:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 1] = data >> 16;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0c1a      	lsrs	r2, r3, #16
 8003be8:	1cfb      	adds	r3, r7, #3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	b2d1      	uxtb	r1, r2
 8003bf0:	4a0a      	ldr	r2, [pc, #40]	; (8003c1c <divide_32bit+0x54>)
 8003bf2:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 2] = data >> 8;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	0a1a      	lsrs	r2, r3, #8
 8003bf8:	1cfb      	adds	r3, r7, #3
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	b2d1      	uxtb	r1, r2
 8003c00:	4a06      	ldr	r2, [pc, #24]	; (8003c1c <divide_32bit+0x54>)
 8003c02:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 3] = data;
 8003c04:	1cfb      	adds	r3, r7, #3
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	b2d1      	uxtb	r1, r2
 8003c0e:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <divide_32bit+0x54>)
 8003c10:	54d1      	strb	r1, [r2, r3]
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b002      	add	sp, #8
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			; (mov r8, r8)
 8003c1c:	20000090 	.word	0x20000090

08003c20 <swuart_calcCRC>:

void swuart_calcCRC(uint8_t *datagram, uint8_t datagramLength) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	000a      	movs	r2, r1
 8003c2a:	1cfb      	adds	r3, r7, #3
 8003c2c:	701a      	strb	r2, [r3, #0]
	int i, j;
	uint8_t *crc = datagram + (datagramLength - 1); // CRC located in last byte of message
 8003c2e:	1cfb      	adds	r3, r7, #3
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	18d3      	adds	r3, r2, r3
 8003c38:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagramLength - 1); i++) { // Execute for all bytes of a message
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e035      	b.n	8003cb2 <swuart_calcCRC+0x92>
		currentByte = datagram[i]; // Retrieve a byte to be sent from Array
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	18d2      	adds	r2, r2, r3
 8003c4c:	230f      	movs	r3, #15
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	7812      	ldrb	r2, [r2, #0]
 8003c52:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e025      	b.n	8003ca6 <swuart_calcCRC+0x86>
			if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	09db      	lsrs	r3, r3, #7
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	0019      	movs	r1, r3
 8003c64:	230f      	movs	r3, #15
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	d00a      	beq.n	8003c88 <swuart_calcCRC+0x68>
					{
				*crc = (*crc << 1) ^ 0x07;
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	b25b      	sxtb	r3, r3
 8003c7a:	2207      	movs	r2, #7
 8003c7c:	4053      	eors	r3, r2
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	701a      	strb	r2, [r3, #0]
 8003c86:	e005      	b.n	8003c94 <swuart_calcCRC+0x74>
			} else {
				*crc = (*crc << 1);
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	18db      	adds	r3, r3, r3
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	701a      	strb	r2, [r3, #0]
			}
			currentByte = currentByte >> 1;
 8003c94:	220f      	movs	r2, #15
 8003c96:	18bb      	adds	r3, r7, r2
 8003c98:	18ba      	adds	r2, r7, r2
 8003c9a:	7812      	ldrb	r2, [r2, #0]
 8003c9c:	0852      	lsrs	r2, r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b07      	cmp	r3, #7
 8003caa:	ddd6      	ble.n	8003c5a <swuart_calcCRC+0x3a>
	for (i = 0; i < (datagramLength - 1); i++) { // Execute for all bytes of a message
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	1cfb      	adds	r3, r7, #3
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	dbc3      	blt.n	8003c46 <swuart_calcCRC+0x26>
		} // for CRC bit
	} // for message byte
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b006      	add	sp, #24
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <calcCRC>:

uint8_t calcCRC(uint8_t len, uint8_t *buf) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	0002      	movs	r2, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
 8003cd6:	230f      	movs	r3, #15
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8003cde:	2300      	movs	r3, #0
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	e00c      	b.n	8003cfe <calcCRC+0x36>
		r -= buf[i];
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	18d3      	adds	r3, r2, r3
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	210f      	movs	r1, #15
 8003cee:	187b      	adds	r3, r7, r1
 8003cf0:	1879      	adds	r1, r7, r1
 8003cf2:	7809      	ldrb	r1, [r1, #0]
 8003cf4:	1a8a      	subs	r2, r1, r2
 8003cf6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	1dfb      	adds	r3, r7, #7
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	dbed      	blt.n	8003ce4 <calcCRC+0x1c>
	}
	r &= 0x7F;
 8003d08:	200f      	movs	r0, #15
 8003d0a:	183b      	adds	r3, r7, r0
 8003d0c:	183a      	adds	r2, r7, r0
 8003d0e:	7812      	ldrb	r2, [r2, #0]
 8003d10:	217f      	movs	r1, #127	; 0x7f
 8003d12:	400a      	ands	r2, r1
 8003d14:	701a      	strb	r2, [r3, #0]
	if (r < 0x21) {
 8003d16:	183b      	adds	r3, r7, r0
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b20      	cmp	r3, #32
 8003d1c:	d804      	bhi.n	8003d28 <calcCRC+0x60>
		r += 0x21;
 8003d1e:	183b      	adds	r3, r7, r0
 8003d20:	183a      	adds	r2, r7, r0
 8003d22:	7812      	ldrb	r2, [r2, #0]
 8003d24:	3221      	adds	r2, #33	; 0x21
 8003d26:	701a      	strb	r2, [r3, #0]
	}
#ifdef DEBUG_MODE
     return 1;
 8003d28:	2301      	movs	r3, #1
#endif
	return r;
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b004      	add	sp, #16
 8003d30:	bd80      	pop	{r7, pc}
	...

08003d34 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
	if (READ_BIT(USART1->ISR, USART_ISR_TXE)) {
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2280      	movs	r2, #128	; 0x80
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d020      	beq.n	8003d84 <USART1_IRQHandler+0x50>
		if (husart1.tx_size > husart1.tx_counter) {
 8003d42:	4b26      	ldr	r3, [pc, #152]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d44:	7eda      	ldrb	r2, [r3, #27]
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d48:	7e5b      	ldrb	r3, [r3, #25]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d90e      	bls.n	8003d6c <USART1_IRQHandler+0x38>
			USART1->TDR = husart1.tx_buffer[husart1.tx_counter];
 8003d4e:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d50:	7e5b      	ldrb	r3, [r3, #25]
 8003d52:	001a      	movs	r2, r3
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d56:	5c9a      	ldrb	r2, [r3, r2]
 8003d58:	4b1f      	ldr	r3, [pc, #124]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003d5a:	b292      	uxth	r2, r2
 8003d5c:	851a      	strh	r2, [r3, #40]	; 0x28
			husart1.tx_counter++;
 8003d5e:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d60:	7e5b      	ldrb	r3, [r3, #25]
 8003d62:	3301      	adds	r3, #1
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d68:	765a      	strb	r2, [r3, #25]
 8003d6a:	e00b      	b.n	8003d84 <USART1_IRQHandler+0x50>
		} else {
			CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE);
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b19      	ldr	r3, [pc, #100]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	438a      	bics	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
			husart1.tx_counter = 0;
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	765a      	strb	r2, [r3, #25]
			husart1.tx_size = 0;
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	76da      	strb	r2, [r3, #27]
		}
	}

	if (READ_BIT(USART1->ISR, USART_ISR_RXNE)) {   //Если пришли данные по USART
 8003d84:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d016      	beq.n	8003dbc <USART1_IRQHandler+0x88>
		husart1.rx_buffer[husart1.rx_counter] = USART1->RDR; //Считаем данные в соответствующую ячейку в rx_buffer
 8003d8e:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003d90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d96:	7e9b      	ldrb	r3, [r3, #26]
 8003d98:	0019      	movs	r1, r3
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003d9e:	185b      	adds	r3, r3, r1
 8003da0:	729a      	strb	r2, [r3, #10]
		husart1.rx_counter++;              //Увеличим счетчик принятых байт на 1
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003da4:	7e9b      	ldrb	r3, [r3, #26]
 8003da6:	3301      	adds	r3, #1
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003dac:	769a      	strb	r2, [r3, #26]
		if (husart1.rx_counter > 14)
 8003dae:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003db0:	7e9b      	ldrb	r3, [r3, #26]
 8003db2:	2b0e      	cmp	r3, #14
 8003db4:	d902      	bls.n	8003dbc <USART1_IRQHandler+0x88>
			husart1.rx_counter = 0;
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <USART1_IRQHandler+0xa8>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	769a      	strb	r2, [r3, #26]
	}
	if (READ_BIT(USART1->ISR, USART_ISR_ORE)) {       //Если прилетел флаг OVRN
 8003dbc:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d005      	beq.n	8003dd2 <USART1_IRQHandler+0x9e>
		SET_BIT(USART1->ICR, USART_ICR_ORECF);              //Сбросим флаг OVRN
 8003dc6:	4b04      	ldr	r3, [pc, #16]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003dc8:	6a1a      	ldr	r2, [r3, #32]
 8003dca:	4b03      	ldr	r3, [pc, #12]	; (8003dd8 <USART1_IRQHandler+0xa4>)
 8003dcc:	2108      	movs	r1, #8
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	621a      	str	r2, [r3, #32]
	/*if (READ_BIT(USART1->ISR, USART_ISR_IDLE)) {       //Если прилетел флаг IDLE
		SET_BIT(USART1->ICR, USART_ICR_IDLECF);              //Сбросим флаг IDLE
		husart1.rx_ok = 1;
		husart1.rx_counter = 0;              //сбросим счетчик приходящих данных
	}*/
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40013800 	.word	0x40013800
 8003ddc:	20000070 	.word	0x20000070

08003de0 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	af00      	add	r7, sp, #0
	if (READ_BIT(USART2->ISR, USART_ISR_TXE)) {
 8003de4:	4b38      	ldr	r3, [pc, #224]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	2280      	movs	r2, #128	; 0x80
 8003dea:	4013      	ands	r3, r2
 8003dec:	d027      	beq.n	8003e3e <USART2_IRQHandler+0x5e>
		if (husart2.tx_size > husart2.tx_counter) {
 8003dee:	4b37      	ldr	r3, [pc, #220]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003df0:	2242      	movs	r2, #66	; 0x42
 8003df2:	5c9a      	ldrb	r2, [r3, r2]
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003df6:	2140      	movs	r1, #64	; 0x40
 8003df8:	5c5b      	ldrb	r3, [r3, r1]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d911      	bls.n	8003e22 <USART2_IRQHandler+0x42>
			USART2->TDR = husart2.tx_buffer[husart2.tx_counter];
 8003dfe:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e00:	2240      	movs	r2, #64	; 0x40
 8003e02:	5c9b      	ldrb	r3, [r3, r2]
 8003e04:	001a      	movs	r2, r3
 8003e06:	4b31      	ldr	r3, [pc, #196]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e08:	5c9a      	ldrb	r2, [r3, r2]
 8003e0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e0c:	b292      	uxth	r2, r2
 8003e0e:	851a      	strh	r2, [r3, #40]	; 0x28
			husart2.tx_counter++;
 8003e10:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e12:	2240      	movs	r2, #64	; 0x40
 8003e14:	5c9b      	ldrb	r3, [r3, r2]
 8003e16:	3301      	adds	r3, #1
 8003e18:	b2d9      	uxtb	r1, r3
 8003e1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e1c:	2240      	movs	r2, #64	; 0x40
 8003e1e:	5499      	strb	r1, [r3, r2]
 8003e20:	e00d      	b.n	8003e3e <USART2_IRQHandler+0x5e>
		} else {
			USART2->CR1 &= ~USART_CR1_TXEIE;      // сбросим прерывание
 8003e22:	4b29      	ldr	r3, [pc, #164]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b28      	ldr	r3, [pc, #160]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	438a      	bics	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
			husart2.tx_counter = 0;
 8003e2e:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e30:	2240      	movs	r2, #64	; 0x40
 8003e32:	2100      	movs	r1, #0
 8003e34:	5499      	strb	r1, [r3, r2]
			husart2.tx_size = 0;
 8003e36:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e38:	2242      	movs	r2, #66	; 0x42
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]
		}
	}
	if (READ_BIT(USART2->ISR, USART_ISR_RXNE)) {   //Если пришли данные по USART
 8003e3e:	4b22      	ldr	r3, [pc, #136]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	2220      	movs	r2, #32
 8003e44:	4013      	ands	r3, r2
 8003e46:	d01e      	beq.n	8003e86 <USART2_IRQHandler+0xa6>
		husart2.rx_buffer[husart2.rx_counter] = USART2->RDR; //Считаем данные в соответствующую ячейку в rx_buffer
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e4c:	b299      	uxth	r1, r3
 8003e4e:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e50:	2241      	movs	r2, #65	; 0x41
 8003e52:	5c9b      	ldrb	r3, [r3, r2]
 8003e54:	0018      	movs	r0, r3
 8003e56:	b2c9      	uxtb	r1, r1
 8003e58:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	181b      	adds	r3, r3, r0
 8003e5e:	189b      	adds	r3, r3, r2
 8003e60:	1c0a      	adds	r2, r1, #0
 8003e62:	701a      	strb	r2, [r3, #0]
		husart2.rx_counter++;              //Увеличим счетчик принятых байт на 1
 8003e64:	4b19      	ldr	r3, [pc, #100]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e66:	2241      	movs	r2, #65	; 0x41
 8003e68:	5c9b      	ldrb	r3, [r3, r2]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	b2d9      	uxtb	r1, r3
 8003e6e:	4b17      	ldr	r3, [pc, #92]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e70:	2241      	movs	r2, #65	; 0x41
 8003e72:	5499      	strb	r1, [r3, r2]
		if (husart2.rx_counter > 31)
 8003e74:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e76:	2241      	movs	r2, #65	; 0x41
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	2b1f      	cmp	r3, #31
 8003e7c:	d903      	bls.n	8003e86 <USART2_IRQHandler+0xa6>
			husart2.rx_counter = 0;
 8003e7e:	4b13      	ldr	r3, [pc, #76]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e80:	2241      	movs	r2, #65	; 0x41
 8003e82:	2100      	movs	r1, #0
 8003e84:	5499      	strb	r1, [r3, r2]
	}
	if (READ_BIT(USART2->ISR, USART_ISR_IDLE)) {       //Если прилетел флаг IDLE
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	2210      	movs	r2, #16
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d00d      	beq.n	8003eac <USART2_IRQHandler+0xcc>
		SET_BIT(USART2->ICR, USART_ICR_IDLECF);              //Сбросим флаг IDLE
 8003e90:	4b0d      	ldr	r3, [pc, #52]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e92:	6a1a      	ldr	r2, [r3, #32]
 8003e94:	4b0c      	ldr	r3, [pc, #48]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003e96:	2110      	movs	r1, #16
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	621a      	str	r2, [r3, #32]
		husart2.rx_ok = 1;
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003e9e:	2243      	movs	r2, #67	; 0x43
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	5499      	strb	r1, [r3, r2]
		husart2.rx_counter = 0;              //сбросим счетчик приходящих данных
 8003ea4:	4b09      	ldr	r3, [pc, #36]	; (8003ecc <USART2_IRQHandler+0xec>)
 8003ea6:	2241      	movs	r2, #65	; 0x41
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	5499      	strb	r1, [r3, r2]
	}
	if (READ_BIT(USART2->ISR, USART_ISR_ORE)) {       //Если прилетел флаг OVRN
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	2208      	movs	r2, #8
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d005      	beq.n	8003ec2 <USART2_IRQHandler+0xe2>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);              //Сбросим флаг OVRN
 8003eb6:	4b04      	ldr	r3, [pc, #16]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	4b03      	ldr	r3, [pc, #12]	; (8003ec8 <USART2_IRQHandler+0xe8>)
 8003ebc:	2108      	movs	r1, #8
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	621a      	str	r2, [r3, #32]
	}
}
 8003ec2:	46c0      	nop			; (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40004400 	.word	0x40004400
 8003ecc:	20000090 	.word	0x20000090

08003ed0 <main>:
uint8_t pid_param = 40;

volatile uint32_t count = 0;
uint8_t flg = 0;

int main(void) {
 8003ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af04      	add	r7, sp, #16
	init_rcc();                              // 48Мгц
 8003ed6:	f7fe fb53 	bl	8002580 <init_rcc>
	CMSIS_SysTick_Timer_init();              // систик
 8003eda:	f7fe fbd1 	bl	8002680 <CMSIS_SysTick_Timer_init>
	init_pins();                             // пины
 8003ede:	f7fe fd83 	bl	80029e8 <init_pins>
	init_tim17(3, 10000);                    // настройка таймера делитель + счетчик
 8003ee2:	4b5b      	ldr	r3, [pc, #364]	; (8004050 <main+0x180>)
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	2003      	movs	r0, #3
 8003ee8:	f7fe fd10 	bl	800290c <init_tim17>
	init_tim16(3, 10000);                    // настройка таймера делитель + счетчик
 8003eec:	4b58      	ldr	r3, [pc, #352]	; (8004050 <main+0x180>)
 8003eee:	0019      	movs	r1, r3
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	f7fe fd45 	bl	8002980 <init_tim16>
	init_Uart1 (115200);                     // юарт ТМС
 8003ef6:	23e1      	movs	r3, #225	; 0xe1
 8003ef8:	025b      	lsls	r3, r3, #9
 8003efa:	0018      	movs	r0, r3
 8003efc:	f7ff fac0 	bl	8003480 <init_Uart1>
	ADC_init();                              // АЦП + ДМА
 8003f00:	f7fe f9d2 	bl	80022a8 <ADC_init>
	EN_ON;                                   // включить разрешить работу драйверов
 8003f04:	4b53      	ldr	r3, [pc, #332]	; (8004054 <main+0x184>)
 8003f06:	699a      	ldr	r2, [r3, #24]
 8003f08:	4b52      	ldr	r3, [pc, #328]	; (8004054 <main+0x184>)
 8003f0a:	2102      	movs	r1, #2
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	619a      	str	r2, [r3, #24]
#ifndef DEBUG_MODE
    Delay_ms(4000);                          // это чтоб можно было ножки программирования схватить
    init_debug_pin ();                       // настроить пины программирования на выход
#endif
    Delay_ms(300);
 8003f10:	2396      	movs	r3, #150	; 0x96
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	0018      	movs	r0, r3
 8003f16:	f7fe fc9b 	bl	8002850 <Delay_ms>
    setting_TMC230();                        // отправим настройки ТМС
 8003f1a:	f7ff fc45 	bl	80037a8 <setting_TMC230>
    init_struct();                           // инициализация данных в структуре, чтоб правильно шагать
 8003f1e:	f7ff f96b 	bl	80031f8 <init_struct>
    stepper (9000, 0);                       // улетим в крайнюю точку чтоб от нее искать 0
 8003f22:	4b4d      	ldr	r3, [pc, #308]	; (8004058 <main+0x188>)
 8003f24:	2100      	movs	r1, #0
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7ff f8b0 	bl	800308c <stepper>
    stepper (9000, 1);                       // улетим в крайнюю точку чтоб от нее искать 0
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <main+0x188>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7ff f8ab 	bl	800308c <stepper>
    Delay_ms(4000);
 8003f36:	23fa      	movs	r3, #250	; 0xfa
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	f7fe fc88 	bl	8002850 <Delay_ms>
    search_steps ();                         // поиск от крайней точки до отключения концевика
 8003f40:	f7ff f9d8 	bl	80032f4 <search_steps>
    Delay_ms(6000);
 8003f44:	4b45      	ldr	r3, [pc, #276]	; (800405c <main+0x18c>)
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fe fc82 	bl	8002850 <Delay_ms>
    stepper (-5000, 0);                      // улетим в крайнюю точку чтоб от нее искать 0
 8003f4c:	4b44      	ldr	r3, [pc, #272]	; (8004060 <main+0x190>)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7ff f89b 	bl	800308c <stepper>
    stepper (-5000, 1);                      // улетим в крайнюю точку чтоб от нее искать 0
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <main+0x190>)
 8003f58:	2101      	movs	r1, #1
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7ff f896 	bl	800308c <stepper>
    Delay_ms(4000);                          // ждем пока едет
 8003f60:	23fa      	movs	r3, #250	; 0xfa
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7fe fc73 	bl	8002850 <Delay_ms>
    zero_position();                         // ищем ноль
 8003f6a:	f7ff f987 	bl	800327c <zero_position>
    Delay_ms(4000);                          // ждем, это для того чтоб с той же скоростью искало 0
 8003f6e:	23fa      	movs	r3, #250	; 0xfa
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	0018      	movs	r0, r3
 8003f74:	f7fe fc6c 	bl	8002850 <Delay_ms>
    init_flash_data() ;                      // запишем все переменные из флеша в используемые ячейки (скорость, шаг)
 8003f78:	f7fe fa5a 	bl	8002430 <init_flash_data>
    init_tim3 ();                            // инит таймера 3 для шима
 8003f7c:	f7fe fc7c 	bl	8002878 <init_tim3>
	husart1.rx_counter = 0;                  // сбросим счетчик чтоб точно началось с 0 байта запись
 8003f80:	4b38      	ldr	r3, [pc, #224]	; (8004064 <main+0x194>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	769a      	strb	r2, [r3, #26]
	read_TMC2300 (0, 0x6A);                  // чтоб понять в каком положении был двигатель и инициализировать его
 8003f86:	216a      	movs	r1, #106	; 0x6a
 8003f88:	2000      	movs	r0, #0
 8003f8a:	f7ff fbe9 	bl	8003760 <read_TMC2300>
    Delay_ms(4);
 8003f8e:	2004      	movs	r0, #4
 8003f90:	f7fe fc5e 	bl	8002850 <Delay_ms>
    check_iris (husart1.rx_buffer[9]);       // проверить в какой позиции сейчас шторка
 8003f94:	4b33      	ldr	r3, [pc, #204]	; (8004064 <main+0x194>)
 8003f96:	7cdb      	ldrb	r3, [r3, #19]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f000 f8f1 	bl	8004180 <check_iris>
    init_wdt ();                             // инициализация вач дога
 8003f9e:	f7fe fb5d 	bl	800265c <init_wdt>
    init_Uart2 (57600);                      // юарт Малинка
 8003fa2:	23e1      	movs	r3, #225	; 0xe1
 8003fa4:	021b      	lsls	r3, r3, #8
 8003fa6:	0018      	movs	r0, r3
 8003fa8:	f7ff fac2 	bl	8003530 <init_Uart2>

   //const uint16_t  FLASH_SIZE = (*((uint16_t*)FLASHSIZE_BASE)) << 10;   // размер памяти узнать

	for(;;){
		iwdt_reset();                          // сбросить ватч дог
 8003fac:	f7fe fb5c 	bl	8002668 <iwdt_reset>
		/*if (point_flags->dma_ok){            // если сработало ДМА то можно фильтровать значения
			point_flags->dma_ok = FALSE;
			filtr_adc ();
		}*/
		if (!point_flags->zero_in_programm) parsing_data();    // обработать данные с юарта только когда не обнуляемся
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <main+0x198>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	789b      	ldrb	r3, [r3, #2]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	4013      	ands	r3, r2
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <main+0xf4>
 8003fc0:	f7ff fc20 	bl	8003804 <parsing_data>
		if (point_flags->reset_setting) {                      // вернуть в исходное положение настройки скорости и шага после обнуления
 8003fc4:	4b28      	ldr	r3, [pc, #160]	; (8004068 <main+0x198>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	789b      	ldrb	r3, [r3, #2]
 8003fca:	2204      	movs	r2, #4
 8003fcc:	4013      	ands	r3, r2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <main+0x114>
			point_flags->reset_setting = FALSE;
 8003fd4:	4b24      	ldr	r3, [pc, #144]	; (8004068 <main+0x198>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	789a      	ldrb	r2, [r3, #2]
 8003fda:	2104      	movs	r1, #4
 8003fdc:	438a      	bics	r2, r1
 8003fde:	709a      	strb	r2, [r3, #2]
			init_flash_data ();                                // вернуть настройку скорости
 8003fe0:	f7fe fa26 	bl	8002430 <init_flash_data>
		}
		if (point_flags->pid_ok) {                             // если сработал флаг ПИД
 8003fe4:	4b20      	ldr	r3, [pc, #128]	; (8004068 <main+0x198>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	789b      	ldrb	r3, [r3, #2]
 8003fea:	2210      	movs	r2, #16
 8003fec:	4013      	ands	r3, r2
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d029      	beq.n	8004048 <main+0x178>
			point_flags->pid_ok = FALSE;
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <main+0x198>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	789a      	ldrb	r2, [r3, #2]
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	438a      	bics	r2, r1
 8003ffe:	709a      	strb	r2, [r3, #2]
			TIM3->CCR1 = computePID (adc_buf[1], open, kp, ki, kd, 0.02, min, max);
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <main+0x19c>)
 8004002:	885b      	ldrh	r3, [r3, #2]
 8004004:	0018      	movs	r0, r3
 8004006:	f7fe f8ef 	bl	80021e8 <__aeabi_ui2f>
 800400a:	1c06      	adds	r6, r0, #0
 800400c:	4b18      	ldr	r3, [pc, #96]	; (8004070 <main+0x1a0>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	0018      	movs	r0, r3
 8004012:	f7fe f89b 	bl	800214c <__aeabi_i2f>
 8004016:	4684      	mov	ip, r0
 8004018:	4b16      	ldr	r3, [pc, #88]	; (8004074 <main+0x1a4>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <main+0x1a8>)
 800401e:	681d      	ldr	r5, [r3, #0]
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <main+0x1ac>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <main+0x1b0>)
 8004026:	6819      	ldr	r1, [r3, #0]
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <main+0x1b4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4c16      	ldr	r4, [pc, #88]	; (8004088 <main+0x1b8>)
 800402e:	9303      	str	r3, [sp, #12]
 8004030:	9102      	str	r1, [sp, #8]
 8004032:	4b16      	ldr	r3, [pc, #88]	; (800408c <main+0x1bc>)
 8004034:	9301      	str	r3, [sp, #4]
 8004036:	9200      	str	r2, [sp, #0]
 8004038:	1c2b      	adds	r3, r5, #0
 800403a:	1c02      	adds	r2, r0, #0
 800403c:	4661      	mov	r1, ip
 800403e:	1c30      	adds	r0, r6, #0
 8004040:	f000 f90c 	bl	800425c <computePID>
 8004044:	0003      	movs	r3, r0
 8004046:	6363      	str	r3, [r4, #52]	; 0x34
		}
		check_mov ();
 8004048:	f000 f822 	bl	8004090 <check_mov>
		iwdt_reset();                          // сбросить ватч дог
 800404c:	e7ae      	b.n	8003fac <main+0xdc>
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	00002710 	.word	0x00002710
 8004054:	48000400 	.word	0x48000400
 8004058:	00002328 	.word	0x00002328
 800405c:	00001770 	.word	0x00001770
 8004060:	ffffec78 	.word	0xffffec78
 8004064:	20000070 	.word	0x20000070
 8004068:	20000000 	.word	0x20000000
 800406c:	2000003c 	.word	0x2000003c
 8004070:	20000010 	.word	0x20000010
 8004074:	20000004 	.word	0x20000004
 8004078:	20000008 	.word	0x20000008
 800407c:	2000000c 	.word	0x2000000c
 8004080:	20000014 	.word	0x20000014
 8004084:	20000018 	.word	0x20000018
 8004088:	40000400 	.word	0x40000400
 800408c:	3ca3d70a 	.word	0x3ca3d70a

08004090 <check_mov>:
	}
}

static inline void check_mov (void) {           // проверим есть у нас движение или нет
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
	if (point_flags->change_pin_conf == 0) {
 8004094:	4b37      	ldr	r3, [pc, #220]	; (8004174 <check_mov+0xe4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	789b      	ldrb	r3, [r3, #2]
 800409a:	2240      	movs	r2, #64	; 0x40
 800409c:	4013      	ands	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d131      	bne.n	8004108 <check_mov+0x78>
		if (stepp_1.curent_steps != stepp_1.last_steps && stepp_2.curent_steps != stepp_2.last_steps) {
 80040a4:	4b34      	ldr	r3, [pc, #208]	; (8004178 <check_mov+0xe8>)
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	4b33      	ldr	r3, [pc, #204]	; (8004178 <check_mov+0xe8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d018      	beq.n	80040e2 <check_mov+0x52>
 80040b0:	4b32      	ldr	r3, [pc, #200]	; (800417c <check_mov+0xec>)
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4b31      	ldr	r3, [pc, #196]	; (800417c <check_mov+0xec>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d012      	beq.n	80040e2 <check_mov+0x52>
			MOTOR_MOV_ON;                           // вывод на малинку
 80040bc:	2390      	movs	r3, #144	; 0x90
 80040be:	05db      	lsls	r3, r3, #23
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	2390      	movs	r3, #144	; 0x90
 80040c4:	05db      	lsls	r3, r3, #23
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	0189      	lsls	r1, r1, #6
 80040ca:	430a      	orrs	r2, r1
 80040cc:	619a      	str	r2, [r3, #24]
			MOTOR_STP_OFF;
 80040ce:	2390      	movs	r3, #144	; 0x90
 80040d0:	05db      	lsls	r3, r3, #23
 80040d2:	699a      	ldr	r2, [r3, #24]
 80040d4:	2390      	movs	r3, #144	; 0x90
 80040d6:	05db      	lsls	r3, r3, #23
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	05c9      	lsls	r1, r1, #23
 80040dc:	430a      	orrs	r2, r1
 80040de:	619a      	str	r2, [r3, #24]
		if (stepp_1.curent_steps != stepp_1.last_steps) MOTOR_MOV_ON;
				else MOTOR_MOV_OFF;
		if (stepp_2.curent_steps != stepp_2.last_steps) MOTOR_STP_ON;
				else MOTOR_STP_OFF;
	}
}
 80040e0:	e044      	b.n	800416c <check_mov+0xdc>
			MOTOR_MOV_OFF;
 80040e2:	2390      	movs	r3, #144	; 0x90
 80040e4:	05db      	lsls	r3, r3, #23
 80040e6:	699a      	ldr	r2, [r3, #24]
 80040e8:	2390      	movs	r3, #144	; 0x90
 80040ea:	05db      	lsls	r3, r3, #23
 80040ec:	2180      	movs	r1, #128	; 0x80
 80040ee:	0589      	lsls	r1, r1, #22
 80040f0:	430a      	orrs	r2, r1
 80040f2:	619a      	str	r2, [r3, #24]
			MOTOR_STP_ON;                           // вывод на малинку
 80040f4:	2390      	movs	r3, #144	; 0x90
 80040f6:	05db      	lsls	r3, r3, #23
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	2390      	movs	r3, #144	; 0x90
 80040fc:	05db      	lsls	r3, r3, #23
 80040fe:	2180      	movs	r1, #128	; 0x80
 8004100:	01c9      	lsls	r1, r1, #7
 8004102:	430a      	orrs	r2, r1
 8004104:	619a      	str	r2, [r3, #24]
}
 8004106:	e031      	b.n	800416c <check_mov+0xdc>
		if (stepp_1.curent_steps != stepp_1.last_steps) MOTOR_MOV_ON;
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <check_mov+0xe8>)
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <check_mov+0xe8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d009      	beq.n	8004128 <check_mov+0x98>
 8004114:	2390      	movs	r3, #144	; 0x90
 8004116:	05db      	lsls	r3, r3, #23
 8004118:	699a      	ldr	r2, [r3, #24]
 800411a:	2390      	movs	r3, #144	; 0x90
 800411c:	05db      	lsls	r3, r3, #23
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	0189      	lsls	r1, r1, #6
 8004122:	430a      	orrs	r2, r1
 8004124:	619a      	str	r2, [r3, #24]
 8004126:	e008      	b.n	800413a <check_mov+0xaa>
				else MOTOR_MOV_OFF;
 8004128:	2390      	movs	r3, #144	; 0x90
 800412a:	05db      	lsls	r3, r3, #23
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	2390      	movs	r3, #144	; 0x90
 8004130:	05db      	lsls	r3, r3, #23
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0589      	lsls	r1, r1, #22
 8004136:	430a      	orrs	r2, r1
 8004138:	619a      	str	r2, [r3, #24]
		if (stepp_2.curent_steps != stepp_2.last_steps) MOTOR_STP_ON;
 800413a:	4b10      	ldr	r3, [pc, #64]	; (800417c <check_mov+0xec>)
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <check_mov+0xec>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d009      	beq.n	800415a <check_mov+0xca>
 8004146:	2390      	movs	r3, #144	; 0x90
 8004148:	05db      	lsls	r3, r3, #23
 800414a:	699a      	ldr	r2, [r3, #24]
 800414c:	2390      	movs	r3, #144	; 0x90
 800414e:	05db      	lsls	r3, r3, #23
 8004150:	2180      	movs	r1, #128	; 0x80
 8004152:	01c9      	lsls	r1, r1, #7
 8004154:	430a      	orrs	r2, r1
 8004156:	619a      	str	r2, [r3, #24]
}
 8004158:	e008      	b.n	800416c <check_mov+0xdc>
				else MOTOR_STP_OFF;
 800415a:	2390      	movs	r3, #144	; 0x90
 800415c:	05db      	lsls	r3, r3, #23
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	2390      	movs	r3, #144	; 0x90
 8004162:	05db      	lsls	r3, r3, #23
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	05c9      	lsls	r1, r1, #23
 8004168:	430a      	orrs	r2, r1
 800416a:	619a      	str	r2, [r3, #24]
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	20000000 	.word	0x20000000
 8004178:	2000004c 	.word	0x2000004c
 800417c:	2000005c 	.word	0x2000005c

08004180 <check_iris>:

static inline void check_iris (uint8_t poz) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	0002      	movs	r2, r0
 8004188:	1dfb      	adds	r3, r7, #7
 800418a:	701a      	strb	r2, [r3, #0]
	switch (poz) {
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d03e      	beq.n	8004212 <check_iris+0x92>
 8004194:	dc3e      	bgt.n	8004214 <check_iris+0x94>
 8004196:	2b02      	cmp	r3, #2
 8004198:	d029      	beq.n	80041ee <check_iris+0x6e>
 800419a:	dc3b      	bgt.n	8004214 <check_iris+0x94>
 800419c:	2b00      	cmp	r3, #0
 800419e:	d002      	beq.n	80041a6 <check_iris+0x26>
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d012      	beq.n	80041ca <check_iris+0x4a>
    	point_flags->delay = 2;
		break;
	case 3:
		break;
	}
}
 80041a4:	e036      	b.n	8004214 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 80041a6:	2390      	movs	r3, #144	; 0x90
 80041a8:	05db      	lsls	r3, r3, #23
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	2390      	movs	r3, #144	; 0x90
 80041ae:	05db      	lsls	r3, r3, #23
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	430a      	orrs	r2, r1
 80041b4:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 6;
 80041b6:	4b19      	ldr	r3, [pc, #100]	; (800421c <check_iris+0x9c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4918      	ldr	r1, [pc, #96]	; (8004220 <check_iris+0xa0>)
 80041be:	400a      	ands	r2, r1
 80041c0:	21c0      	movs	r1, #192	; 0xc0
 80041c2:	0209      	lsls	r1, r1, #8
 80041c4:	430a      	orrs	r2, r1
 80041c6:	601a      	str	r2, [r3, #0]
		break;
 80041c8:	e024      	b.n	8004214 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 80041ca:	2390      	movs	r3, #144	; 0x90
 80041cc:	05db      	lsls	r3, r3, #23
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	2390      	movs	r3, #144	; 0x90
 80041d2:	05db      	lsls	r3, r3, #23
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	430a      	orrs	r2, r1
 80041d8:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 4;
 80041da:	4b10      	ldr	r3, [pc, #64]	; (800421c <check_iris+0x9c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	490f      	ldr	r1, [pc, #60]	; (8004220 <check_iris+0xa0>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	0209      	lsls	r1, r1, #8
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
		break;
 80041ec:	e012      	b.n	8004214 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 80041ee:	2390      	movs	r3, #144	; 0x90
 80041f0:	05db      	lsls	r3, r3, #23
 80041f2:	699a      	ldr	r2, [r3, #24]
 80041f4:	2390      	movs	r3, #144	; 0x90
 80041f6:	05db      	lsls	r3, r3, #23
 80041f8:	2180      	movs	r1, #128	; 0x80
 80041fa:	430a      	orrs	r2, r1
 80041fc:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 2;
 80041fe:	4b07      	ldr	r3, [pc, #28]	; (800421c <check_iris+0x9c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4906      	ldr	r1, [pc, #24]	; (8004220 <check_iris+0xa0>)
 8004206:	400a      	ands	r2, r1
 8004208:	2180      	movs	r1, #128	; 0x80
 800420a:	01c9      	lsls	r1, r1, #7
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
		break;
 8004210:	e000      	b.n	8004214 <check_iris+0x94>
		break;
 8004212:	46c0      	nop			; (mov r8, r8)
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20000000 	.word	0x20000000
 8004220:	fffe1fff 	.word	0xfffe1fff

08004224 <constrain>:

float constrain(float x, float a, float b) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
    if(x < a) {
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f7fd f8f0 	bl	8001418 <__aeabi_fcmplt>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d001      	beq.n	8004240 <constrain+0x1c>
        return a;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	e008      	b.n	8004252 <constrain+0x2e>
    }
    else if(b < x) {
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7fd f8e8 	bl	8001418 <__aeabi_fcmplt>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d001      	beq.n	8004250 <constrain+0x2c>
        return b;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	e000      	b.n	8004252 <constrain+0x2e>
    }
    else
        return x;
 8004250:	68fb      	ldr	r3, [r7, #12]
}
 8004252:	1c18      	adds	r0, r3, #0
 8004254:	46bd      	mov	sp, r7
 8004256:	b004      	add	sp, #16
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <computePID>:

// (вход, установка, п, и, д, период в секундах, мин.выход, макс. выход)
uint32_t computePID(float input, float setpoint, float kp, float ki, float kd, float dt, int minOut, int maxOut) {
 800425c:	b5b0      	push	{r4, r5, r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  float err = (setpoint- ks) - input  ;
 800426a:	4b43      	ldr	r3, [pc, #268]	; (8004378 <computePID+0x11c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	f7fd ff6c 	bl	800214c <__aeabi_i2f>
 8004274:	1c03      	adds	r3, r0, #0
 8004276:	1c19      	adds	r1, r3, #0
 8004278:	68b8      	ldr	r0, [r7, #8]
 800427a:	f7fd fd99 	bl	8001db0 <__aeabi_fsub>
 800427e:	1c03      	adds	r3, r0, #0
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	1c18      	adds	r0, r3, #0
 8004284:	f7fd fd94 	bl	8001db0 <__aeabi_fsub>
 8004288:	1c03      	adds	r3, r0, #0
 800428a:	617b      	str	r3, [r7, #20]
  if (ks > 0) ks -= 15;                                           // для замедления реакции
 800428c:	4b3a      	ldr	r3, [pc, #232]	; (8004378 <computePID+0x11c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	dd05      	ble.n	80042a0 <computePID+0x44>
 8004294:	4b38      	ldr	r3, [pc, #224]	; (8004378 <computePID+0x11c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3b0f      	subs	r3, #15
 800429a:	001a      	movs	r2, r3
 800429c:	4b36      	ldr	r3, [pc, #216]	; (8004378 <computePID+0x11c>)
 800429e:	601a      	str	r2, [r3, #0]
  if (ks < 0) ks += 15;
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <computePID+0x11c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da05      	bge.n	80042b4 <computePID+0x58>
 80042a8:	4b33      	ldr	r3, [pc, #204]	; (8004378 <computePID+0x11c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	330f      	adds	r3, #15
 80042ae:	001a      	movs	r2, r3
 80042b0:	4b31      	ldr	r3, [pc, #196]	; (8004378 <computePID+0x11c>)
 80042b2:	601a      	str	r2, [r3, #0]
  static float integral = 0, prevErr = 0;
  integral = constrain(integral + err * dt * ki, minOut, maxOut);  // ???? ki
 80042b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042b6:	6978      	ldr	r0, [r7, #20]
 80042b8:	f7fd fc54 	bl	8001b64 <__aeabi_fmul>
 80042bc:	1c03      	adds	r3, r0, #0
 80042be:	6839      	ldr	r1, [r7, #0]
 80042c0:	1c18      	adds	r0, r3, #0
 80042c2:	f7fd fc4f 	bl	8001b64 <__aeabi_fmul>
 80042c6:	1c03      	adds	r3, r0, #0
 80042c8:	1c1a      	adds	r2, r3, #0
 80042ca:	4b2c      	ldr	r3, [pc, #176]	; (800437c <computePID+0x120>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	1c19      	adds	r1, r3, #0
 80042d0:	1c10      	adds	r0, r2, #0
 80042d2:	f7fd f8e1 	bl	8001498 <__aeabi_fadd>
 80042d6:	1c03      	adds	r3, r0, #0
 80042d8:	1c1d      	adds	r5, r3, #0
 80042da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042dc:	f7fd ff36 	bl	800214c <__aeabi_i2f>
 80042e0:	1c04      	adds	r4, r0, #0
 80042e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042e4:	f7fd ff32 	bl	800214c <__aeabi_i2f>
 80042e8:	1c03      	adds	r3, r0, #0
 80042ea:	1c1a      	adds	r2, r3, #0
 80042ec:	1c21      	adds	r1, r4, #0
 80042ee:	1c28      	adds	r0, r5, #0
 80042f0:	f7ff ff98 	bl	8004224 <constrain>
 80042f4:	1c02      	adds	r2, r0, #0
 80042f6:	4b21      	ldr	r3, [pc, #132]	; (800437c <computePID+0x120>)
 80042f8:	601a      	str	r2, [r3, #0]
  float D = (err - prevErr) / dt;
 80042fa:	4b21      	ldr	r3, [pc, #132]	; (8004380 <computePID+0x124>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	1c19      	adds	r1, r3, #0
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f7fd fd55 	bl	8001db0 <__aeabi_fsub>
 8004306:	1c03      	adds	r3, r0, #0
 8004308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430a:	1c18      	adds	r0, r3, #0
 800430c:	f7fd fa62 	bl	80017d4 <__aeabi_fdiv>
 8004310:	1c03      	adds	r3, r0, #0
 8004312:	613b      	str	r3, [r7, #16]
  prevErr = err;
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <computePID+0x124>)
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]
  return constrain(err * kp + integral + D * kd, minOut, maxOut);
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	6978      	ldr	r0, [r7, #20]
 800431e:	f7fd fc21 	bl	8001b64 <__aeabi_fmul>
 8004322:	1c03      	adds	r3, r0, #0
 8004324:	1c1a      	adds	r2, r3, #0
 8004326:	4b15      	ldr	r3, [pc, #84]	; (800437c <computePID+0x120>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	1c19      	adds	r1, r3, #0
 800432c:	1c10      	adds	r0, r2, #0
 800432e:	f7fd f8b3 	bl	8001498 <__aeabi_fadd>
 8004332:	1c03      	adds	r3, r0, #0
 8004334:	1c1c      	adds	r4, r3, #0
 8004336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004338:	6938      	ldr	r0, [r7, #16]
 800433a:	f7fd fc13 	bl	8001b64 <__aeabi_fmul>
 800433e:	1c03      	adds	r3, r0, #0
 8004340:	1c19      	adds	r1, r3, #0
 8004342:	1c20      	adds	r0, r4, #0
 8004344:	f7fd f8a8 	bl	8001498 <__aeabi_fadd>
 8004348:	1c03      	adds	r3, r0, #0
 800434a:	1c1d      	adds	r5, r3, #0
 800434c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800434e:	f7fd fefd 	bl	800214c <__aeabi_i2f>
 8004352:	1c04      	adds	r4, r0, #0
 8004354:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004356:	f7fd fef9 	bl	800214c <__aeabi_i2f>
 800435a:	1c03      	adds	r3, r0, #0
 800435c:	1c1a      	adds	r2, r3, #0
 800435e:	1c21      	adds	r1, r4, #0
 8004360:	1c28      	adds	r0, r5, #0
 8004362:	f7ff ff5f 	bl	8004224 <constrain>
 8004366:	1c03      	adds	r3, r0, #0
 8004368:	1c18      	adds	r0, r3, #0
 800436a:	f7fd f87d 	bl	8001468 <__aeabi_f2uiz>
 800436e:	0003      	movs	r3, r0
}
 8004370:	0018      	movs	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	b006      	add	sp, #24
 8004376:	bdb0      	pop	{r4, r5, r7, pc}
 8004378:	200000e0 	.word	0x200000e0
 800437c:	200000e4 	.word	0x200000e4
 8004380:	200000e8 	.word	0x200000e8

08004384 <set_pid>:

uint32_t set_pid (uint32_t new_pid) {
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b087      	sub	sp, #28
 8004388:	af02      	add	r7, sp, #8
 800438a:	6078      	str	r0, [r7, #4]
	if (new_pid < 0 || new_pid > 100) return 0;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <set_pid+0x12>
 8004392:	2300      	movs	r3, #0
 8004394:	e021      	b.n	80043da <set_pid+0x56>
	pid_param = new_pid;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <set_pid+0x60>)
 800439c:	701a      	strb	r2, [r3, #0]
	uint16_t mirror = 0;
 800439e:	240e      	movs	r4, #14
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	2200      	movs	r2, #0
 80043a4:	801a      	strh	r2, [r3, #0]

	if (mirror < open) {
		if (mirror < open ){ ks = mirror - open; } // ks = ks /2;
		open = mirror;
	}*/
	mirror = map (new_pid, 0, 100, 450, 4000);   // вот тут зависит от АЦП 600 - 3000 олд
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	23e1      	movs	r3, #225	; 0xe1
 80043aa:	005a      	lsls	r2, r3, #1
 80043ac:	23fa      	movs	r3, #250	; 0xfa
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	0013      	movs	r3, r2
 80043b4:	2264      	movs	r2, #100	; 0x64
 80043b6:	2100      	movs	r1, #0
 80043b8:	f7fd ffe4 	bl	8002384 <map>
 80043bc:	0002      	movs	r2, r0
 80043be:	193b      	adds	r3, r7, r4
 80043c0:	801a      	strh	r2, [r3, #0]
	ks = mirror - open;
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	881a      	ldrh	r2, [r3, #0]
 80043c6:	4b08      	ldr	r3, [pc, #32]	; (80043e8 <set_pid+0x64>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <set_pid+0x68>)
 80043ce:	601a      	str	r2, [r3, #0]
	open = mirror;
 80043d0:	193b      	adds	r3, r7, r4
 80043d2:	881a      	ldrh	r2, [r3, #0]
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <set_pid+0x64>)
 80043d6:	601a      	str	r2, [r3, #0]
	return new_pid;
 80043d8:	687b      	ldr	r3, [r7, #4]
}
 80043da:	0018      	movs	r0, r3
 80043dc:	46bd      	mov	sp, r7
 80043de:	b005      	add	sp, #20
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	2000001c 	.word	0x2000001c
 80043e8:	20000010 	.word	0x20000010
 80043ec:	200000e0 	.word	0x200000e0

080043f0 <setting_pin_rasbery>:

uint32_t setting_pin_rasbery (uint32_t sign) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	if (sign == 0) {point_flags->change_pin_conf = 0; return 1;}
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d107      	bne.n	800440e <setting_pin_rasbery+0x1e>
 80043fe:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <setting_pin_rasbery+0x40>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	789a      	ldrb	r2, [r3, #2]
 8004404:	2140      	movs	r1, #64	; 0x40
 8004406:	438a      	bics	r2, r1
 8004408:	709a      	strb	r2, [r3, #2]
 800440a:	2301      	movs	r3, #1
 800440c:	e00b      	b.n	8004426 <setting_pin_rasbery+0x36>
	if (sign == 1) {point_flags->change_pin_conf = 1; return 1;}
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <setting_pin_rasbery+0x34>
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <setting_pin_rasbery+0x40>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	789a      	ldrb	r2, [r3, #2]
 800441a:	2140      	movs	r1, #64	; 0x40
 800441c:	430a      	orrs	r2, r1
 800441e:	709a      	strb	r2, [r3, #2]
 8004420:	2301      	movs	r3, #1
 8004422:	e000      	b.n	8004426 <setting_pin_rasbery+0x36>
	return 0;
 8004424:	2300      	movs	r3, #0
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b002      	add	sp, #8
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	20000000 	.word	0x20000000

08004434 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004438:	46c0      	nop			; (mov r8, r8)
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004440:	4813      	ldr	r0, [pc, #76]	; (8004490 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004442:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8004444:	4813      	ldr	r0, [pc, #76]	; (8004494 <LoopForever+0x6>)
    LDR R1, [R0]
 8004446:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8004448:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800444a:	4a13      	ldr	r2, [pc, #76]	; (8004498 <LoopForever+0xa>)
    CMP R1, R2
 800444c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800444e:	d105      	bne.n	800445c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8004450:	4812      	ldr	r0, [pc, #72]	; (800449c <LoopForever+0xe>)
    LDR R1,=0x00000001
 8004452:	4913      	ldr	r1, [pc, #76]	; (80044a0 <LoopForever+0x12>)
    STR R1, [R0]
 8004454:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8004456:	4813      	ldr	r0, [pc, #76]	; (80044a4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8004458:	4913      	ldr	r1, [pc, #76]	; (80044a8 <LoopForever+0x1a>)
    STR R1, [R0]
 800445a:	6001      	str	r1, [r0, #0]

0800445c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800445c:	4813      	ldr	r0, [pc, #76]	; (80044ac <LoopForever+0x1e>)
  ldr r1, =_edata
 800445e:	4914      	ldr	r1, [pc, #80]	; (80044b0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004460:	4a14      	ldr	r2, [pc, #80]	; (80044b4 <LoopForever+0x26>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004464:	e002      	b.n	800446c <LoopCopyDataInit>

08004466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446a:	3304      	adds	r3, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004470:	d3f9      	bcc.n	8004466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004472:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004474:	4c11      	ldr	r4, [pc, #68]	; (80044bc <LoopForever+0x2e>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004478:	e001      	b.n	800447e <LoopFillZerobss>

0800447a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800447c:	3204      	adds	r2, #4

0800447e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004480:	d3fb      	bcc.n	800447a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004482:	f7ff ffd7 	bl	8004434 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004486:	f000 f81d 	bl	80044c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800448a:	f7ff fd21 	bl	8003ed0 <main>

0800448e <LoopForever>:

LoopForever:
    b LoopForever
 800448e:	e7fe      	b.n	800448e <LoopForever>
  ldr   r0, =_estack
 8004490:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8004494:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8004498:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800449c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80044a0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80044a4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80044a8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80044ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044b0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80044b4:	08004620 	.word	0x08004620
  ldr r2, =_sbss
 80044b8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80044bc:	200000ec 	.word	0x200000ec

080044c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044c0:	e7fe      	b.n	80044c0 <ADC1_IRQHandler>
	...

080044c4 <__libc_init_array>:
 80044c4:	b570      	push	{r4, r5, r6, lr}
 80044c6:	2600      	movs	r6, #0
 80044c8:	4d0c      	ldr	r5, [pc, #48]	; (80044fc <__libc_init_array+0x38>)
 80044ca:	4c0d      	ldr	r4, [pc, #52]	; (8004500 <__libc_init_array+0x3c>)
 80044cc:	1b64      	subs	r4, r4, r5
 80044ce:	10a4      	asrs	r4, r4, #2
 80044d0:	42a6      	cmp	r6, r4
 80044d2:	d109      	bne.n	80044e8 <__libc_init_array+0x24>
 80044d4:	2600      	movs	r6, #0
 80044d6:	f000 f819 	bl	800450c <_init>
 80044da:	4d0a      	ldr	r5, [pc, #40]	; (8004504 <__libc_init_array+0x40>)
 80044dc:	4c0a      	ldr	r4, [pc, #40]	; (8004508 <__libc_init_array+0x44>)
 80044de:	1b64      	subs	r4, r4, r5
 80044e0:	10a4      	asrs	r4, r4, #2
 80044e2:	42a6      	cmp	r6, r4
 80044e4:	d105      	bne.n	80044f2 <__libc_init_array+0x2e>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	00b3      	lsls	r3, r6, #2
 80044ea:	58eb      	ldr	r3, [r5, r3]
 80044ec:	4798      	blx	r3
 80044ee:	3601      	adds	r6, #1
 80044f0:	e7ee      	b.n	80044d0 <__libc_init_array+0xc>
 80044f2:	00b3      	lsls	r3, r6, #2
 80044f4:	58eb      	ldr	r3, [r5, r3]
 80044f6:	4798      	blx	r3
 80044f8:	3601      	adds	r6, #1
 80044fa:	e7f2      	b.n	80044e2 <__libc_init_array+0x1e>
 80044fc:	08004618 	.word	0x08004618
 8004500:	08004618 	.word	0x08004618
 8004504:	08004618 	.word	0x08004618
 8004508:	0800461c 	.word	0x0800461c

0800450c <_init>:
 800450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004512:	bc08      	pop	{r3}
 8004514:	469e      	mov	lr, r3
 8004516:	4770      	bx	lr

08004518 <_fini>:
 8004518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451e:	bc08      	pop	{r3}
 8004520:	469e      	mov	lr, r3
 8004522:	4770      	bx	lr
