
Step_dir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000800  08000800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003448  080008c0  080008c0  000008c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003d08  08003d08  00003d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e00  08003e00  00010020  2**0
                  CONTENTS
  4 .ARM          00000000  08003e00  08003e00  00010020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e00  08003e00  00010020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e00  08003e00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e04  08003e04  00003e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08003e08  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000020  08003e28  00010020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08003e28  000100ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003179  00000000  00000000  00010048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c9b  00000000  00000000  000131c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  00013e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000260  00000000  00000000  00014120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bfc  00000000  00000000  00014380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002fc1  00000000  00000000  00024f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00056406  00000000  00000000  00027f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0007e343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a24  00000000  00000000  0007e394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080008c0 <__do_global_dtors_aux>:
 80008c0:	b510      	push	{r4, lr}
 80008c2:	4c06      	ldr	r4, [pc, #24]	; (80008dc <__do_global_dtors_aux+0x1c>)
 80008c4:	7823      	ldrb	r3, [r4, #0]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d107      	bne.n	80008da <__do_global_dtors_aux+0x1a>
 80008ca:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <__do_global_dtors_aux+0x20>)
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d002      	beq.n	80008d6 <__do_global_dtors_aux+0x16>
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <__do_global_dtors_aux+0x24>)
 80008d2:	e000      	b.n	80008d6 <__do_global_dtors_aux+0x16>
 80008d4:	bf00      	nop
 80008d6:	2301      	movs	r3, #1
 80008d8:	7023      	strb	r3, [r4, #0]
 80008da:	bd10      	pop	{r4, pc}
 80008dc:	20000020 	.word	0x20000020
 80008e0:	00000000 	.word	0x00000000
 80008e4:	08003cf0 	.word	0x08003cf0

080008e8 <frame_dummy>:
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <frame_dummy+0x14>)
 80008ea:	b510      	push	{r4, lr}
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d003      	beq.n	80008f8 <frame_dummy+0x10>
 80008f0:	4903      	ldr	r1, [pc, #12]	; (8000900 <frame_dummy+0x18>)
 80008f2:	4804      	ldr	r0, [pc, #16]	; (8000904 <frame_dummy+0x1c>)
 80008f4:	e000      	b.n	80008f8 <frame_dummy+0x10>
 80008f6:	bf00      	nop
 80008f8:	bd10      	pop	{r4, pc}
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	00000000 	.word	0x00000000
 8000900:	20000024 	.word	0x20000024
 8000904:	08003cf0 	.word	0x08003cf0

08000908 <__divsi3>:
 8000908:	4603      	mov	r3, r0
 800090a:	430b      	orrs	r3, r1
 800090c:	d47f      	bmi.n	8000a0e <__divsi3+0x106>
 800090e:	2200      	movs	r2, #0
 8000910:	0843      	lsrs	r3, r0, #1
 8000912:	428b      	cmp	r3, r1
 8000914:	d374      	bcc.n	8000a00 <__divsi3+0xf8>
 8000916:	0903      	lsrs	r3, r0, #4
 8000918:	428b      	cmp	r3, r1
 800091a:	d35f      	bcc.n	80009dc <__divsi3+0xd4>
 800091c:	0a03      	lsrs	r3, r0, #8
 800091e:	428b      	cmp	r3, r1
 8000920:	d344      	bcc.n	80009ac <__divsi3+0xa4>
 8000922:	0b03      	lsrs	r3, r0, #12
 8000924:	428b      	cmp	r3, r1
 8000926:	d328      	bcc.n	800097a <__divsi3+0x72>
 8000928:	0c03      	lsrs	r3, r0, #16
 800092a:	428b      	cmp	r3, r1
 800092c:	d30d      	bcc.n	800094a <__divsi3+0x42>
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	0209      	lsls	r1, r1, #8
 8000932:	ba12      	rev	r2, r2
 8000934:	0c03      	lsrs	r3, r0, #16
 8000936:	428b      	cmp	r3, r1
 8000938:	d302      	bcc.n	8000940 <__divsi3+0x38>
 800093a:	1212      	asrs	r2, r2, #8
 800093c:	0209      	lsls	r1, r1, #8
 800093e:	d065      	beq.n	8000a0c <__divsi3+0x104>
 8000940:	0b03      	lsrs	r3, r0, #12
 8000942:	428b      	cmp	r3, r1
 8000944:	d319      	bcc.n	800097a <__divsi3+0x72>
 8000946:	e000      	b.n	800094a <__divsi3+0x42>
 8000948:	0a09      	lsrs	r1, r1, #8
 800094a:	0bc3      	lsrs	r3, r0, #15
 800094c:	428b      	cmp	r3, r1
 800094e:	d301      	bcc.n	8000954 <__divsi3+0x4c>
 8000950:	03cb      	lsls	r3, r1, #15
 8000952:	1ac0      	subs	r0, r0, r3
 8000954:	4152      	adcs	r2, r2
 8000956:	0b83      	lsrs	r3, r0, #14
 8000958:	428b      	cmp	r3, r1
 800095a:	d301      	bcc.n	8000960 <__divsi3+0x58>
 800095c:	038b      	lsls	r3, r1, #14
 800095e:	1ac0      	subs	r0, r0, r3
 8000960:	4152      	adcs	r2, r2
 8000962:	0b43      	lsrs	r3, r0, #13
 8000964:	428b      	cmp	r3, r1
 8000966:	d301      	bcc.n	800096c <__divsi3+0x64>
 8000968:	034b      	lsls	r3, r1, #13
 800096a:	1ac0      	subs	r0, r0, r3
 800096c:	4152      	adcs	r2, r2
 800096e:	0b03      	lsrs	r3, r0, #12
 8000970:	428b      	cmp	r3, r1
 8000972:	d301      	bcc.n	8000978 <__divsi3+0x70>
 8000974:	030b      	lsls	r3, r1, #12
 8000976:	1ac0      	subs	r0, r0, r3
 8000978:	4152      	adcs	r2, r2
 800097a:	0ac3      	lsrs	r3, r0, #11
 800097c:	428b      	cmp	r3, r1
 800097e:	d301      	bcc.n	8000984 <__divsi3+0x7c>
 8000980:	02cb      	lsls	r3, r1, #11
 8000982:	1ac0      	subs	r0, r0, r3
 8000984:	4152      	adcs	r2, r2
 8000986:	0a83      	lsrs	r3, r0, #10
 8000988:	428b      	cmp	r3, r1
 800098a:	d301      	bcc.n	8000990 <__divsi3+0x88>
 800098c:	028b      	lsls	r3, r1, #10
 800098e:	1ac0      	subs	r0, r0, r3
 8000990:	4152      	adcs	r2, r2
 8000992:	0a43      	lsrs	r3, r0, #9
 8000994:	428b      	cmp	r3, r1
 8000996:	d301      	bcc.n	800099c <__divsi3+0x94>
 8000998:	024b      	lsls	r3, r1, #9
 800099a:	1ac0      	subs	r0, r0, r3
 800099c:	4152      	adcs	r2, r2
 800099e:	0a03      	lsrs	r3, r0, #8
 80009a0:	428b      	cmp	r3, r1
 80009a2:	d301      	bcc.n	80009a8 <__divsi3+0xa0>
 80009a4:	020b      	lsls	r3, r1, #8
 80009a6:	1ac0      	subs	r0, r0, r3
 80009a8:	4152      	adcs	r2, r2
 80009aa:	d2cd      	bcs.n	8000948 <__divsi3+0x40>
 80009ac:	09c3      	lsrs	r3, r0, #7
 80009ae:	428b      	cmp	r3, r1
 80009b0:	d301      	bcc.n	80009b6 <__divsi3+0xae>
 80009b2:	01cb      	lsls	r3, r1, #7
 80009b4:	1ac0      	subs	r0, r0, r3
 80009b6:	4152      	adcs	r2, r2
 80009b8:	0983      	lsrs	r3, r0, #6
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d301      	bcc.n	80009c2 <__divsi3+0xba>
 80009be:	018b      	lsls	r3, r1, #6
 80009c0:	1ac0      	subs	r0, r0, r3
 80009c2:	4152      	adcs	r2, r2
 80009c4:	0943      	lsrs	r3, r0, #5
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d301      	bcc.n	80009ce <__divsi3+0xc6>
 80009ca:	014b      	lsls	r3, r1, #5
 80009cc:	1ac0      	subs	r0, r0, r3
 80009ce:	4152      	adcs	r2, r2
 80009d0:	0903      	lsrs	r3, r0, #4
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d301      	bcc.n	80009da <__divsi3+0xd2>
 80009d6:	010b      	lsls	r3, r1, #4
 80009d8:	1ac0      	subs	r0, r0, r3
 80009da:	4152      	adcs	r2, r2
 80009dc:	08c3      	lsrs	r3, r0, #3
 80009de:	428b      	cmp	r3, r1
 80009e0:	d301      	bcc.n	80009e6 <__divsi3+0xde>
 80009e2:	00cb      	lsls	r3, r1, #3
 80009e4:	1ac0      	subs	r0, r0, r3
 80009e6:	4152      	adcs	r2, r2
 80009e8:	0883      	lsrs	r3, r0, #2
 80009ea:	428b      	cmp	r3, r1
 80009ec:	d301      	bcc.n	80009f2 <__divsi3+0xea>
 80009ee:	008b      	lsls	r3, r1, #2
 80009f0:	1ac0      	subs	r0, r0, r3
 80009f2:	4152      	adcs	r2, r2
 80009f4:	0843      	lsrs	r3, r0, #1
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d301      	bcc.n	80009fe <__divsi3+0xf6>
 80009fa:	004b      	lsls	r3, r1, #1
 80009fc:	1ac0      	subs	r0, r0, r3
 80009fe:	4152      	adcs	r2, r2
 8000a00:	1a41      	subs	r1, r0, r1
 8000a02:	d200      	bcs.n	8000a06 <__divsi3+0xfe>
 8000a04:	4601      	mov	r1, r0
 8000a06:	4152      	adcs	r2, r2
 8000a08:	4610      	mov	r0, r2
 8000a0a:	4770      	bx	lr
 8000a0c:	e05d      	b.n	8000aca <__divsi3+0x1c2>
 8000a0e:	0fca      	lsrs	r2, r1, #31
 8000a10:	d000      	beq.n	8000a14 <__divsi3+0x10c>
 8000a12:	4249      	negs	r1, r1
 8000a14:	1003      	asrs	r3, r0, #32
 8000a16:	d300      	bcc.n	8000a1a <__divsi3+0x112>
 8000a18:	4240      	negs	r0, r0
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	469c      	mov	ip, r3
 8000a20:	0903      	lsrs	r3, r0, #4
 8000a22:	428b      	cmp	r3, r1
 8000a24:	d32d      	bcc.n	8000a82 <__divsi3+0x17a>
 8000a26:	0a03      	lsrs	r3, r0, #8
 8000a28:	428b      	cmp	r3, r1
 8000a2a:	d312      	bcc.n	8000a52 <__divsi3+0x14a>
 8000a2c:	22fc      	movs	r2, #252	; 0xfc
 8000a2e:	0189      	lsls	r1, r1, #6
 8000a30:	ba12      	rev	r2, r2
 8000a32:	0a03      	lsrs	r3, r0, #8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d30c      	bcc.n	8000a52 <__divsi3+0x14a>
 8000a38:	0189      	lsls	r1, r1, #6
 8000a3a:	1192      	asrs	r2, r2, #6
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d308      	bcc.n	8000a52 <__divsi3+0x14a>
 8000a40:	0189      	lsls	r1, r1, #6
 8000a42:	1192      	asrs	r2, r2, #6
 8000a44:	428b      	cmp	r3, r1
 8000a46:	d304      	bcc.n	8000a52 <__divsi3+0x14a>
 8000a48:	0189      	lsls	r1, r1, #6
 8000a4a:	d03a      	beq.n	8000ac2 <__divsi3+0x1ba>
 8000a4c:	1192      	asrs	r2, r2, #6
 8000a4e:	e000      	b.n	8000a52 <__divsi3+0x14a>
 8000a50:	0989      	lsrs	r1, r1, #6
 8000a52:	09c3      	lsrs	r3, r0, #7
 8000a54:	428b      	cmp	r3, r1
 8000a56:	d301      	bcc.n	8000a5c <__divsi3+0x154>
 8000a58:	01cb      	lsls	r3, r1, #7
 8000a5a:	1ac0      	subs	r0, r0, r3
 8000a5c:	4152      	adcs	r2, r2
 8000a5e:	0983      	lsrs	r3, r0, #6
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d301      	bcc.n	8000a68 <__divsi3+0x160>
 8000a64:	018b      	lsls	r3, r1, #6
 8000a66:	1ac0      	subs	r0, r0, r3
 8000a68:	4152      	adcs	r2, r2
 8000a6a:	0943      	lsrs	r3, r0, #5
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d301      	bcc.n	8000a74 <__divsi3+0x16c>
 8000a70:	014b      	lsls	r3, r1, #5
 8000a72:	1ac0      	subs	r0, r0, r3
 8000a74:	4152      	adcs	r2, r2
 8000a76:	0903      	lsrs	r3, r0, #4
 8000a78:	428b      	cmp	r3, r1
 8000a7a:	d301      	bcc.n	8000a80 <__divsi3+0x178>
 8000a7c:	010b      	lsls	r3, r1, #4
 8000a7e:	1ac0      	subs	r0, r0, r3
 8000a80:	4152      	adcs	r2, r2
 8000a82:	08c3      	lsrs	r3, r0, #3
 8000a84:	428b      	cmp	r3, r1
 8000a86:	d301      	bcc.n	8000a8c <__divsi3+0x184>
 8000a88:	00cb      	lsls	r3, r1, #3
 8000a8a:	1ac0      	subs	r0, r0, r3
 8000a8c:	4152      	adcs	r2, r2
 8000a8e:	0883      	lsrs	r3, r0, #2
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d301      	bcc.n	8000a98 <__divsi3+0x190>
 8000a94:	008b      	lsls	r3, r1, #2
 8000a96:	1ac0      	subs	r0, r0, r3
 8000a98:	4152      	adcs	r2, r2
 8000a9a:	d2d9      	bcs.n	8000a50 <__divsi3+0x148>
 8000a9c:	0843      	lsrs	r3, r0, #1
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d301      	bcc.n	8000aa6 <__divsi3+0x19e>
 8000aa2:	004b      	lsls	r3, r1, #1
 8000aa4:	1ac0      	subs	r0, r0, r3
 8000aa6:	4152      	adcs	r2, r2
 8000aa8:	1a41      	subs	r1, r0, r1
 8000aaa:	d200      	bcs.n	8000aae <__divsi3+0x1a6>
 8000aac:	4601      	mov	r1, r0
 8000aae:	4663      	mov	r3, ip
 8000ab0:	4152      	adcs	r2, r2
 8000ab2:	105b      	asrs	r3, r3, #1
 8000ab4:	4610      	mov	r0, r2
 8000ab6:	d301      	bcc.n	8000abc <__divsi3+0x1b4>
 8000ab8:	4240      	negs	r0, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d500      	bpl.n	8000ac0 <__divsi3+0x1b8>
 8000abe:	4249      	negs	r1, r1
 8000ac0:	4770      	bx	lr
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	105b      	asrs	r3, r3, #1
 8000ac6:	d300      	bcc.n	8000aca <__divsi3+0x1c2>
 8000ac8:	4240      	negs	r0, r0
 8000aca:	b501      	push	{r0, lr}
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f805 	bl	8000adc <__aeabi_idiv0>
 8000ad2:	bd02      	pop	{r1, pc}

08000ad4 <__aeabi_idivmod>:
 8000ad4:	2900      	cmp	r1, #0
 8000ad6:	d0f8      	beq.n	8000aca <__divsi3+0x1c2>
 8000ad8:	e716      	b.n	8000908 <__divsi3>
 8000ada:	4770      	bx	lr

08000adc <__aeabi_idiv0>:
 8000adc:	4770      	bx	lr
 8000ade:	46c0      	nop			; (mov r8, r8)

08000ae0 <__aeabi_cfrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	0008      	movs	r0, r1
 8000ae4:	4661      	mov	r1, ip
 8000ae6:	e7ff      	b.n	8000ae8 <__aeabi_cfcmpeq>

08000ae8 <__aeabi_cfcmpeq>:
 8000ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000aea:	f000 fb6d 	bl	80011c8 <__lesf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d401      	bmi.n	8000af6 <__aeabi_cfcmpeq+0xe>
 8000af2:	2100      	movs	r1, #0
 8000af4:	42c8      	cmn	r0, r1
 8000af6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000af8 <__aeabi_fcmpeq>:
 8000af8:	b510      	push	{r4, lr}
 8000afa:	f000 faf9 	bl	80010f0 <__eqsf2>
 8000afe:	4240      	negs	r0, r0
 8000b00:	3001      	adds	r0, #1
 8000b02:	bd10      	pop	{r4, pc}

08000b04 <__aeabi_fcmplt>:
 8000b04:	b510      	push	{r4, lr}
 8000b06:	f000 fb5f 	bl	80011c8 <__lesf2>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	db01      	blt.n	8000b12 <__aeabi_fcmplt+0xe>
 8000b0e:	2000      	movs	r0, #0
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	2001      	movs	r0, #1
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)

08000b18 <__aeabi_fcmple>:
 8000b18:	b510      	push	{r4, lr}
 8000b1a:	f000 fb55 	bl	80011c8 <__lesf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	dd01      	ble.n	8000b26 <__aeabi_fcmple+0xe>
 8000b22:	2000      	movs	r0, #0
 8000b24:	bd10      	pop	{r4, pc}
 8000b26:	2001      	movs	r0, #1
 8000b28:	bd10      	pop	{r4, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)

08000b2c <__aeabi_fcmpgt>:
 8000b2c:	b510      	push	{r4, lr}
 8000b2e:	f000 fb05 	bl	800113c <__gesf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	dc01      	bgt.n	8000b3a <__aeabi_fcmpgt+0xe>
 8000b36:	2000      	movs	r0, #0
 8000b38:	bd10      	pop	{r4, pc}
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	bd10      	pop	{r4, pc}
 8000b3e:	46c0      	nop			; (mov r8, r8)

08000b40 <__aeabi_fcmpge>:
 8000b40:	b510      	push	{r4, lr}
 8000b42:	f000 fafb 	bl	800113c <__gesf2>
 8000b46:	2800      	cmp	r0, #0
 8000b48:	da01      	bge.n	8000b4e <__aeabi_fcmpge+0xe>
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	bd10      	pop	{r4, pc}
 8000b4e:	2001      	movs	r0, #1
 8000b50:	bd10      	pop	{r4, pc}
 8000b52:	46c0      	nop			; (mov r8, r8)

08000b54 <__aeabi_f2uiz>:
 8000b54:	219e      	movs	r1, #158	; 0x9e
 8000b56:	b510      	push	{r4, lr}
 8000b58:	05c9      	lsls	r1, r1, #23
 8000b5a:	1c04      	adds	r4, r0, #0
 8000b5c:	f7ff fff0 	bl	8000b40 <__aeabi_fcmpge>
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d103      	bne.n	8000b6c <__aeabi_f2uiz+0x18>
 8000b64:	1c20      	adds	r0, r4, #0
 8000b66:	f000 fe47 	bl	80017f8 <__aeabi_f2iz>
 8000b6a:	bd10      	pop	{r4, pc}
 8000b6c:	219e      	movs	r1, #158	; 0x9e
 8000b6e:	1c20      	adds	r0, r4, #0
 8000b70:	05c9      	lsls	r1, r1, #23
 8000b72:	f000 fc93 	bl	800149c <__aeabi_fsub>
 8000b76:	f000 fe3f 	bl	80017f8 <__aeabi_f2iz>
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	061b      	lsls	r3, r3, #24
 8000b7e:	469c      	mov	ip, r3
 8000b80:	4460      	add	r0, ip
 8000b82:	e7f2      	b.n	8000b6a <__aeabi_f2uiz+0x16>

08000b84 <__aeabi_fadd>:
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	46c6      	mov	lr, r8
 8000b88:	0243      	lsls	r3, r0, #9
 8000b8a:	0a5b      	lsrs	r3, r3, #9
 8000b8c:	024e      	lsls	r6, r1, #9
 8000b8e:	0045      	lsls	r5, r0, #1
 8000b90:	004f      	lsls	r7, r1, #1
 8000b92:	00da      	lsls	r2, r3, #3
 8000b94:	0fc4      	lsrs	r4, r0, #31
 8000b96:	469c      	mov	ip, r3
 8000b98:	0a70      	lsrs	r0, r6, #9
 8000b9a:	4690      	mov	r8, r2
 8000b9c:	b500      	push	{lr}
 8000b9e:	0e2d      	lsrs	r5, r5, #24
 8000ba0:	0e3f      	lsrs	r7, r7, #24
 8000ba2:	0fc9      	lsrs	r1, r1, #31
 8000ba4:	09b6      	lsrs	r6, r6, #6
 8000ba6:	428c      	cmp	r4, r1
 8000ba8:	d04b      	beq.n	8000c42 <__aeabi_fadd+0xbe>
 8000baa:	1bea      	subs	r2, r5, r7
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	dd36      	ble.n	8000c1e <__aeabi_fadd+0x9a>
 8000bb0:	2f00      	cmp	r7, #0
 8000bb2:	d061      	beq.n	8000c78 <__aeabi_fadd+0xf4>
 8000bb4:	2dff      	cmp	r5, #255	; 0xff
 8000bb6:	d100      	bne.n	8000bba <__aeabi_fadd+0x36>
 8000bb8:	e0ad      	b.n	8000d16 <__aeabi_fadd+0x192>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	04db      	lsls	r3, r3, #19
 8000bbe:	431e      	orrs	r6, r3
 8000bc0:	2a1b      	cmp	r2, #27
 8000bc2:	dc00      	bgt.n	8000bc6 <__aeabi_fadd+0x42>
 8000bc4:	e0d3      	b.n	8000d6e <__aeabi_fadd+0x1ea>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	4643      	mov	r3, r8
 8000bca:	1a18      	subs	r0, r3, r0
 8000bcc:	0143      	lsls	r3, r0, #5
 8000bce:	d400      	bmi.n	8000bd2 <__aeabi_fadd+0x4e>
 8000bd0:	e08c      	b.n	8000cec <__aeabi_fadd+0x168>
 8000bd2:	0180      	lsls	r0, r0, #6
 8000bd4:	0987      	lsrs	r7, r0, #6
 8000bd6:	0038      	movs	r0, r7
 8000bd8:	f000 febe 	bl	8001958 <__clzsi2>
 8000bdc:	3805      	subs	r0, #5
 8000bde:	4087      	lsls	r7, r0
 8000be0:	4285      	cmp	r5, r0
 8000be2:	dc00      	bgt.n	8000be6 <__aeabi_fadd+0x62>
 8000be4:	e0b6      	b.n	8000d54 <__aeabi_fadd+0x1d0>
 8000be6:	1a2d      	subs	r5, r5, r0
 8000be8:	48b3      	ldr	r0, [pc, #716]	; (8000eb8 <__aeabi_fadd+0x334>)
 8000bea:	4038      	ands	r0, r7
 8000bec:	0743      	lsls	r3, r0, #29
 8000bee:	d004      	beq.n	8000bfa <__aeabi_fadd+0x76>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4003      	ands	r3, r0
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d000      	beq.n	8000bfa <__aeabi_fadd+0x76>
 8000bf8:	3004      	adds	r0, #4
 8000bfa:	0143      	lsls	r3, r0, #5
 8000bfc:	d400      	bmi.n	8000c00 <__aeabi_fadd+0x7c>
 8000bfe:	e078      	b.n	8000cf2 <__aeabi_fadd+0x16e>
 8000c00:	1c6a      	adds	r2, r5, #1
 8000c02:	2dfe      	cmp	r5, #254	; 0xfe
 8000c04:	d065      	beq.n	8000cd2 <__aeabi_fadd+0x14e>
 8000c06:	0180      	lsls	r0, r0, #6
 8000c08:	0a43      	lsrs	r3, r0, #9
 8000c0a:	469c      	mov	ip, r3
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	4663      	mov	r3, ip
 8000c10:	05d0      	lsls	r0, r2, #23
 8000c12:	4318      	orrs	r0, r3
 8000c14:	07e4      	lsls	r4, r4, #31
 8000c16:	4320      	orrs	r0, r4
 8000c18:	bc80      	pop	{r7}
 8000c1a:	46b8      	mov	r8, r7
 8000c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1e:	2a00      	cmp	r2, #0
 8000c20:	d035      	beq.n	8000c8e <__aeabi_fadd+0x10a>
 8000c22:	1b7a      	subs	r2, r7, r5
 8000c24:	2d00      	cmp	r5, #0
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fadd+0xa6>
 8000c28:	e0af      	b.n	8000d8a <__aeabi_fadd+0x206>
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fadd+0xae>
 8000c30:	e0a7      	b.n	8000d82 <__aeabi_fadd+0x1fe>
 8000c32:	1e53      	subs	r3, r2, #1
 8000c34:	2a01      	cmp	r2, #1
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fadd+0xb6>
 8000c38:	e12f      	b.n	8000e9a <__aeabi_fadd+0x316>
 8000c3a:	2aff      	cmp	r2, #255	; 0xff
 8000c3c:	d069      	beq.n	8000d12 <__aeabi_fadd+0x18e>
 8000c3e:	001a      	movs	r2, r3
 8000c40:	e0aa      	b.n	8000d98 <__aeabi_fadd+0x214>
 8000c42:	1be9      	subs	r1, r5, r7
 8000c44:	2900      	cmp	r1, #0
 8000c46:	dd70      	ble.n	8000d2a <__aeabi_fadd+0x1a6>
 8000c48:	2f00      	cmp	r7, #0
 8000c4a:	d037      	beq.n	8000cbc <__aeabi_fadd+0x138>
 8000c4c:	2dff      	cmp	r5, #255	; 0xff
 8000c4e:	d062      	beq.n	8000d16 <__aeabi_fadd+0x192>
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	04db      	lsls	r3, r3, #19
 8000c54:	431e      	orrs	r6, r3
 8000c56:	291b      	cmp	r1, #27
 8000c58:	dc00      	bgt.n	8000c5c <__aeabi_fadd+0xd8>
 8000c5a:	e0b0      	b.n	8000dbe <__aeabi_fadd+0x23a>
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	4440      	add	r0, r8
 8000c60:	0143      	lsls	r3, r0, #5
 8000c62:	d543      	bpl.n	8000cec <__aeabi_fadd+0x168>
 8000c64:	3501      	adds	r5, #1
 8000c66:	2dff      	cmp	r5, #255	; 0xff
 8000c68:	d033      	beq.n	8000cd2 <__aeabi_fadd+0x14e>
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	4a93      	ldr	r2, [pc, #588]	; (8000ebc <__aeabi_fadd+0x338>)
 8000c6e:	4003      	ands	r3, r0
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	4010      	ands	r0, r2
 8000c74:	4318      	orrs	r0, r3
 8000c76:	e7b9      	b.n	8000bec <__aeabi_fadd+0x68>
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d100      	bne.n	8000c7e <__aeabi_fadd+0xfa>
 8000c7c:	e083      	b.n	8000d86 <__aeabi_fadd+0x202>
 8000c7e:	1e51      	subs	r1, r2, #1
 8000c80:	2a01      	cmp	r2, #1
 8000c82:	d100      	bne.n	8000c86 <__aeabi_fadd+0x102>
 8000c84:	e0d8      	b.n	8000e38 <__aeabi_fadd+0x2b4>
 8000c86:	2aff      	cmp	r2, #255	; 0xff
 8000c88:	d045      	beq.n	8000d16 <__aeabi_fadd+0x192>
 8000c8a:	000a      	movs	r2, r1
 8000c8c:	e798      	b.n	8000bc0 <__aeabi_fadd+0x3c>
 8000c8e:	27fe      	movs	r7, #254	; 0xfe
 8000c90:	1c6a      	adds	r2, r5, #1
 8000c92:	4217      	tst	r7, r2
 8000c94:	d000      	beq.n	8000c98 <__aeabi_fadd+0x114>
 8000c96:	e086      	b.n	8000da6 <__aeabi_fadd+0x222>
 8000c98:	2d00      	cmp	r5, #0
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_fadd+0x11a>
 8000c9c:	e0b7      	b.n	8000e0e <__aeabi_fadd+0x28a>
 8000c9e:	4643      	mov	r3, r8
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fadd+0x122>
 8000ca4:	e0f3      	b.n	8000e8e <__aeabi_fadd+0x30a>
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2e00      	cmp	r6, #0
 8000caa:	d0b0      	beq.n	8000c0e <__aeabi_fadd+0x8a>
 8000cac:	1b98      	subs	r0, r3, r6
 8000cae:	0143      	lsls	r3, r0, #5
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fadd+0x130>
 8000cb2:	e0fa      	b.n	8000eaa <__aeabi_fadd+0x326>
 8000cb4:	4643      	mov	r3, r8
 8000cb6:	000c      	movs	r4, r1
 8000cb8:	1af0      	subs	r0, r6, r3
 8000cba:	e797      	b.n	8000bec <__aeabi_fadd+0x68>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d100      	bne.n	8000cc2 <__aeabi_fadd+0x13e>
 8000cc0:	e0c8      	b.n	8000e54 <__aeabi_fadd+0x2d0>
 8000cc2:	1e4a      	subs	r2, r1, #1
 8000cc4:	2901      	cmp	r1, #1
 8000cc6:	d100      	bne.n	8000cca <__aeabi_fadd+0x146>
 8000cc8:	e0ae      	b.n	8000e28 <__aeabi_fadd+0x2a4>
 8000cca:	29ff      	cmp	r1, #255	; 0xff
 8000ccc:	d023      	beq.n	8000d16 <__aeabi_fadd+0x192>
 8000cce:	0011      	movs	r1, r2
 8000cd0:	e7c1      	b.n	8000c56 <__aeabi_fadd+0xd2>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	22ff      	movs	r2, #255	; 0xff
 8000cd6:	469c      	mov	ip, r3
 8000cd8:	e799      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000cda:	21fe      	movs	r1, #254	; 0xfe
 8000cdc:	1c6a      	adds	r2, r5, #1
 8000cde:	4211      	tst	r1, r2
 8000ce0:	d077      	beq.n	8000dd2 <__aeabi_fadd+0x24e>
 8000ce2:	2aff      	cmp	r2, #255	; 0xff
 8000ce4:	d0f5      	beq.n	8000cd2 <__aeabi_fadd+0x14e>
 8000ce6:	0015      	movs	r5, r2
 8000ce8:	4446      	add	r6, r8
 8000cea:	0870      	lsrs	r0, r6, #1
 8000cec:	0743      	lsls	r3, r0, #29
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_fadd+0x16e>
 8000cf0:	e77e      	b.n	8000bf0 <__aeabi_fadd+0x6c>
 8000cf2:	08c3      	lsrs	r3, r0, #3
 8000cf4:	2dff      	cmp	r5, #255	; 0xff
 8000cf6:	d00e      	beq.n	8000d16 <__aeabi_fadd+0x192>
 8000cf8:	025b      	lsls	r3, r3, #9
 8000cfa:	0a5b      	lsrs	r3, r3, #9
 8000cfc:	469c      	mov	ip, r3
 8000cfe:	b2ea      	uxtb	r2, r5
 8000d00:	e785      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d007      	beq.n	8000d16 <__aeabi_fadd+0x192>
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	03d2      	lsls	r2, r2, #15
 8000d0a:	4213      	tst	r3, r2
 8000d0c:	d003      	beq.n	8000d16 <__aeabi_fadd+0x192>
 8000d0e:	4210      	tst	r0, r2
 8000d10:	d101      	bne.n	8000d16 <__aeabi_fadd+0x192>
 8000d12:	000c      	movs	r4, r1
 8000d14:	0003      	movs	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0db      	beq.n	8000cd2 <__aeabi_fadd+0x14e>
 8000d1a:	2080      	movs	r0, #128	; 0x80
 8000d1c:	03c0      	lsls	r0, r0, #15
 8000d1e:	4318      	orrs	r0, r3
 8000d20:	0240      	lsls	r0, r0, #9
 8000d22:	0a43      	lsrs	r3, r0, #9
 8000d24:	469c      	mov	ip, r3
 8000d26:	22ff      	movs	r2, #255	; 0xff
 8000d28:	e771      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000d2a:	2900      	cmp	r1, #0
 8000d2c:	d0d5      	beq.n	8000cda <__aeabi_fadd+0x156>
 8000d2e:	1b7a      	subs	r2, r7, r5
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d160      	bne.n	8000df6 <__aeabi_fadd+0x272>
 8000d34:	4643      	mov	r3, r8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d024      	beq.n	8000d84 <__aeabi_fadd+0x200>
 8000d3a:	1e53      	subs	r3, r2, #1
 8000d3c:	2a01      	cmp	r2, #1
 8000d3e:	d073      	beq.n	8000e28 <__aeabi_fadd+0x2a4>
 8000d40:	2aff      	cmp	r2, #255	; 0xff
 8000d42:	d0e7      	beq.n	8000d14 <__aeabi_fadd+0x190>
 8000d44:	001a      	movs	r2, r3
 8000d46:	2a1b      	cmp	r2, #27
 8000d48:	dc00      	bgt.n	8000d4c <__aeabi_fadd+0x1c8>
 8000d4a:	e085      	b.n	8000e58 <__aeabi_fadd+0x2d4>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	003d      	movs	r5, r7
 8000d50:	1980      	adds	r0, r0, r6
 8000d52:	e785      	b.n	8000c60 <__aeabi_fadd+0xdc>
 8000d54:	2320      	movs	r3, #32
 8000d56:	003a      	movs	r2, r7
 8000d58:	1b45      	subs	r5, r0, r5
 8000d5a:	0038      	movs	r0, r7
 8000d5c:	3501      	adds	r5, #1
 8000d5e:	40ea      	lsrs	r2, r5
 8000d60:	1b5d      	subs	r5, r3, r5
 8000d62:	40a8      	lsls	r0, r5
 8000d64:	1e43      	subs	r3, r0, #1
 8000d66:	4198      	sbcs	r0, r3
 8000d68:	2500      	movs	r5, #0
 8000d6a:	4310      	orrs	r0, r2
 8000d6c:	e73e      	b.n	8000bec <__aeabi_fadd+0x68>
 8000d6e:	2320      	movs	r3, #32
 8000d70:	0030      	movs	r0, r6
 8000d72:	1a9b      	subs	r3, r3, r2
 8000d74:	0031      	movs	r1, r6
 8000d76:	4098      	lsls	r0, r3
 8000d78:	40d1      	lsrs	r1, r2
 8000d7a:	1e43      	subs	r3, r0, #1
 8000d7c:	4198      	sbcs	r0, r3
 8000d7e:	4308      	orrs	r0, r1
 8000d80:	e722      	b.n	8000bc8 <__aeabi_fadd+0x44>
 8000d82:	000c      	movs	r4, r1
 8000d84:	0003      	movs	r3, r0
 8000d86:	0015      	movs	r5, r2
 8000d88:	e7b4      	b.n	8000cf4 <__aeabi_fadd+0x170>
 8000d8a:	2fff      	cmp	r7, #255	; 0xff
 8000d8c:	d0c1      	beq.n	8000d12 <__aeabi_fadd+0x18e>
 8000d8e:	2380      	movs	r3, #128	; 0x80
 8000d90:	4640      	mov	r0, r8
 8000d92:	04db      	lsls	r3, r3, #19
 8000d94:	4318      	orrs	r0, r3
 8000d96:	4680      	mov	r8, r0
 8000d98:	2a1b      	cmp	r2, #27
 8000d9a:	dd51      	ble.n	8000e40 <__aeabi_fadd+0x2bc>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	000c      	movs	r4, r1
 8000da0:	003d      	movs	r5, r7
 8000da2:	1a30      	subs	r0, r6, r0
 8000da4:	e712      	b.n	8000bcc <__aeabi_fadd+0x48>
 8000da6:	4643      	mov	r3, r8
 8000da8:	1b9f      	subs	r7, r3, r6
 8000daa:	017b      	lsls	r3, r7, #5
 8000dac:	d42b      	bmi.n	8000e06 <__aeabi_fadd+0x282>
 8000dae:	2f00      	cmp	r7, #0
 8000db0:	d000      	beq.n	8000db4 <__aeabi_fadd+0x230>
 8000db2:	e710      	b.n	8000bd6 <__aeabi_fadd+0x52>
 8000db4:	2300      	movs	r3, #0
 8000db6:	2400      	movs	r4, #0
 8000db8:	2200      	movs	r2, #0
 8000dba:	469c      	mov	ip, r3
 8000dbc:	e727      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000dbe:	2320      	movs	r3, #32
 8000dc0:	0032      	movs	r2, r6
 8000dc2:	0030      	movs	r0, r6
 8000dc4:	40ca      	lsrs	r2, r1
 8000dc6:	1a59      	subs	r1, r3, r1
 8000dc8:	4088      	lsls	r0, r1
 8000dca:	1e43      	subs	r3, r0, #1
 8000dcc:	4198      	sbcs	r0, r3
 8000dce:	4310      	orrs	r0, r2
 8000dd0:	e745      	b.n	8000c5e <__aeabi_fadd+0xda>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d14a      	bne.n	8000e6c <__aeabi_fadd+0x2e8>
 8000dd6:	4643      	mov	r3, r8
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d063      	beq.n	8000ea4 <__aeabi_fadd+0x320>
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d100      	bne.n	8000de4 <__aeabi_fadd+0x260>
 8000de2:	e714      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000de4:	0030      	movs	r0, r6
 8000de6:	4440      	add	r0, r8
 8000de8:	0143      	lsls	r3, r0, #5
 8000dea:	d400      	bmi.n	8000dee <__aeabi_fadd+0x26a>
 8000dec:	e77e      	b.n	8000cec <__aeabi_fadd+0x168>
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <__aeabi_fadd+0x334>)
 8000df0:	3501      	adds	r5, #1
 8000df2:	4018      	ands	r0, r3
 8000df4:	e77a      	b.n	8000cec <__aeabi_fadd+0x168>
 8000df6:	2fff      	cmp	r7, #255	; 0xff
 8000df8:	d08c      	beq.n	8000d14 <__aeabi_fadd+0x190>
 8000dfa:	2380      	movs	r3, #128	; 0x80
 8000dfc:	4641      	mov	r1, r8
 8000dfe:	04db      	lsls	r3, r3, #19
 8000e00:	4319      	orrs	r1, r3
 8000e02:	4688      	mov	r8, r1
 8000e04:	e79f      	b.n	8000d46 <__aeabi_fadd+0x1c2>
 8000e06:	4643      	mov	r3, r8
 8000e08:	000c      	movs	r4, r1
 8000e0a:	1af7      	subs	r7, r6, r3
 8000e0c:	e6e3      	b.n	8000bd6 <__aeabi_fadd+0x52>
 8000e0e:	4642      	mov	r2, r8
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	d000      	beq.n	8000e16 <__aeabi_fadd+0x292>
 8000e14:	e775      	b.n	8000d02 <__aeabi_fadd+0x17e>
 8000e16:	2e00      	cmp	r6, #0
 8000e18:	d000      	beq.n	8000e1c <__aeabi_fadd+0x298>
 8000e1a:	e77a      	b.n	8000d12 <__aeabi_fadd+0x18e>
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	03db      	lsls	r3, r3, #15
 8000e20:	2400      	movs	r4, #0
 8000e22:	469c      	mov	ip, r3
 8000e24:	22ff      	movs	r2, #255	; 0xff
 8000e26:	e6f2      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000e28:	0030      	movs	r0, r6
 8000e2a:	4440      	add	r0, r8
 8000e2c:	2501      	movs	r5, #1
 8000e2e:	0143      	lsls	r3, r0, #5
 8000e30:	d400      	bmi.n	8000e34 <__aeabi_fadd+0x2b0>
 8000e32:	e75b      	b.n	8000cec <__aeabi_fadd+0x168>
 8000e34:	2502      	movs	r5, #2
 8000e36:	e718      	b.n	8000c6a <__aeabi_fadd+0xe6>
 8000e38:	4643      	mov	r3, r8
 8000e3a:	2501      	movs	r5, #1
 8000e3c:	1b98      	subs	r0, r3, r6
 8000e3e:	e6c5      	b.n	8000bcc <__aeabi_fadd+0x48>
 8000e40:	2320      	movs	r3, #32
 8000e42:	4644      	mov	r4, r8
 8000e44:	4640      	mov	r0, r8
 8000e46:	40d4      	lsrs	r4, r2
 8000e48:	1a9a      	subs	r2, r3, r2
 8000e4a:	4090      	lsls	r0, r2
 8000e4c:	1e43      	subs	r3, r0, #1
 8000e4e:	4198      	sbcs	r0, r3
 8000e50:	4320      	orrs	r0, r4
 8000e52:	e7a4      	b.n	8000d9e <__aeabi_fadd+0x21a>
 8000e54:	000d      	movs	r5, r1
 8000e56:	e74d      	b.n	8000cf4 <__aeabi_fadd+0x170>
 8000e58:	2320      	movs	r3, #32
 8000e5a:	4641      	mov	r1, r8
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	40d1      	lsrs	r1, r2
 8000e60:	1a9a      	subs	r2, r3, r2
 8000e62:	4090      	lsls	r0, r2
 8000e64:	1e43      	subs	r3, r0, #1
 8000e66:	4198      	sbcs	r0, r3
 8000e68:	4308      	orrs	r0, r1
 8000e6a:	e770      	b.n	8000d4e <__aeabi_fadd+0x1ca>
 8000e6c:	4642      	mov	r2, r8
 8000e6e:	2a00      	cmp	r2, #0
 8000e70:	d100      	bne.n	8000e74 <__aeabi_fadd+0x2f0>
 8000e72:	e74f      	b.n	8000d14 <__aeabi_fadd+0x190>
 8000e74:	2e00      	cmp	r6, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fadd+0x2f6>
 8000e78:	e74d      	b.n	8000d16 <__aeabi_fadd+0x192>
 8000e7a:	2280      	movs	r2, #128	; 0x80
 8000e7c:	03d2      	lsls	r2, r2, #15
 8000e7e:	4213      	tst	r3, r2
 8000e80:	d100      	bne.n	8000e84 <__aeabi_fadd+0x300>
 8000e82:	e748      	b.n	8000d16 <__aeabi_fadd+0x192>
 8000e84:	4210      	tst	r0, r2
 8000e86:	d000      	beq.n	8000e8a <__aeabi_fadd+0x306>
 8000e88:	e745      	b.n	8000d16 <__aeabi_fadd+0x192>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	e743      	b.n	8000d16 <__aeabi_fadd+0x192>
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d090      	beq.n	8000db4 <__aeabi_fadd+0x230>
 8000e92:	000c      	movs	r4, r1
 8000e94:	4684      	mov	ip, r0
 8000e96:	2200      	movs	r2, #0
 8000e98:	e6b9      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000e9a:	4643      	mov	r3, r8
 8000e9c:	000c      	movs	r4, r1
 8000e9e:	1af0      	subs	r0, r6, r3
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	e693      	b.n	8000bcc <__aeabi_fadd+0x48>
 8000ea4:	4684      	mov	ip, r0
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	e6b1      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000eaa:	2800      	cmp	r0, #0
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_fadd+0x32c>
 8000eae:	e71d      	b.n	8000cec <__aeabi_fadd+0x168>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2400      	movs	r4, #0
 8000eb4:	469c      	mov	ip, r3
 8000eb6:	e6aa      	b.n	8000c0e <__aeabi_fadd+0x8a>
 8000eb8:	fbffffff 	.word	0xfbffffff
 8000ebc:	7dffffff 	.word	0x7dffffff

08000ec0 <__aeabi_fdiv>:
 8000ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ec2:	464f      	mov	r7, r9
 8000ec4:	4646      	mov	r6, r8
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	0245      	lsls	r5, r0, #9
 8000eca:	b5c0      	push	{r6, r7, lr}
 8000ecc:	0047      	lsls	r7, r0, #1
 8000ece:	1c0c      	adds	r4, r1, #0
 8000ed0:	0a6d      	lsrs	r5, r5, #9
 8000ed2:	0e3f      	lsrs	r7, r7, #24
 8000ed4:	0fc6      	lsrs	r6, r0, #31
 8000ed6:	2f00      	cmp	r7, #0
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fdiv+0x1c>
 8000eda:	e070      	b.n	8000fbe <__aeabi_fdiv+0xfe>
 8000edc:	2fff      	cmp	r7, #255	; 0xff
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_fdiv+0x22>
 8000ee0:	e075      	b.n	8000fce <__aeabi_fdiv+0x10e>
 8000ee2:	00eb      	lsls	r3, r5, #3
 8000ee4:	2580      	movs	r5, #128	; 0x80
 8000ee6:	04ed      	lsls	r5, r5, #19
 8000ee8:	431d      	orrs	r5, r3
 8000eea:	2300      	movs	r3, #0
 8000eec:	4699      	mov	r9, r3
 8000eee:	469a      	mov	sl, r3
 8000ef0:	3f7f      	subs	r7, #127	; 0x7f
 8000ef2:	0260      	lsls	r0, r4, #9
 8000ef4:	0a43      	lsrs	r3, r0, #9
 8000ef6:	4698      	mov	r8, r3
 8000ef8:	0063      	lsls	r3, r4, #1
 8000efa:	0e1b      	lsrs	r3, r3, #24
 8000efc:	0fe4      	lsrs	r4, r4, #31
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d04e      	beq.n	8000fa0 <__aeabi_fdiv+0xe0>
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d046      	beq.n	8000f94 <__aeabi_fdiv+0xd4>
 8000f06:	4642      	mov	r2, r8
 8000f08:	00d0      	lsls	r0, r2, #3
 8000f0a:	2280      	movs	r2, #128	; 0x80
 8000f0c:	04d2      	lsls	r2, r2, #19
 8000f0e:	4302      	orrs	r2, r0
 8000f10:	4690      	mov	r8, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	3b7f      	subs	r3, #127	; 0x7f
 8000f16:	0031      	movs	r1, r6
 8000f18:	1aff      	subs	r7, r7, r3
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	4061      	eors	r1, r4
 8000f1e:	b2c9      	uxtb	r1, r1
 8000f20:	4313      	orrs	r3, r2
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	d900      	bls.n	8000f28 <__aeabi_fdiv+0x68>
 8000f26:	e0b5      	b.n	8001094 <__aeabi_fdiv+0x1d4>
 8000f28:	486e      	ldr	r0, [pc, #440]	; (80010e4 <__aeabi_fdiv+0x224>)
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	58c3      	ldr	r3, [r0, r3]
 8000f2e:	469f      	mov	pc, r3
 8000f30:	2300      	movs	r3, #0
 8000f32:	4698      	mov	r8, r3
 8000f34:	0026      	movs	r6, r4
 8000f36:	4645      	mov	r5, r8
 8000f38:	4692      	mov	sl, r2
 8000f3a:	4653      	mov	r3, sl
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d100      	bne.n	8000f42 <__aeabi_fdiv+0x82>
 8000f40:	e089      	b.n	8001056 <__aeabi_fdiv+0x196>
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fdiv+0x88>
 8000f46:	e09e      	b.n	8001086 <__aeabi_fdiv+0x1c6>
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d018      	beq.n	8000f7e <__aeabi_fdiv+0xbe>
 8000f4c:	003b      	movs	r3, r7
 8000f4e:	337f      	adds	r3, #127	; 0x7f
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	dd69      	ble.n	8001028 <__aeabi_fdiv+0x168>
 8000f54:	076a      	lsls	r2, r5, #29
 8000f56:	d004      	beq.n	8000f62 <__aeabi_fdiv+0xa2>
 8000f58:	220f      	movs	r2, #15
 8000f5a:	402a      	ands	r2, r5
 8000f5c:	2a04      	cmp	r2, #4
 8000f5e:	d000      	beq.n	8000f62 <__aeabi_fdiv+0xa2>
 8000f60:	3504      	adds	r5, #4
 8000f62:	012a      	lsls	r2, r5, #4
 8000f64:	d503      	bpl.n	8000f6e <__aeabi_fdiv+0xae>
 8000f66:	4b60      	ldr	r3, [pc, #384]	; (80010e8 <__aeabi_fdiv+0x228>)
 8000f68:	401d      	ands	r5, r3
 8000f6a:	003b      	movs	r3, r7
 8000f6c:	3380      	adds	r3, #128	; 0x80
 8000f6e:	2bfe      	cmp	r3, #254	; 0xfe
 8000f70:	dd00      	ble.n	8000f74 <__aeabi_fdiv+0xb4>
 8000f72:	e070      	b.n	8001056 <__aeabi_fdiv+0x196>
 8000f74:	01ad      	lsls	r5, r5, #6
 8000f76:	0a6d      	lsrs	r5, r5, #9
 8000f78:	b2d8      	uxtb	r0, r3
 8000f7a:	e002      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f7c:	000e      	movs	r6, r1
 8000f7e:	2000      	movs	r0, #0
 8000f80:	2500      	movs	r5, #0
 8000f82:	05c0      	lsls	r0, r0, #23
 8000f84:	4328      	orrs	r0, r5
 8000f86:	07f6      	lsls	r6, r6, #31
 8000f88:	4330      	orrs	r0, r6
 8000f8a:	bce0      	pop	{r5, r6, r7}
 8000f8c:	46ba      	mov	sl, r7
 8000f8e:	46b1      	mov	r9, r6
 8000f90:	46a8      	mov	r8, r5
 8000f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f94:	4643      	mov	r3, r8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d13f      	bne.n	800101a <__aeabi_fdiv+0x15a>
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	3fff      	subs	r7, #255	; 0xff
 8000f9e:	e003      	b.n	8000fa8 <__aeabi_fdiv+0xe8>
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d12d      	bne.n	8001002 <__aeabi_fdiv+0x142>
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	0031      	movs	r1, r6
 8000faa:	464b      	mov	r3, r9
 8000fac:	4061      	eors	r1, r4
 8000fae:	b2c9      	uxtb	r1, r1
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d834      	bhi.n	8001020 <__aeabi_fdiv+0x160>
 8000fb6:	484d      	ldr	r0, [pc, #308]	; (80010ec <__aeabi_fdiv+0x22c>)
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	58c3      	ldr	r3, [r0, r3]
 8000fbc:	469f      	mov	pc, r3
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d113      	bne.n	8000fea <__aeabi_fdiv+0x12a>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	4699      	mov	r9, r3
 8000fc6:	3b03      	subs	r3, #3
 8000fc8:	2700      	movs	r7, #0
 8000fca:	469a      	mov	sl, r3
 8000fcc:	e791      	b.n	8000ef2 <__aeabi_fdiv+0x32>
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	d105      	bne.n	8000fde <__aeabi_fdiv+0x11e>
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	4699      	mov	r9, r3
 8000fd6:	3b06      	subs	r3, #6
 8000fd8:	27ff      	movs	r7, #255	; 0xff
 8000fda:	469a      	mov	sl, r3
 8000fdc:	e789      	b.n	8000ef2 <__aeabi_fdiv+0x32>
 8000fde:	230c      	movs	r3, #12
 8000fe0:	4699      	mov	r9, r3
 8000fe2:	3b09      	subs	r3, #9
 8000fe4:	27ff      	movs	r7, #255	; 0xff
 8000fe6:	469a      	mov	sl, r3
 8000fe8:	e783      	b.n	8000ef2 <__aeabi_fdiv+0x32>
 8000fea:	0028      	movs	r0, r5
 8000fec:	f000 fcb4 	bl	8001958 <__clzsi2>
 8000ff0:	2776      	movs	r7, #118	; 0x76
 8000ff2:	1f43      	subs	r3, r0, #5
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	427f      	negs	r7, r7
 8000ffa:	4699      	mov	r9, r3
 8000ffc:	469a      	mov	sl, r3
 8000ffe:	1a3f      	subs	r7, r7, r0
 8001000:	e777      	b.n	8000ef2 <__aeabi_fdiv+0x32>
 8001002:	4640      	mov	r0, r8
 8001004:	f000 fca8 	bl	8001958 <__clzsi2>
 8001008:	4642      	mov	r2, r8
 800100a:	1f43      	subs	r3, r0, #5
 800100c:	409a      	lsls	r2, r3
 800100e:	2376      	movs	r3, #118	; 0x76
 8001010:	425b      	negs	r3, r3
 8001012:	4690      	mov	r8, r2
 8001014:	1a1b      	subs	r3, r3, r0
 8001016:	2200      	movs	r2, #0
 8001018:	e77d      	b.n	8000f16 <__aeabi_fdiv+0x56>
 800101a:	23ff      	movs	r3, #255	; 0xff
 800101c:	2203      	movs	r2, #3
 800101e:	e77a      	b.n	8000f16 <__aeabi_fdiv+0x56>
 8001020:	000e      	movs	r6, r1
 8001022:	20ff      	movs	r0, #255	; 0xff
 8001024:	2500      	movs	r5, #0
 8001026:	e7ac      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 8001028:	2001      	movs	r0, #1
 800102a:	1ac0      	subs	r0, r0, r3
 800102c:	281b      	cmp	r0, #27
 800102e:	dca6      	bgt.n	8000f7e <__aeabi_fdiv+0xbe>
 8001030:	379e      	adds	r7, #158	; 0x9e
 8001032:	002a      	movs	r2, r5
 8001034:	40bd      	lsls	r5, r7
 8001036:	40c2      	lsrs	r2, r0
 8001038:	1e6b      	subs	r3, r5, #1
 800103a:	419d      	sbcs	r5, r3
 800103c:	4315      	orrs	r5, r2
 800103e:	076b      	lsls	r3, r5, #29
 8001040:	d004      	beq.n	800104c <__aeabi_fdiv+0x18c>
 8001042:	230f      	movs	r3, #15
 8001044:	402b      	ands	r3, r5
 8001046:	2b04      	cmp	r3, #4
 8001048:	d000      	beq.n	800104c <__aeabi_fdiv+0x18c>
 800104a:	3504      	adds	r5, #4
 800104c:	016b      	lsls	r3, r5, #5
 800104e:	d544      	bpl.n	80010da <__aeabi_fdiv+0x21a>
 8001050:	2001      	movs	r0, #1
 8001052:	2500      	movs	r5, #0
 8001054:	e795      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 8001056:	20ff      	movs	r0, #255	; 0xff
 8001058:	2500      	movs	r5, #0
 800105a:	e792      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 800105c:	2580      	movs	r5, #128	; 0x80
 800105e:	2600      	movs	r6, #0
 8001060:	20ff      	movs	r0, #255	; 0xff
 8001062:	03ed      	lsls	r5, r5, #15
 8001064:	e78d      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 8001066:	2300      	movs	r3, #0
 8001068:	4698      	mov	r8, r3
 800106a:	2080      	movs	r0, #128	; 0x80
 800106c:	03c0      	lsls	r0, r0, #15
 800106e:	4205      	tst	r5, r0
 8001070:	d009      	beq.n	8001086 <__aeabi_fdiv+0x1c6>
 8001072:	4643      	mov	r3, r8
 8001074:	4203      	tst	r3, r0
 8001076:	d106      	bne.n	8001086 <__aeabi_fdiv+0x1c6>
 8001078:	4645      	mov	r5, r8
 800107a:	4305      	orrs	r5, r0
 800107c:	026d      	lsls	r5, r5, #9
 800107e:	0026      	movs	r6, r4
 8001080:	20ff      	movs	r0, #255	; 0xff
 8001082:	0a6d      	lsrs	r5, r5, #9
 8001084:	e77d      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 8001086:	2080      	movs	r0, #128	; 0x80
 8001088:	03c0      	lsls	r0, r0, #15
 800108a:	4305      	orrs	r5, r0
 800108c:	026d      	lsls	r5, r5, #9
 800108e:	20ff      	movs	r0, #255	; 0xff
 8001090:	0a6d      	lsrs	r5, r5, #9
 8001092:	e776      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 8001094:	4642      	mov	r2, r8
 8001096:	016b      	lsls	r3, r5, #5
 8001098:	0150      	lsls	r0, r2, #5
 800109a:	4283      	cmp	r3, r0
 800109c:	d219      	bcs.n	80010d2 <__aeabi_fdiv+0x212>
 800109e:	221b      	movs	r2, #27
 80010a0:	2500      	movs	r5, #0
 80010a2:	3f01      	subs	r7, #1
 80010a4:	2601      	movs	r6, #1
 80010a6:	001c      	movs	r4, r3
 80010a8:	006d      	lsls	r5, r5, #1
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2c00      	cmp	r4, #0
 80010ae:	db01      	blt.n	80010b4 <__aeabi_fdiv+0x1f4>
 80010b0:	4298      	cmp	r0, r3
 80010b2:	d801      	bhi.n	80010b8 <__aeabi_fdiv+0x1f8>
 80010b4:	1a1b      	subs	r3, r3, r0
 80010b6:	4335      	orrs	r5, r6
 80010b8:	3a01      	subs	r2, #1
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	d1f3      	bne.n	80010a6 <__aeabi_fdiv+0x1e6>
 80010be:	1e5a      	subs	r2, r3, #1
 80010c0:	4193      	sbcs	r3, r2
 80010c2:	431d      	orrs	r5, r3
 80010c4:	003b      	movs	r3, r7
 80010c6:	337f      	adds	r3, #127	; 0x7f
 80010c8:	000e      	movs	r6, r1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	dd00      	ble.n	80010d0 <__aeabi_fdiv+0x210>
 80010ce:	e741      	b.n	8000f54 <__aeabi_fdiv+0x94>
 80010d0:	e7aa      	b.n	8001028 <__aeabi_fdiv+0x168>
 80010d2:	221a      	movs	r2, #26
 80010d4:	2501      	movs	r5, #1
 80010d6:	1a1b      	subs	r3, r3, r0
 80010d8:	e7e4      	b.n	80010a4 <__aeabi_fdiv+0x1e4>
 80010da:	01ad      	lsls	r5, r5, #6
 80010dc:	2000      	movs	r0, #0
 80010de:	0a6d      	lsrs	r5, r5, #9
 80010e0:	e74f      	b.n	8000f82 <__aeabi_fdiv+0xc2>
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	08003d08 	.word	0x08003d08
 80010e8:	f7ffffff 	.word	0xf7ffffff
 80010ec:	08003d48 	.word	0x08003d48

080010f0 <__eqsf2>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	0042      	lsls	r2, r0, #1
 80010f4:	0245      	lsls	r5, r0, #9
 80010f6:	024e      	lsls	r6, r1, #9
 80010f8:	004c      	lsls	r4, r1, #1
 80010fa:	0fc3      	lsrs	r3, r0, #31
 80010fc:	0a6d      	lsrs	r5, r5, #9
 80010fe:	2001      	movs	r0, #1
 8001100:	0e12      	lsrs	r2, r2, #24
 8001102:	0a76      	lsrs	r6, r6, #9
 8001104:	0e24      	lsrs	r4, r4, #24
 8001106:	0fc9      	lsrs	r1, r1, #31
 8001108:	2aff      	cmp	r2, #255	; 0xff
 800110a:	d006      	beq.n	800111a <__eqsf2+0x2a>
 800110c:	2cff      	cmp	r4, #255	; 0xff
 800110e:	d003      	beq.n	8001118 <__eqsf2+0x28>
 8001110:	42a2      	cmp	r2, r4
 8001112:	d101      	bne.n	8001118 <__eqsf2+0x28>
 8001114:	42b5      	cmp	r5, r6
 8001116:	d006      	beq.n	8001126 <__eqsf2+0x36>
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	2d00      	cmp	r5, #0
 800111c:	d1fc      	bne.n	8001118 <__eqsf2+0x28>
 800111e:	2cff      	cmp	r4, #255	; 0xff
 8001120:	d1fa      	bne.n	8001118 <__eqsf2+0x28>
 8001122:	2e00      	cmp	r6, #0
 8001124:	d1f8      	bne.n	8001118 <__eqsf2+0x28>
 8001126:	428b      	cmp	r3, r1
 8001128:	d006      	beq.n	8001138 <__eqsf2+0x48>
 800112a:	2001      	movs	r0, #1
 800112c:	2a00      	cmp	r2, #0
 800112e:	d1f3      	bne.n	8001118 <__eqsf2+0x28>
 8001130:	0028      	movs	r0, r5
 8001132:	1e43      	subs	r3, r0, #1
 8001134:	4198      	sbcs	r0, r3
 8001136:	e7ef      	b.n	8001118 <__eqsf2+0x28>
 8001138:	2000      	movs	r0, #0
 800113a:	e7ed      	b.n	8001118 <__eqsf2+0x28>

0800113c <__gesf2>:
 800113c:	b570      	push	{r4, r5, r6, lr}
 800113e:	0042      	lsls	r2, r0, #1
 8001140:	0245      	lsls	r5, r0, #9
 8001142:	024e      	lsls	r6, r1, #9
 8001144:	004c      	lsls	r4, r1, #1
 8001146:	0fc3      	lsrs	r3, r0, #31
 8001148:	0a6d      	lsrs	r5, r5, #9
 800114a:	0e12      	lsrs	r2, r2, #24
 800114c:	0a76      	lsrs	r6, r6, #9
 800114e:	0e24      	lsrs	r4, r4, #24
 8001150:	0fc8      	lsrs	r0, r1, #31
 8001152:	2aff      	cmp	r2, #255	; 0xff
 8001154:	d01b      	beq.n	800118e <__gesf2+0x52>
 8001156:	2cff      	cmp	r4, #255	; 0xff
 8001158:	d00e      	beq.n	8001178 <__gesf2+0x3c>
 800115a:	2a00      	cmp	r2, #0
 800115c:	d11b      	bne.n	8001196 <__gesf2+0x5a>
 800115e:	2c00      	cmp	r4, #0
 8001160:	d101      	bne.n	8001166 <__gesf2+0x2a>
 8001162:	2e00      	cmp	r6, #0
 8001164:	d01c      	beq.n	80011a0 <__gesf2+0x64>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d00c      	beq.n	8001184 <__gesf2+0x48>
 800116a:	4283      	cmp	r3, r0
 800116c:	d01c      	beq.n	80011a8 <__gesf2+0x6c>
 800116e:	2102      	movs	r1, #2
 8001170:	1e58      	subs	r0, r3, #1
 8001172:	4008      	ands	r0, r1
 8001174:	3801      	subs	r0, #1
 8001176:	bd70      	pop	{r4, r5, r6, pc}
 8001178:	2e00      	cmp	r6, #0
 800117a:	d122      	bne.n	80011c2 <__gesf2+0x86>
 800117c:	2a00      	cmp	r2, #0
 800117e:	d1f4      	bne.n	800116a <__gesf2+0x2e>
 8001180:	2d00      	cmp	r5, #0
 8001182:	d1f2      	bne.n	800116a <__gesf2+0x2e>
 8001184:	2800      	cmp	r0, #0
 8001186:	d1f6      	bne.n	8001176 <__gesf2+0x3a>
 8001188:	2001      	movs	r0, #1
 800118a:	4240      	negs	r0, r0
 800118c:	e7f3      	b.n	8001176 <__gesf2+0x3a>
 800118e:	2d00      	cmp	r5, #0
 8001190:	d117      	bne.n	80011c2 <__gesf2+0x86>
 8001192:	2cff      	cmp	r4, #255	; 0xff
 8001194:	d0f0      	beq.n	8001178 <__gesf2+0x3c>
 8001196:	2c00      	cmp	r4, #0
 8001198:	d1e7      	bne.n	800116a <__gesf2+0x2e>
 800119a:	2e00      	cmp	r6, #0
 800119c:	d1e5      	bne.n	800116a <__gesf2+0x2e>
 800119e:	e7e6      	b.n	800116e <__gesf2+0x32>
 80011a0:	2000      	movs	r0, #0
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	d0e7      	beq.n	8001176 <__gesf2+0x3a>
 80011a6:	e7e2      	b.n	800116e <__gesf2+0x32>
 80011a8:	42a2      	cmp	r2, r4
 80011aa:	dc05      	bgt.n	80011b8 <__gesf2+0x7c>
 80011ac:	dbea      	blt.n	8001184 <__gesf2+0x48>
 80011ae:	42b5      	cmp	r5, r6
 80011b0:	d802      	bhi.n	80011b8 <__gesf2+0x7c>
 80011b2:	d3e7      	bcc.n	8001184 <__gesf2+0x48>
 80011b4:	2000      	movs	r0, #0
 80011b6:	e7de      	b.n	8001176 <__gesf2+0x3a>
 80011b8:	4243      	negs	r3, r0
 80011ba:	4158      	adcs	r0, r3
 80011bc:	0040      	lsls	r0, r0, #1
 80011be:	3801      	subs	r0, #1
 80011c0:	e7d9      	b.n	8001176 <__gesf2+0x3a>
 80011c2:	2002      	movs	r0, #2
 80011c4:	4240      	negs	r0, r0
 80011c6:	e7d6      	b.n	8001176 <__gesf2+0x3a>

080011c8 <__lesf2>:
 80011c8:	b570      	push	{r4, r5, r6, lr}
 80011ca:	0042      	lsls	r2, r0, #1
 80011cc:	0245      	lsls	r5, r0, #9
 80011ce:	024e      	lsls	r6, r1, #9
 80011d0:	004c      	lsls	r4, r1, #1
 80011d2:	0fc3      	lsrs	r3, r0, #31
 80011d4:	0a6d      	lsrs	r5, r5, #9
 80011d6:	0e12      	lsrs	r2, r2, #24
 80011d8:	0a76      	lsrs	r6, r6, #9
 80011da:	0e24      	lsrs	r4, r4, #24
 80011dc:	0fc8      	lsrs	r0, r1, #31
 80011de:	2aff      	cmp	r2, #255	; 0xff
 80011e0:	d00b      	beq.n	80011fa <__lesf2+0x32>
 80011e2:	2cff      	cmp	r4, #255	; 0xff
 80011e4:	d00d      	beq.n	8001202 <__lesf2+0x3a>
 80011e6:	2a00      	cmp	r2, #0
 80011e8:	d11f      	bne.n	800122a <__lesf2+0x62>
 80011ea:	2c00      	cmp	r4, #0
 80011ec:	d116      	bne.n	800121c <__lesf2+0x54>
 80011ee:	2e00      	cmp	r6, #0
 80011f0:	d114      	bne.n	800121c <__lesf2+0x54>
 80011f2:	2000      	movs	r0, #0
 80011f4:	2d00      	cmp	r5, #0
 80011f6:	d010      	beq.n	800121a <__lesf2+0x52>
 80011f8:	e009      	b.n	800120e <__lesf2+0x46>
 80011fa:	2d00      	cmp	r5, #0
 80011fc:	d10c      	bne.n	8001218 <__lesf2+0x50>
 80011fe:	2cff      	cmp	r4, #255	; 0xff
 8001200:	d113      	bne.n	800122a <__lesf2+0x62>
 8001202:	2e00      	cmp	r6, #0
 8001204:	d108      	bne.n	8001218 <__lesf2+0x50>
 8001206:	2a00      	cmp	r2, #0
 8001208:	d008      	beq.n	800121c <__lesf2+0x54>
 800120a:	4283      	cmp	r3, r0
 800120c:	d012      	beq.n	8001234 <__lesf2+0x6c>
 800120e:	2102      	movs	r1, #2
 8001210:	1e58      	subs	r0, r3, #1
 8001212:	4008      	ands	r0, r1
 8001214:	3801      	subs	r0, #1
 8001216:	e000      	b.n	800121a <__lesf2+0x52>
 8001218:	2002      	movs	r0, #2
 800121a:	bd70      	pop	{r4, r5, r6, pc}
 800121c:	2d00      	cmp	r5, #0
 800121e:	d1f4      	bne.n	800120a <__lesf2+0x42>
 8001220:	2800      	cmp	r0, #0
 8001222:	d1fa      	bne.n	800121a <__lesf2+0x52>
 8001224:	2001      	movs	r0, #1
 8001226:	4240      	negs	r0, r0
 8001228:	e7f7      	b.n	800121a <__lesf2+0x52>
 800122a:	2c00      	cmp	r4, #0
 800122c:	d1ed      	bne.n	800120a <__lesf2+0x42>
 800122e:	2e00      	cmp	r6, #0
 8001230:	d1eb      	bne.n	800120a <__lesf2+0x42>
 8001232:	e7ec      	b.n	800120e <__lesf2+0x46>
 8001234:	42a2      	cmp	r2, r4
 8001236:	dc05      	bgt.n	8001244 <__lesf2+0x7c>
 8001238:	dbf2      	blt.n	8001220 <__lesf2+0x58>
 800123a:	42b5      	cmp	r5, r6
 800123c:	d802      	bhi.n	8001244 <__lesf2+0x7c>
 800123e:	d3ef      	bcc.n	8001220 <__lesf2+0x58>
 8001240:	2000      	movs	r0, #0
 8001242:	e7ea      	b.n	800121a <__lesf2+0x52>
 8001244:	4243      	negs	r3, r0
 8001246:	4158      	adcs	r0, r3
 8001248:	0040      	lsls	r0, r0, #1
 800124a:	3801      	subs	r0, #1
 800124c:	e7e5      	b.n	800121a <__lesf2+0x52>
 800124e:	46c0      	nop			; (mov r8, r8)

08001250 <__aeabi_fmul>:
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	464f      	mov	r7, r9
 8001254:	4646      	mov	r6, r8
 8001256:	46d6      	mov	lr, sl
 8001258:	0244      	lsls	r4, r0, #9
 800125a:	0045      	lsls	r5, r0, #1
 800125c:	b5c0      	push	{r6, r7, lr}
 800125e:	0a64      	lsrs	r4, r4, #9
 8001260:	1c0f      	adds	r7, r1, #0
 8001262:	0e2d      	lsrs	r5, r5, #24
 8001264:	0fc6      	lsrs	r6, r0, #31
 8001266:	2d00      	cmp	r5, #0
 8001268:	d100      	bne.n	800126c <__aeabi_fmul+0x1c>
 800126a:	e08d      	b.n	8001388 <__aeabi_fmul+0x138>
 800126c:	2dff      	cmp	r5, #255	; 0xff
 800126e:	d100      	bne.n	8001272 <__aeabi_fmul+0x22>
 8001270:	e092      	b.n	8001398 <__aeabi_fmul+0x148>
 8001272:	2300      	movs	r3, #0
 8001274:	2080      	movs	r0, #128	; 0x80
 8001276:	4699      	mov	r9, r3
 8001278:	469a      	mov	sl, r3
 800127a:	00e4      	lsls	r4, r4, #3
 800127c:	04c0      	lsls	r0, r0, #19
 800127e:	4304      	orrs	r4, r0
 8001280:	3d7f      	subs	r5, #127	; 0x7f
 8001282:	0278      	lsls	r0, r7, #9
 8001284:	0a43      	lsrs	r3, r0, #9
 8001286:	4698      	mov	r8, r3
 8001288:	007b      	lsls	r3, r7, #1
 800128a:	0e1b      	lsrs	r3, r3, #24
 800128c:	0fff      	lsrs	r7, r7, #31
 800128e:	2b00      	cmp	r3, #0
 8001290:	d100      	bne.n	8001294 <__aeabi_fmul+0x44>
 8001292:	e070      	b.n	8001376 <__aeabi_fmul+0x126>
 8001294:	2bff      	cmp	r3, #255	; 0xff
 8001296:	d100      	bne.n	800129a <__aeabi_fmul+0x4a>
 8001298:	e086      	b.n	80013a8 <__aeabi_fmul+0x158>
 800129a:	4642      	mov	r2, r8
 800129c:	00d0      	lsls	r0, r2, #3
 800129e:	2280      	movs	r2, #128	; 0x80
 80012a0:	3b7f      	subs	r3, #127	; 0x7f
 80012a2:	18ed      	adds	r5, r5, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	04d2      	lsls	r2, r2, #19
 80012a8:	4302      	orrs	r2, r0
 80012aa:	4690      	mov	r8, r2
 80012ac:	469c      	mov	ip, r3
 80012ae:	0031      	movs	r1, r6
 80012b0:	464b      	mov	r3, r9
 80012b2:	4079      	eors	r1, r7
 80012b4:	1c68      	adds	r0, r5, #1
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	d81c      	bhi.n	80012f4 <__aeabi_fmul+0xa4>
 80012ba:	4a76      	ldr	r2, [pc, #472]	; (8001494 <__aeabi_fmul+0x244>)
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	58d3      	ldr	r3, [r2, r3]
 80012c0:	469f      	mov	pc, r3
 80012c2:	0039      	movs	r1, r7
 80012c4:	4644      	mov	r4, r8
 80012c6:	46e2      	mov	sl, ip
 80012c8:	4653      	mov	r3, sl
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d00f      	beq.n	80012ee <__aeabi_fmul+0x9e>
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	d100      	bne.n	80012d4 <__aeabi_fmul+0x84>
 80012d2:	e0d7      	b.n	8001484 <__aeabi_fmul+0x234>
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d137      	bne.n	8001348 <__aeabi_fmul+0xf8>
 80012d8:	2000      	movs	r0, #0
 80012da:	2400      	movs	r4, #0
 80012dc:	05c0      	lsls	r0, r0, #23
 80012de:	4320      	orrs	r0, r4
 80012e0:	07c9      	lsls	r1, r1, #31
 80012e2:	4308      	orrs	r0, r1
 80012e4:	bce0      	pop	{r5, r6, r7}
 80012e6:	46ba      	mov	sl, r7
 80012e8:	46b1      	mov	r9, r6
 80012ea:	46a8      	mov	r8, r5
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ee:	20ff      	movs	r0, #255	; 0xff
 80012f0:	2400      	movs	r4, #0
 80012f2:	e7f3      	b.n	80012dc <__aeabi_fmul+0x8c>
 80012f4:	0c26      	lsrs	r6, r4, #16
 80012f6:	0424      	lsls	r4, r4, #16
 80012f8:	0c22      	lsrs	r2, r4, #16
 80012fa:	4644      	mov	r4, r8
 80012fc:	0424      	lsls	r4, r4, #16
 80012fe:	0c24      	lsrs	r4, r4, #16
 8001300:	4643      	mov	r3, r8
 8001302:	0027      	movs	r7, r4
 8001304:	0c1b      	lsrs	r3, r3, #16
 8001306:	4357      	muls	r7, r2
 8001308:	4374      	muls	r4, r6
 800130a:	435a      	muls	r2, r3
 800130c:	435e      	muls	r6, r3
 800130e:	1912      	adds	r2, r2, r4
 8001310:	0c3b      	lsrs	r3, r7, #16
 8001312:	189b      	adds	r3, r3, r2
 8001314:	429c      	cmp	r4, r3
 8001316:	d903      	bls.n	8001320 <__aeabi_fmul+0xd0>
 8001318:	2280      	movs	r2, #128	; 0x80
 800131a:	0252      	lsls	r2, r2, #9
 800131c:	4694      	mov	ip, r2
 800131e:	4466      	add	r6, ip
 8001320:	043f      	lsls	r7, r7, #16
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	0c3f      	lsrs	r7, r7, #16
 8001326:	19d2      	adds	r2, r2, r7
 8001328:	0194      	lsls	r4, r2, #6
 800132a:	1e67      	subs	r7, r4, #1
 800132c:	41bc      	sbcs	r4, r7
 800132e:	0c1b      	lsrs	r3, r3, #16
 8001330:	0e92      	lsrs	r2, r2, #26
 8001332:	199b      	adds	r3, r3, r6
 8001334:	4314      	orrs	r4, r2
 8001336:	019b      	lsls	r3, r3, #6
 8001338:	431c      	orrs	r4, r3
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	d400      	bmi.n	8001340 <__aeabi_fmul+0xf0>
 800133e:	e09b      	b.n	8001478 <__aeabi_fmul+0x228>
 8001340:	2301      	movs	r3, #1
 8001342:	0862      	lsrs	r2, r4, #1
 8001344:	401c      	ands	r4, r3
 8001346:	4314      	orrs	r4, r2
 8001348:	0002      	movs	r2, r0
 800134a:	327f      	adds	r2, #127	; 0x7f
 800134c:	2a00      	cmp	r2, #0
 800134e:	dd64      	ble.n	800141a <__aeabi_fmul+0x1ca>
 8001350:	0763      	lsls	r3, r4, #29
 8001352:	d004      	beq.n	800135e <__aeabi_fmul+0x10e>
 8001354:	230f      	movs	r3, #15
 8001356:	4023      	ands	r3, r4
 8001358:	2b04      	cmp	r3, #4
 800135a:	d000      	beq.n	800135e <__aeabi_fmul+0x10e>
 800135c:	3404      	adds	r4, #4
 800135e:	0123      	lsls	r3, r4, #4
 8001360:	d503      	bpl.n	800136a <__aeabi_fmul+0x11a>
 8001362:	0002      	movs	r2, r0
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <__aeabi_fmul+0x248>)
 8001366:	3280      	adds	r2, #128	; 0x80
 8001368:	401c      	ands	r4, r3
 800136a:	2afe      	cmp	r2, #254	; 0xfe
 800136c:	dcbf      	bgt.n	80012ee <__aeabi_fmul+0x9e>
 800136e:	01a4      	lsls	r4, r4, #6
 8001370:	0a64      	lsrs	r4, r4, #9
 8001372:	b2d0      	uxtb	r0, r2
 8001374:	e7b2      	b.n	80012dc <__aeabi_fmul+0x8c>
 8001376:	4643      	mov	r3, r8
 8001378:	2b00      	cmp	r3, #0
 800137a:	d13d      	bne.n	80013f8 <__aeabi_fmul+0x1a8>
 800137c:	464a      	mov	r2, r9
 800137e:	3301      	adds	r3, #1
 8001380:	431a      	orrs	r2, r3
 8001382:	4691      	mov	r9, r2
 8001384:	469c      	mov	ip, r3
 8001386:	e792      	b.n	80012ae <__aeabi_fmul+0x5e>
 8001388:	2c00      	cmp	r4, #0
 800138a:	d129      	bne.n	80013e0 <__aeabi_fmul+0x190>
 800138c:	2304      	movs	r3, #4
 800138e:	4699      	mov	r9, r3
 8001390:	3b03      	subs	r3, #3
 8001392:	2500      	movs	r5, #0
 8001394:	469a      	mov	sl, r3
 8001396:	e774      	b.n	8001282 <__aeabi_fmul+0x32>
 8001398:	2c00      	cmp	r4, #0
 800139a:	d11b      	bne.n	80013d4 <__aeabi_fmul+0x184>
 800139c:	2308      	movs	r3, #8
 800139e:	4699      	mov	r9, r3
 80013a0:	3b06      	subs	r3, #6
 80013a2:	25ff      	movs	r5, #255	; 0xff
 80013a4:	469a      	mov	sl, r3
 80013a6:	e76c      	b.n	8001282 <__aeabi_fmul+0x32>
 80013a8:	4643      	mov	r3, r8
 80013aa:	35ff      	adds	r5, #255	; 0xff
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10b      	bne.n	80013c8 <__aeabi_fmul+0x178>
 80013b0:	2302      	movs	r3, #2
 80013b2:	464a      	mov	r2, r9
 80013b4:	431a      	orrs	r2, r3
 80013b6:	4691      	mov	r9, r2
 80013b8:	469c      	mov	ip, r3
 80013ba:	e778      	b.n	80012ae <__aeabi_fmul+0x5e>
 80013bc:	4653      	mov	r3, sl
 80013be:	0031      	movs	r1, r6
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d000      	beq.n	80013c6 <__aeabi_fmul+0x176>
 80013c4:	e783      	b.n	80012ce <__aeabi_fmul+0x7e>
 80013c6:	e792      	b.n	80012ee <__aeabi_fmul+0x9e>
 80013c8:	2303      	movs	r3, #3
 80013ca:	464a      	mov	r2, r9
 80013cc:	431a      	orrs	r2, r3
 80013ce:	4691      	mov	r9, r2
 80013d0:	469c      	mov	ip, r3
 80013d2:	e76c      	b.n	80012ae <__aeabi_fmul+0x5e>
 80013d4:	230c      	movs	r3, #12
 80013d6:	4699      	mov	r9, r3
 80013d8:	3b09      	subs	r3, #9
 80013da:	25ff      	movs	r5, #255	; 0xff
 80013dc:	469a      	mov	sl, r3
 80013de:	e750      	b.n	8001282 <__aeabi_fmul+0x32>
 80013e0:	0020      	movs	r0, r4
 80013e2:	f000 fab9 	bl	8001958 <__clzsi2>
 80013e6:	2576      	movs	r5, #118	; 0x76
 80013e8:	1f43      	subs	r3, r0, #5
 80013ea:	409c      	lsls	r4, r3
 80013ec:	2300      	movs	r3, #0
 80013ee:	426d      	negs	r5, r5
 80013f0:	4699      	mov	r9, r3
 80013f2:	469a      	mov	sl, r3
 80013f4:	1a2d      	subs	r5, r5, r0
 80013f6:	e744      	b.n	8001282 <__aeabi_fmul+0x32>
 80013f8:	4640      	mov	r0, r8
 80013fa:	f000 faad 	bl	8001958 <__clzsi2>
 80013fe:	4642      	mov	r2, r8
 8001400:	1f43      	subs	r3, r0, #5
 8001402:	409a      	lsls	r2, r3
 8001404:	2300      	movs	r3, #0
 8001406:	1a2d      	subs	r5, r5, r0
 8001408:	4690      	mov	r8, r2
 800140a:	469c      	mov	ip, r3
 800140c:	3d76      	subs	r5, #118	; 0x76
 800140e:	e74e      	b.n	80012ae <__aeabi_fmul+0x5e>
 8001410:	2480      	movs	r4, #128	; 0x80
 8001412:	2100      	movs	r1, #0
 8001414:	20ff      	movs	r0, #255	; 0xff
 8001416:	03e4      	lsls	r4, r4, #15
 8001418:	e760      	b.n	80012dc <__aeabi_fmul+0x8c>
 800141a:	2301      	movs	r3, #1
 800141c:	1a9b      	subs	r3, r3, r2
 800141e:	2b1b      	cmp	r3, #27
 8001420:	dd00      	ble.n	8001424 <__aeabi_fmul+0x1d4>
 8001422:	e759      	b.n	80012d8 <__aeabi_fmul+0x88>
 8001424:	0022      	movs	r2, r4
 8001426:	309e      	adds	r0, #158	; 0x9e
 8001428:	40da      	lsrs	r2, r3
 800142a:	4084      	lsls	r4, r0
 800142c:	0013      	movs	r3, r2
 800142e:	1e62      	subs	r2, r4, #1
 8001430:	4194      	sbcs	r4, r2
 8001432:	431c      	orrs	r4, r3
 8001434:	0763      	lsls	r3, r4, #29
 8001436:	d004      	beq.n	8001442 <__aeabi_fmul+0x1f2>
 8001438:	230f      	movs	r3, #15
 800143a:	4023      	ands	r3, r4
 800143c:	2b04      	cmp	r3, #4
 800143e:	d000      	beq.n	8001442 <__aeabi_fmul+0x1f2>
 8001440:	3404      	adds	r4, #4
 8001442:	0163      	lsls	r3, r4, #5
 8001444:	d51a      	bpl.n	800147c <__aeabi_fmul+0x22c>
 8001446:	2001      	movs	r0, #1
 8001448:	2400      	movs	r4, #0
 800144a:	e747      	b.n	80012dc <__aeabi_fmul+0x8c>
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	03c0      	lsls	r0, r0, #15
 8001450:	4204      	tst	r4, r0
 8001452:	d009      	beq.n	8001468 <__aeabi_fmul+0x218>
 8001454:	4643      	mov	r3, r8
 8001456:	4203      	tst	r3, r0
 8001458:	d106      	bne.n	8001468 <__aeabi_fmul+0x218>
 800145a:	4644      	mov	r4, r8
 800145c:	4304      	orrs	r4, r0
 800145e:	0264      	lsls	r4, r4, #9
 8001460:	0039      	movs	r1, r7
 8001462:	20ff      	movs	r0, #255	; 0xff
 8001464:	0a64      	lsrs	r4, r4, #9
 8001466:	e739      	b.n	80012dc <__aeabi_fmul+0x8c>
 8001468:	2080      	movs	r0, #128	; 0x80
 800146a:	03c0      	lsls	r0, r0, #15
 800146c:	4304      	orrs	r4, r0
 800146e:	0264      	lsls	r4, r4, #9
 8001470:	0031      	movs	r1, r6
 8001472:	20ff      	movs	r0, #255	; 0xff
 8001474:	0a64      	lsrs	r4, r4, #9
 8001476:	e731      	b.n	80012dc <__aeabi_fmul+0x8c>
 8001478:	0028      	movs	r0, r5
 800147a:	e765      	b.n	8001348 <__aeabi_fmul+0xf8>
 800147c:	01a4      	lsls	r4, r4, #6
 800147e:	2000      	movs	r0, #0
 8001480:	0a64      	lsrs	r4, r4, #9
 8001482:	e72b      	b.n	80012dc <__aeabi_fmul+0x8c>
 8001484:	2080      	movs	r0, #128	; 0x80
 8001486:	03c0      	lsls	r0, r0, #15
 8001488:	4304      	orrs	r4, r0
 800148a:	0264      	lsls	r4, r4, #9
 800148c:	20ff      	movs	r0, #255	; 0xff
 800148e:	0a64      	lsrs	r4, r4, #9
 8001490:	e724      	b.n	80012dc <__aeabi_fmul+0x8c>
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	08003d88 	.word	0x08003d88
 8001498:	f7ffffff 	.word	0xf7ffffff

0800149c <__aeabi_fsub>:
 800149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800149e:	46ce      	mov	lr, r9
 80014a0:	4647      	mov	r7, r8
 80014a2:	0243      	lsls	r3, r0, #9
 80014a4:	0a5b      	lsrs	r3, r3, #9
 80014a6:	024e      	lsls	r6, r1, #9
 80014a8:	00da      	lsls	r2, r3, #3
 80014aa:	4694      	mov	ip, r2
 80014ac:	0a72      	lsrs	r2, r6, #9
 80014ae:	4691      	mov	r9, r2
 80014b0:	0045      	lsls	r5, r0, #1
 80014b2:	004a      	lsls	r2, r1, #1
 80014b4:	b580      	push	{r7, lr}
 80014b6:	0e2d      	lsrs	r5, r5, #24
 80014b8:	001f      	movs	r7, r3
 80014ba:	0fc4      	lsrs	r4, r0, #31
 80014bc:	0e12      	lsrs	r2, r2, #24
 80014be:	0fc9      	lsrs	r1, r1, #31
 80014c0:	09b6      	lsrs	r6, r6, #6
 80014c2:	2aff      	cmp	r2, #255	; 0xff
 80014c4:	d05b      	beq.n	800157e <__aeabi_fsub+0xe2>
 80014c6:	2001      	movs	r0, #1
 80014c8:	4041      	eors	r1, r0
 80014ca:	428c      	cmp	r4, r1
 80014cc:	d039      	beq.n	8001542 <__aeabi_fsub+0xa6>
 80014ce:	1aa8      	subs	r0, r5, r2
 80014d0:	2800      	cmp	r0, #0
 80014d2:	dd5a      	ble.n	800158a <__aeabi_fsub+0xee>
 80014d4:	2a00      	cmp	r2, #0
 80014d6:	d06a      	beq.n	80015ae <__aeabi_fsub+0x112>
 80014d8:	2dff      	cmp	r5, #255	; 0xff
 80014da:	d100      	bne.n	80014de <__aeabi_fsub+0x42>
 80014dc:	e0d9      	b.n	8001692 <__aeabi_fsub+0x1f6>
 80014de:	2280      	movs	r2, #128	; 0x80
 80014e0:	04d2      	lsls	r2, r2, #19
 80014e2:	4316      	orrs	r6, r2
 80014e4:	281b      	cmp	r0, #27
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_fsub+0x4e>
 80014e8:	e0e9      	b.n	80016be <__aeabi_fsub+0x222>
 80014ea:	2001      	movs	r0, #1
 80014ec:	4663      	mov	r3, ip
 80014ee:	1a18      	subs	r0, r3, r0
 80014f0:	0143      	lsls	r3, r0, #5
 80014f2:	d400      	bmi.n	80014f6 <__aeabi_fsub+0x5a>
 80014f4:	e0b4      	b.n	8001660 <__aeabi_fsub+0x1c4>
 80014f6:	0180      	lsls	r0, r0, #6
 80014f8:	0987      	lsrs	r7, r0, #6
 80014fa:	0038      	movs	r0, r7
 80014fc:	f000 fa2c 	bl	8001958 <__clzsi2>
 8001500:	3805      	subs	r0, #5
 8001502:	4087      	lsls	r7, r0
 8001504:	4285      	cmp	r5, r0
 8001506:	dc00      	bgt.n	800150a <__aeabi_fsub+0x6e>
 8001508:	e0cc      	b.n	80016a4 <__aeabi_fsub+0x208>
 800150a:	1a2d      	subs	r5, r5, r0
 800150c:	48b5      	ldr	r0, [pc, #724]	; (80017e4 <__aeabi_fsub+0x348>)
 800150e:	4038      	ands	r0, r7
 8001510:	0743      	lsls	r3, r0, #29
 8001512:	d004      	beq.n	800151e <__aeabi_fsub+0x82>
 8001514:	230f      	movs	r3, #15
 8001516:	4003      	ands	r3, r0
 8001518:	2b04      	cmp	r3, #4
 800151a:	d000      	beq.n	800151e <__aeabi_fsub+0x82>
 800151c:	3004      	adds	r0, #4
 800151e:	0143      	lsls	r3, r0, #5
 8001520:	d400      	bmi.n	8001524 <__aeabi_fsub+0x88>
 8001522:	e0a0      	b.n	8001666 <__aeabi_fsub+0x1ca>
 8001524:	1c6a      	adds	r2, r5, #1
 8001526:	2dfe      	cmp	r5, #254	; 0xfe
 8001528:	d100      	bne.n	800152c <__aeabi_fsub+0x90>
 800152a:	e08d      	b.n	8001648 <__aeabi_fsub+0x1ac>
 800152c:	0180      	lsls	r0, r0, #6
 800152e:	0a47      	lsrs	r7, r0, #9
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	05d0      	lsls	r0, r2, #23
 8001534:	4338      	orrs	r0, r7
 8001536:	07e4      	lsls	r4, r4, #31
 8001538:	4320      	orrs	r0, r4
 800153a:	bcc0      	pop	{r6, r7}
 800153c:	46b9      	mov	r9, r7
 800153e:	46b0      	mov	r8, r6
 8001540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001542:	1aa8      	subs	r0, r5, r2
 8001544:	4680      	mov	r8, r0
 8001546:	2800      	cmp	r0, #0
 8001548:	dd45      	ble.n	80015d6 <__aeabi_fsub+0x13a>
 800154a:	2a00      	cmp	r2, #0
 800154c:	d070      	beq.n	8001630 <__aeabi_fsub+0x194>
 800154e:	2dff      	cmp	r5, #255	; 0xff
 8001550:	d100      	bne.n	8001554 <__aeabi_fsub+0xb8>
 8001552:	e09e      	b.n	8001692 <__aeabi_fsub+0x1f6>
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	04db      	lsls	r3, r3, #19
 8001558:	431e      	orrs	r6, r3
 800155a:	4643      	mov	r3, r8
 800155c:	2b1b      	cmp	r3, #27
 800155e:	dc00      	bgt.n	8001562 <__aeabi_fsub+0xc6>
 8001560:	e0d2      	b.n	8001708 <__aeabi_fsub+0x26c>
 8001562:	2001      	movs	r0, #1
 8001564:	4460      	add	r0, ip
 8001566:	0143      	lsls	r3, r0, #5
 8001568:	d57a      	bpl.n	8001660 <__aeabi_fsub+0x1c4>
 800156a:	3501      	adds	r5, #1
 800156c:	2dff      	cmp	r5, #255	; 0xff
 800156e:	d06b      	beq.n	8001648 <__aeabi_fsub+0x1ac>
 8001570:	2301      	movs	r3, #1
 8001572:	4a9d      	ldr	r2, [pc, #628]	; (80017e8 <__aeabi_fsub+0x34c>)
 8001574:	4003      	ands	r3, r0
 8001576:	0840      	lsrs	r0, r0, #1
 8001578:	4010      	ands	r0, r2
 800157a:	4318      	orrs	r0, r3
 800157c:	e7c8      	b.n	8001510 <__aeabi_fsub+0x74>
 800157e:	2e00      	cmp	r6, #0
 8001580:	d020      	beq.n	80015c4 <__aeabi_fsub+0x128>
 8001582:	428c      	cmp	r4, r1
 8001584:	d023      	beq.n	80015ce <__aeabi_fsub+0x132>
 8001586:	0028      	movs	r0, r5
 8001588:	38ff      	subs	r0, #255	; 0xff
 800158a:	2800      	cmp	r0, #0
 800158c:	d039      	beq.n	8001602 <__aeabi_fsub+0x166>
 800158e:	1b57      	subs	r7, r2, r5
 8001590:	2d00      	cmp	r5, #0
 8001592:	d000      	beq.n	8001596 <__aeabi_fsub+0xfa>
 8001594:	e09d      	b.n	80016d2 <__aeabi_fsub+0x236>
 8001596:	4663      	mov	r3, ip
 8001598:	2b00      	cmp	r3, #0
 800159a:	d100      	bne.n	800159e <__aeabi_fsub+0x102>
 800159c:	e0db      	b.n	8001756 <__aeabi_fsub+0x2ba>
 800159e:	1e7b      	subs	r3, r7, #1
 80015a0:	2f01      	cmp	r7, #1
 80015a2:	d100      	bne.n	80015a6 <__aeabi_fsub+0x10a>
 80015a4:	e10d      	b.n	80017c2 <__aeabi_fsub+0x326>
 80015a6:	2fff      	cmp	r7, #255	; 0xff
 80015a8:	d071      	beq.n	800168e <__aeabi_fsub+0x1f2>
 80015aa:	001f      	movs	r7, r3
 80015ac:	e098      	b.n	80016e0 <__aeabi_fsub+0x244>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d100      	bne.n	80015b4 <__aeabi_fsub+0x118>
 80015b2:	e0a7      	b.n	8001704 <__aeabi_fsub+0x268>
 80015b4:	1e42      	subs	r2, r0, #1
 80015b6:	2801      	cmp	r0, #1
 80015b8:	d100      	bne.n	80015bc <__aeabi_fsub+0x120>
 80015ba:	e0e6      	b.n	800178a <__aeabi_fsub+0x2ee>
 80015bc:	28ff      	cmp	r0, #255	; 0xff
 80015be:	d068      	beq.n	8001692 <__aeabi_fsub+0x1f6>
 80015c0:	0010      	movs	r0, r2
 80015c2:	e78f      	b.n	80014e4 <__aeabi_fsub+0x48>
 80015c4:	2001      	movs	r0, #1
 80015c6:	4041      	eors	r1, r0
 80015c8:	42a1      	cmp	r1, r4
 80015ca:	d000      	beq.n	80015ce <__aeabi_fsub+0x132>
 80015cc:	e77f      	b.n	80014ce <__aeabi_fsub+0x32>
 80015ce:	20ff      	movs	r0, #255	; 0xff
 80015d0:	4240      	negs	r0, r0
 80015d2:	4680      	mov	r8, r0
 80015d4:	44a8      	add	r8, r5
 80015d6:	4640      	mov	r0, r8
 80015d8:	2800      	cmp	r0, #0
 80015da:	d038      	beq.n	800164e <__aeabi_fsub+0x1b2>
 80015dc:	1b51      	subs	r1, r2, r5
 80015de:	2d00      	cmp	r5, #0
 80015e0:	d100      	bne.n	80015e4 <__aeabi_fsub+0x148>
 80015e2:	e0ae      	b.n	8001742 <__aeabi_fsub+0x2a6>
 80015e4:	2aff      	cmp	r2, #255	; 0xff
 80015e6:	d100      	bne.n	80015ea <__aeabi_fsub+0x14e>
 80015e8:	e0df      	b.n	80017aa <__aeabi_fsub+0x30e>
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	4660      	mov	r0, ip
 80015ee:	04db      	lsls	r3, r3, #19
 80015f0:	4318      	orrs	r0, r3
 80015f2:	4684      	mov	ip, r0
 80015f4:	291b      	cmp	r1, #27
 80015f6:	dc00      	bgt.n	80015fa <__aeabi_fsub+0x15e>
 80015f8:	e0d9      	b.n	80017ae <__aeabi_fsub+0x312>
 80015fa:	2001      	movs	r0, #1
 80015fc:	0015      	movs	r5, r2
 80015fe:	1980      	adds	r0, r0, r6
 8001600:	e7b1      	b.n	8001566 <__aeabi_fsub+0xca>
 8001602:	20fe      	movs	r0, #254	; 0xfe
 8001604:	1c6a      	adds	r2, r5, #1
 8001606:	4210      	tst	r0, r2
 8001608:	d171      	bne.n	80016ee <__aeabi_fsub+0x252>
 800160a:	2d00      	cmp	r5, #0
 800160c:	d000      	beq.n	8001610 <__aeabi_fsub+0x174>
 800160e:	e0a6      	b.n	800175e <__aeabi_fsub+0x2c2>
 8001610:	4663      	mov	r3, ip
 8001612:	2b00      	cmp	r3, #0
 8001614:	d100      	bne.n	8001618 <__aeabi_fsub+0x17c>
 8001616:	e0d9      	b.n	80017cc <__aeabi_fsub+0x330>
 8001618:	2200      	movs	r2, #0
 800161a:	2e00      	cmp	r6, #0
 800161c:	d100      	bne.n	8001620 <__aeabi_fsub+0x184>
 800161e:	e788      	b.n	8001532 <__aeabi_fsub+0x96>
 8001620:	1b98      	subs	r0, r3, r6
 8001622:	0143      	lsls	r3, r0, #5
 8001624:	d400      	bmi.n	8001628 <__aeabi_fsub+0x18c>
 8001626:	e0e1      	b.n	80017ec <__aeabi_fsub+0x350>
 8001628:	4663      	mov	r3, ip
 800162a:	000c      	movs	r4, r1
 800162c:	1af0      	subs	r0, r6, r3
 800162e:	e76f      	b.n	8001510 <__aeabi_fsub+0x74>
 8001630:	2e00      	cmp	r6, #0
 8001632:	d100      	bne.n	8001636 <__aeabi_fsub+0x19a>
 8001634:	e0b7      	b.n	80017a6 <__aeabi_fsub+0x30a>
 8001636:	0002      	movs	r2, r0
 8001638:	3a01      	subs	r2, #1
 800163a:	2801      	cmp	r0, #1
 800163c:	d100      	bne.n	8001640 <__aeabi_fsub+0x1a4>
 800163e:	e09c      	b.n	800177a <__aeabi_fsub+0x2de>
 8001640:	28ff      	cmp	r0, #255	; 0xff
 8001642:	d026      	beq.n	8001692 <__aeabi_fsub+0x1f6>
 8001644:	4690      	mov	r8, r2
 8001646:	e788      	b.n	800155a <__aeabi_fsub+0xbe>
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	2700      	movs	r7, #0
 800164c:	e771      	b.n	8001532 <__aeabi_fsub+0x96>
 800164e:	20fe      	movs	r0, #254	; 0xfe
 8001650:	1c6a      	adds	r2, r5, #1
 8001652:	4210      	tst	r0, r2
 8001654:	d064      	beq.n	8001720 <__aeabi_fsub+0x284>
 8001656:	2aff      	cmp	r2, #255	; 0xff
 8001658:	d0f6      	beq.n	8001648 <__aeabi_fsub+0x1ac>
 800165a:	0015      	movs	r5, r2
 800165c:	4466      	add	r6, ip
 800165e:	0870      	lsrs	r0, r6, #1
 8001660:	0743      	lsls	r3, r0, #29
 8001662:	d000      	beq.n	8001666 <__aeabi_fsub+0x1ca>
 8001664:	e756      	b.n	8001514 <__aeabi_fsub+0x78>
 8001666:	08c3      	lsrs	r3, r0, #3
 8001668:	2dff      	cmp	r5, #255	; 0xff
 800166a:	d012      	beq.n	8001692 <__aeabi_fsub+0x1f6>
 800166c:	025b      	lsls	r3, r3, #9
 800166e:	0a5f      	lsrs	r7, r3, #9
 8001670:	b2ea      	uxtb	r2, r5
 8001672:	e75e      	b.n	8001532 <__aeabi_fsub+0x96>
 8001674:	4662      	mov	r2, ip
 8001676:	2a00      	cmp	r2, #0
 8001678:	d100      	bne.n	800167c <__aeabi_fsub+0x1e0>
 800167a:	e096      	b.n	80017aa <__aeabi_fsub+0x30e>
 800167c:	2e00      	cmp	r6, #0
 800167e:	d008      	beq.n	8001692 <__aeabi_fsub+0x1f6>
 8001680:	2280      	movs	r2, #128	; 0x80
 8001682:	03d2      	lsls	r2, r2, #15
 8001684:	4213      	tst	r3, r2
 8001686:	d004      	beq.n	8001692 <__aeabi_fsub+0x1f6>
 8001688:	4648      	mov	r0, r9
 800168a:	4210      	tst	r0, r2
 800168c:	d101      	bne.n	8001692 <__aeabi_fsub+0x1f6>
 800168e:	000c      	movs	r4, r1
 8001690:	464b      	mov	r3, r9
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0d8      	beq.n	8001648 <__aeabi_fsub+0x1ac>
 8001696:	2780      	movs	r7, #128	; 0x80
 8001698:	03ff      	lsls	r7, r7, #15
 800169a:	431f      	orrs	r7, r3
 800169c:	027f      	lsls	r7, r7, #9
 800169e:	22ff      	movs	r2, #255	; 0xff
 80016a0:	0a7f      	lsrs	r7, r7, #9
 80016a2:	e746      	b.n	8001532 <__aeabi_fsub+0x96>
 80016a4:	2320      	movs	r3, #32
 80016a6:	003a      	movs	r2, r7
 80016a8:	1b45      	subs	r5, r0, r5
 80016aa:	0038      	movs	r0, r7
 80016ac:	3501      	adds	r5, #1
 80016ae:	40ea      	lsrs	r2, r5
 80016b0:	1b5d      	subs	r5, r3, r5
 80016b2:	40a8      	lsls	r0, r5
 80016b4:	1e43      	subs	r3, r0, #1
 80016b6:	4198      	sbcs	r0, r3
 80016b8:	2500      	movs	r5, #0
 80016ba:	4310      	orrs	r0, r2
 80016bc:	e728      	b.n	8001510 <__aeabi_fsub+0x74>
 80016be:	2320      	movs	r3, #32
 80016c0:	1a1b      	subs	r3, r3, r0
 80016c2:	0032      	movs	r2, r6
 80016c4:	409e      	lsls	r6, r3
 80016c6:	40c2      	lsrs	r2, r0
 80016c8:	0030      	movs	r0, r6
 80016ca:	1e43      	subs	r3, r0, #1
 80016cc:	4198      	sbcs	r0, r3
 80016ce:	4310      	orrs	r0, r2
 80016d0:	e70c      	b.n	80014ec <__aeabi_fsub+0x50>
 80016d2:	2aff      	cmp	r2, #255	; 0xff
 80016d4:	d0db      	beq.n	800168e <__aeabi_fsub+0x1f2>
 80016d6:	2380      	movs	r3, #128	; 0x80
 80016d8:	4660      	mov	r0, ip
 80016da:	04db      	lsls	r3, r3, #19
 80016dc:	4318      	orrs	r0, r3
 80016de:	4684      	mov	ip, r0
 80016e0:	2f1b      	cmp	r7, #27
 80016e2:	dd56      	ble.n	8001792 <__aeabi_fsub+0x2f6>
 80016e4:	2001      	movs	r0, #1
 80016e6:	000c      	movs	r4, r1
 80016e8:	0015      	movs	r5, r2
 80016ea:	1a30      	subs	r0, r6, r0
 80016ec:	e700      	b.n	80014f0 <__aeabi_fsub+0x54>
 80016ee:	4663      	mov	r3, ip
 80016f0:	1b9f      	subs	r7, r3, r6
 80016f2:	017b      	lsls	r3, r7, #5
 80016f4:	d43d      	bmi.n	8001772 <__aeabi_fsub+0x2d6>
 80016f6:	2f00      	cmp	r7, #0
 80016f8:	d000      	beq.n	80016fc <__aeabi_fsub+0x260>
 80016fa:	e6fe      	b.n	80014fa <__aeabi_fsub+0x5e>
 80016fc:	2400      	movs	r4, #0
 80016fe:	2200      	movs	r2, #0
 8001700:	2700      	movs	r7, #0
 8001702:	e716      	b.n	8001532 <__aeabi_fsub+0x96>
 8001704:	0005      	movs	r5, r0
 8001706:	e7af      	b.n	8001668 <__aeabi_fsub+0x1cc>
 8001708:	0032      	movs	r2, r6
 800170a:	4643      	mov	r3, r8
 800170c:	4641      	mov	r1, r8
 800170e:	40da      	lsrs	r2, r3
 8001710:	2320      	movs	r3, #32
 8001712:	1a5b      	subs	r3, r3, r1
 8001714:	409e      	lsls	r6, r3
 8001716:	0030      	movs	r0, r6
 8001718:	1e43      	subs	r3, r0, #1
 800171a:	4198      	sbcs	r0, r3
 800171c:	4310      	orrs	r0, r2
 800171e:	e721      	b.n	8001564 <__aeabi_fsub+0xc8>
 8001720:	2d00      	cmp	r5, #0
 8001722:	d1a7      	bne.n	8001674 <__aeabi_fsub+0x1d8>
 8001724:	4663      	mov	r3, ip
 8001726:	2b00      	cmp	r3, #0
 8001728:	d059      	beq.n	80017de <__aeabi_fsub+0x342>
 800172a:	2200      	movs	r2, #0
 800172c:	2e00      	cmp	r6, #0
 800172e:	d100      	bne.n	8001732 <__aeabi_fsub+0x296>
 8001730:	e6ff      	b.n	8001532 <__aeabi_fsub+0x96>
 8001732:	0030      	movs	r0, r6
 8001734:	4460      	add	r0, ip
 8001736:	0143      	lsls	r3, r0, #5
 8001738:	d592      	bpl.n	8001660 <__aeabi_fsub+0x1c4>
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <__aeabi_fsub+0x348>)
 800173c:	3501      	adds	r5, #1
 800173e:	4018      	ands	r0, r3
 8001740:	e78e      	b.n	8001660 <__aeabi_fsub+0x1c4>
 8001742:	4663      	mov	r3, ip
 8001744:	2b00      	cmp	r3, #0
 8001746:	d047      	beq.n	80017d8 <__aeabi_fsub+0x33c>
 8001748:	1e4b      	subs	r3, r1, #1
 800174a:	2901      	cmp	r1, #1
 800174c:	d015      	beq.n	800177a <__aeabi_fsub+0x2de>
 800174e:	29ff      	cmp	r1, #255	; 0xff
 8001750:	d02b      	beq.n	80017aa <__aeabi_fsub+0x30e>
 8001752:	0019      	movs	r1, r3
 8001754:	e74e      	b.n	80015f4 <__aeabi_fsub+0x158>
 8001756:	000c      	movs	r4, r1
 8001758:	464b      	mov	r3, r9
 800175a:	003d      	movs	r5, r7
 800175c:	e784      	b.n	8001668 <__aeabi_fsub+0x1cc>
 800175e:	4662      	mov	r2, ip
 8001760:	2a00      	cmp	r2, #0
 8001762:	d18b      	bne.n	800167c <__aeabi_fsub+0x1e0>
 8001764:	2e00      	cmp	r6, #0
 8001766:	d192      	bne.n	800168e <__aeabi_fsub+0x1f2>
 8001768:	2780      	movs	r7, #128	; 0x80
 800176a:	2400      	movs	r4, #0
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	03ff      	lsls	r7, r7, #15
 8001770:	e6df      	b.n	8001532 <__aeabi_fsub+0x96>
 8001772:	4663      	mov	r3, ip
 8001774:	000c      	movs	r4, r1
 8001776:	1af7      	subs	r7, r6, r3
 8001778:	e6bf      	b.n	80014fa <__aeabi_fsub+0x5e>
 800177a:	0030      	movs	r0, r6
 800177c:	4460      	add	r0, ip
 800177e:	2501      	movs	r5, #1
 8001780:	0143      	lsls	r3, r0, #5
 8001782:	d400      	bmi.n	8001786 <__aeabi_fsub+0x2ea>
 8001784:	e76c      	b.n	8001660 <__aeabi_fsub+0x1c4>
 8001786:	2502      	movs	r5, #2
 8001788:	e6f2      	b.n	8001570 <__aeabi_fsub+0xd4>
 800178a:	4663      	mov	r3, ip
 800178c:	2501      	movs	r5, #1
 800178e:	1b98      	subs	r0, r3, r6
 8001790:	e6ae      	b.n	80014f0 <__aeabi_fsub+0x54>
 8001792:	2320      	movs	r3, #32
 8001794:	4664      	mov	r4, ip
 8001796:	4660      	mov	r0, ip
 8001798:	40fc      	lsrs	r4, r7
 800179a:	1bdf      	subs	r7, r3, r7
 800179c:	40b8      	lsls	r0, r7
 800179e:	1e43      	subs	r3, r0, #1
 80017a0:	4198      	sbcs	r0, r3
 80017a2:	4320      	orrs	r0, r4
 80017a4:	e79f      	b.n	80016e6 <__aeabi_fsub+0x24a>
 80017a6:	0005      	movs	r5, r0
 80017a8:	e75e      	b.n	8001668 <__aeabi_fsub+0x1cc>
 80017aa:	464b      	mov	r3, r9
 80017ac:	e771      	b.n	8001692 <__aeabi_fsub+0x1f6>
 80017ae:	2320      	movs	r3, #32
 80017b0:	4665      	mov	r5, ip
 80017b2:	4660      	mov	r0, ip
 80017b4:	40cd      	lsrs	r5, r1
 80017b6:	1a59      	subs	r1, r3, r1
 80017b8:	4088      	lsls	r0, r1
 80017ba:	1e43      	subs	r3, r0, #1
 80017bc:	4198      	sbcs	r0, r3
 80017be:	4328      	orrs	r0, r5
 80017c0:	e71c      	b.n	80015fc <__aeabi_fsub+0x160>
 80017c2:	4663      	mov	r3, ip
 80017c4:	000c      	movs	r4, r1
 80017c6:	2501      	movs	r5, #1
 80017c8:	1af0      	subs	r0, r6, r3
 80017ca:	e691      	b.n	80014f0 <__aeabi_fsub+0x54>
 80017cc:	2e00      	cmp	r6, #0
 80017ce:	d095      	beq.n	80016fc <__aeabi_fsub+0x260>
 80017d0:	000c      	movs	r4, r1
 80017d2:	464f      	mov	r7, r9
 80017d4:	2200      	movs	r2, #0
 80017d6:	e6ac      	b.n	8001532 <__aeabi_fsub+0x96>
 80017d8:	464b      	mov	r3, r9
 80017da:	000d      	movs	r5, r1
 80017dc:	e744      	b.n	8001668 <__aeabi_fsub+0x1cc>
 80017de:	464f      	mov	r7, r9
 80017e0:	2200      	movs	r2, #0
 80017e2:	e6a6      	b.n	8001532 <__aeabi_fsub+0x96>
 80017e4:	fbffffff 	.word	0xfbffffff
 80017e8:	7dffffff 	.word	0x7dffffff
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d000      	beq.n	80017f2 <__aeabi_fsub+0x356>
 80017f0:	e736      	b.n	8001660 <__aeabi_fsub+0x1c4>
 80017f2:	2400      	movs	r4, #0
 80017f4:	2700      	movs	r7, #0
 80017f6:	e69c      	b.n	8001532 <__aeabi_fsub+0x96>

080017f8 <__aeabi_f2iz>:
 80017f8:	0241      	lsls	r1, r0, #9
 80017fa:	0042      	lsls	r2, r0, #1
 80017fc:	0fc3      	lsrs	r3, r0, #31
 80017fe:	0a49      	lsrs	r1, r1, #9
 8001800:	2000      	movs	r0, #0
 8001802:	0e12      	lsrs	r2, r2, #24
 8001804:	2a7e      	cmp	r2, #126	; 0x7e
 8001806:	dd03      	ble.n	8001810 <__aeabi_f2iz+0x18>
 8001808:	2a9d      	cmp	r2, #157	; 0x9d
 800180a:	dd02      	ble.n	8001812 <__aeabi_f2iz+0x1a>
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <__aeabi_f2iz+0x3c>)
 800180e:	1898      	adds	r0, r3, r2
 8001810:	4770      	bx	lr
 8001812:	2080      	movs	r0, #128	; 0x80
 8001814:	0400      	lsls	r0, r0, #16
 8001816:	4301      	orrs	r1, r0
 8001818:	2a95      	cmp	r2, #149	; 0x95
 800181a:	dc07      	bgt.n	800182c <__aeabi_f2iz+0x34>
 800181c:	2096      	movs	r0, #150	; 0x96
 800181e:	1a82      	subs	r2, r0, r2
 8001820:	40d1      	lsrs	r1, r2
 8001822:	4248      	negs	r0, r1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1f3      	bne.n	8001810 <__aeabi_f2iz+0x18>
 8001828:	0008      	movs	r0, r1
 800182a:	e7f1      	b.n	8001810 <__aeabi_f2iz+0x18>
 800182c:	3a96      	subs	r2, #150	; 0x96
 800182e:	4091      	lsls	r1, r2
 8001830:	e7f7      	b.n	8001822 <__aeabi_f2iz+0x2a>
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	7fffffff 	.word	0x7fffffff

08001838 <__aeabi_i2f>:
 8001838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800183a:	2800      	cmp	r0, #0
 800183c:	d013      	beq.n	8001866 <__aeabi_i2f+0x2e>
 800183e:	17c3      	asrs	r3, r0, #31
 8001840:	18c6      	adds	r6, r0, r3
 8001842:	405e      	eors	r6, r3
 8001844:	0fc4      	lsrs	r4, r0, #31
 8001846:	0030      	movs	r0, r6
 8001848:	f000 f886 	bl	8001958 <__clzsi2>
 800184c:	239e      	movs	r3, #158	; 0x9e
 800184e:	0005      	movs	r5, r0
 8001850:	1a1b      	subs	r3, r3, r0
 8001852:	2b96      	cmp	r3, #150	; 0x96
 8001854:	dc0f      	bgt.n	8001876 <__aeabi_i2f+0x3e>
 8001856:	2808      	cmp	r0, #8
 8001858:	dd01      	ble.n	800185e <__aeabi_i2f+0x26>
 800185a:	3d08      	subs	r5, #8
 800185c:	40ae      	lsls	r6, r5
 800185e:	0276      	lsls	r6, r6, #9
 8001860:	0a76      	lsrs	r6, r6, #9
 8001862:	b2d8      	uxtb	r0, r3
 8001864:	e002      	b.n	800186c <__aeabi_i2f+0x34>
 8001866:	2400      	movs	r4, #0
 8001868:	2000      	movs	r0, #0
 800186a:	2600      	movs	r6, #0
 800186c:	05c0      	lsls	r0, r0, #23
 800186e:	4330      	orrs	r0, r6
 8001870:	07e4      	lsls	r4, r4, #31
 8001872:	4320      	orrs	r0, r4
 8001874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001876:	2b99      	cmp	r3, #153	; 0x99
 8001878:	dd0c      	ble.n	8001894 <__aeabi_i2f+0x5c>
 800187a:	2205      	movs	r2, #5
 800187c:	0031      	movs	r1, r6
 800187e:	1a12      	subs	r2, r2, r0
 8001880:	40d1      	lsrs	r1, r2
 8001882:	000a      	movs	r2, r1
 8001884:	0001      	movs	r1, r0
 8001886:	0030      	movs	r0, r6
 8001888:	311b      	adds	r1, #27
 800188a:	4088      	lsls	r0, r1
 800188c:	1e41      	subs	r1, r0, #1
 800188e:	4188      	sbcs	r0, r1
 8001890:	4302      	orrs	r2, r0
 8001892:	0016      	movs	r6, r2
 8001894:	2d05      	cmp	r5, #5
 8001896:	dc12      	bgt.n	80018be <__aeabi_i2f+0x86>
 8001898:	0031      	movs	r1, r6
 800189a:	4f0d      	ldr	r7, [pc, #52]	; (80018d0 <__aeabi_i2f+0x98>)
 800189c:	4039      	ands	r1, r7
 800189e:	0772      	lsls	r2, r6, #29
 80018a0:	d009      	beq.n	80018b6 <__aeabi_i2f+0x7e>
 80018a2:	200f      	movs	r0, #15
 80018a4:	4030      	ands	r0, r6
 80018a6:	2804      	cmp	r0, #4
 80018a8:	d005      	beq.n	80018b6 <__aeabi_i2f+0x7e>
 80018aa:	3104      	adds	r1, #4
 80018ac:	014a      	lsls	r2, r1, #5
 80018ae:	d502      	bpl.n	80018b6 <__aeabi_i2f+0x7e>
 80018b0:	239f      	movs	r3, #159	; 0x9f
 80018b2:	4039      	ands	r1, r7
 80018b4:	1b5b      	subs	r3, r3, r5
 80018b6:	0189      	lsls	r1, r1, #6
 80018b8:	0a4e      	lsrs	r6, r1, #9
 80018ba:	b2d8      	uxtb	r0, r3
 80018bc:	e7d6      	b.n	800186c <__aeabi_i2f+0x34>
 80018be:	1f6a      	subs	r2, r5, #5
 80018c0:	4096      	lsls	r6, r2
 80018c2:	0031      	movs	r1, r6
 80018c4:	4f02      	ldr	r7, [pc, #8]	; (80018d0 <__aeabi_i2f+0x98>)
 80018c6:	4039      	ands	r1, r7
 80018c8:	0772      	lsls	r2, r6, #29
 80018ca:	d0f4      	beq.n	80018b6 <__aeabi_i2f+0x7e>
 80018cc:	e7e9      	b.n	80018a2 <__aeabi_i2f+0x6a>
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	fbffffff 	.word	0xfbffffff

080018d4 <__aeabi_ui2f>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	1e05      	subs	r5, r0, #0
 80018d8:	d00e      	beq.n	80018f8 <__aeabi_ui2f+0x24>
 80018da:	f000 f83d 	bl	8001958 <__clzsi2>
 80018de:	239e      	movs	r3, #158	; 0x9e
 80018e0:	0004      	movs	r4, r0
 80018e2:	1a1b      	subs	r3, r3, r0
 80018e4:	2b96      	cmp	r3, #150	; 0x96
 80018e6:	dc0c      	bgt.n	8001902 <__aeabi_ui2f+0x2e>
 80018e8:	2808      	cmp	r0, #8
 80018ea:	dd01      	ble.n	80018f0 <__aeabi_ui2f+0x1c>
 80018ec:	3c08      	subs	r4, #8
 80018ee:	40a5      	lsls	r5, r4
 80018f0:	026d      	lsls	r5, r5, #9
 80018f2:	0a6d      	lsrs	r5, r5, #9
 80018f4:	b2d8      	uxtb	r0, r3
 80018f6:	e001      	b.n	80018fc <__aeabi_ui2f+0x28>
 80018f8:	2000      	movs	r0, #0
 80018fa:	2500      	movs	r5, #0
 80018fc:	05c0      	lsls	r0, r0, #23
 80018fe:	4328      	orrs	r0, r5
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	2b99      	cmp	r3, #153	; 0x99
 8001904:	dd09      	ble.n	800191a <__aeabi_ui2f+0x46>
 8001906:	0002      	movs	r2, r0
 8001908:	0029      	movs	r1, r5
 800190a:	321b      	adds	r2, #27
 800190c:	4091      	lsls	r1, r2
 800190e:	1e4a      	subs	r2, r1, #1
 8001910:	4191      	sbcs	r1, r2
 8001912:	2205      	movs	r2, #5
 8001914:	1a12      	subs	r2, r2, r0
 8001916:	40d5      	lsrs	r5, r2
 8001918:	430d      	orrs	r5, r1
 800191a:	2c05      	cmp	r4, #5
 800191c:	dc12      	bgt.n	8001944 <__aeabi_ui2f+0x70>
 800191e:	0029      	movs	r1, r5
 8001920:	4e0c      	ldr	r6, [pc, #48]	; (8001954 <__aeabi_ui2f+0x80>)
 8001922:	4031      	ands	r1, r6
 8001924:	076a      	lsls	r2, r5, #29
 8001926:	d009      	beq.n	800193c <__aeabi_ui2f+0x68>
 8001928:	200f      	movs	r0, #15
 800192a:	4028      	ands	r0, r5
 800192c:	2804      	cmp	r0, #4
 800192e:	d005      	beq.n	800193c <__aeabi_ui2f+0x68>
 8001930:	3104      	adds	r1, #4
 8001932:	014a      	lsls	r2, r1, #5
 8001934:	d502      	bpl.n	800193c <__aeabi_ui2f+0x68>
 8001936:	239f      	movs	r3, #159	; 0x9f
 8001938:	4031      	ands	r1, r6
 800193a:	1b1b      	subs	r3, r3, r4
 800193c:	0189      	lsls	r1, r1, #6
 800193e:	0a4d      	lsrs	r5, r1, #9
 8001940:	b2d8      	uxtb	r0, r3
 8001942:	e7db      	b.n	80018fc <__aeabi_ui2f+0x28>
 8001944:	1f62      	subs	r2, r4, #5
 8001946:	4095      	lsls	r5, r2
 8001948:	0029      	movs	r1, r5
 800194a:	4e02      	ldr	r6, [pc, #8]	; (8001954 <__aeabi_ui2f+0x80>)
 800194c:	4031      	ands	r1, r6
 800194e:	076a      	lsls	r2, r5, #29
 8001950:	d0f4      	beq.n	800193c <__aeabi_ui2f+0x68>
 8001952:	e7e9      	b.n	8001928 <__aeabi_ui2f+0x54>
 8001954:	fbffffff 	.word	0xfbffffff

08001958 <__clzsi2>:
 8001958:	211c      	movs	r1, #28
 800195a:	2301      	movs	r3, #1
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	4298      	cmp	r0, r3
 8001960:	d301      	bcc.n	8001966 <__clzsi2+0xe>
 8001962:	0c00      	lsrs	r0, r0, #16
 8001964:	3910      	subs	r1, #16
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	4298      	cmp	r0, r3
 800196a:	d301      	bcc.n	8001970 <__clzsi2+0x18>
 800196c:	0a00      	lsrs	r0, r0, #8
 800196e:	3908      	subs	r1, #8
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	4298      	cmp	r0, r3
 8001974:	d301      	bcc.n	800197a <__clzsi2+0x22>
 8001976:	0900      	lsrs	r0, r0, #4
 8001978:	3904      	subs	r1, #4
 800197a:	a202      	add	r2, pc, #8	; (adr r2, 8001984 <__clzsi2+0x2c>)
 800197c:	5c10      	ldrb	r0, [r2, r0]
 800197e:	1840      	adds	r0, r0, r1
 8001980:	4770      	bx	lr
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	02020304 	.word	0x02020304
 8001988:	01010101 	.word	0x01010101
	...

08001994 <ADC_init>:

uint16_t get_adc2 (void) {
	return  adc_dat.adc_2;
}*/

void ADC_init (void){
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER4);      // установить аналог мод
 8001998:	2390      	movs	r3, #144	; 0x90
 800199a:	05db      	lsls	r3, r3, #23
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	2390      	movs	r3, #144	; 0x90
 80019a0:	05db      	lsls	r3, r3, #23
 80019a2:	21c0      	movs	r1, #192	; 0xc0
 80019a4:	0089      	lsls	r1, r1, #2
 80019a6:	430a      	orrs	r2, r1
 80019a8:	601a      	str	r2, [r3, #0]
	//SET_BIT(GPIOA->MODER, GPIO_MODER_MODER5);    // установить аналог мод
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADCEN);      // включим тактирование
 80019aa:	4b2b      	ldr	r3, [pc, #172]	; (8001a58 <ADC_init+0xc4>)
 80019ac:	699a      	ldr	r2, [r3, #24]
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <ADC_init+0xc4>)
 80019b0:	2180      	movs	r1, #128	; 0x80
 80019b2:	0089      	lsls	r1, r1, #2
 80019b4:	430a      	orrs	r2, r1
 80019b6:	619a      	str	r2, [r3, #24]
	SET_BIT(ADC1->SMPR, 0b011 << ADC_SMPR_SMP_Pos);                    // Количество циклов преобразования
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <ADC_init+0xc8>)
 80019ba:	695a      	ldr	r2, [r3, #20]
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <ADC_init+0xc8>)
 80019be:	2103      	movs	r1, #3
 80019c0:	430a      	orrs	r2, r1
 80019c2:	615a      	str	r2, [r3, #20]
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL4 | ADC_CHSELR_CHSEL5);      // выбор канала 4, выбор канала 5
 80019c4:	4b25      	ldr	r3, [pc, #148]	; (8001a5c <ADC_init+0xc8>)
 80019c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <ADC_init+0xc8>)
 80019ca:	2130      	movs	r1, #48	; 0x30
 80019cc:	430a      	orrs	r2, r1
 80019ce:	629a      	str	r2, [r3, #40]	; 0x28
    //SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL5);    // выбор канала 5
//SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL16);       // выбор канала temperature
//SET_BIT(ADC->CCR, ADC_CCR_TSEN);                 // температурный датчик включить
	SET_BIT(ADC1->CR, ADC_CR_ADCAL);               // Запустим калибровку
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <ADC_init+0xc8>)
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <ADC_init+0xc8>)
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	0609      	lsls	r1, r1, #24
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
	while (READ_BIT(ADC1->CR, ADC_CR_ADCAL));      // Дождемся поднятия флага о готовности
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <ADC_init+0xc8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	dbfb      	blt.n	80019e0 <ADC_init+0x4c>
	//SET_BIT(ADC1->IER, ADC_IER_EOCIE);           // включить прерывание
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_CONT);          // постоянный режим преобразования
 80019e8:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <ADC_init+0xc8>)
 80019ea:	68da      	ldr	r2, [r3, #12]
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <ADC_init+0xc8>)
 80019ee:	2180      	movs	r1, #128	; 0x80
 80019f0:	0189      	lsls	r1, r1, #6
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
	//SET_BIT(ADC1->CFGR1, ADC_CFGR1_ALIGN);       // левое правое выравнивание
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);         // ДМА ключить, ДМА в круговом режиме
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <ADC_init+0xc8>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <ADC_init+0xc8>)
 80019fc:	2103      	movs	r1, #3
 80019fe:	430a      	orrs	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]
//SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMACFG);          // ДМА в круговом режиме
	SET_BIT(ADC1->CR, ADC_CR_ADEN);                // Включим АЦП
 8001a02:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <ADC_init+0xc8>)
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <ADC_init+0xc8>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	609a      	str	r2, [r3, #8]
	SET_BIT(ADC1->CR, ADC_CR_ADSTART);             // Запустим преобразование
 8001a0e:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <ADC_init+0xc8>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <ADC_init+0xc8>)
 8001a14:	2104      	movs	r1, #4
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
	//NVIC_EnableIRQ(ADC1_IRQn);
	//NVIC_SetPriority(ADC1_IRQn, 3);              // выставим приоритет

	//----------------------- DMA --------------------------//
	SET_BIT(RCC->AHBENR, RCC_AHBENR_DMAEN);                 // включим тактирование ДМА
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <ADC_init+0xc4>)
 8001a1c:	695a      	ldr	r2, [r3, #20]
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <ADC_init+0xc4>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	615a      	str	r2, [r3, #20]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);            // адрес для переферии для считывания
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <ADC_init+0xcc>)
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <ADC_init+0xd0>)
 8001a2a:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)adc_buf;                // адрес памяти
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <ADC_init+0xcc>)
 8001a2e:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <ADC_init+0xd4>)
 8001a30:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 2;                               // размер буффера приема
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <ADC_init+0xcc>)
 8001a34:	2202      	movs	r2, #2
 8001a36:	605a      	str	r2, [r3, #4]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_PL_1 | DMA_CCR_CIRC | DMA_CCR_MSIZE_0 | DMA_CCR_PSIZE_0 | DMA_CCR_MINC);   // максимальный приоритет
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <ADC_init+0xcc>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <ADC_init+0xcc>)
 8001a3e:	490b      	ldr	r1, [pc, #44]	; (8001a6c <ADC_init+0xd8>)
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]
//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MSIZE_0);           // Размер памяти 16 бит
//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_PSIZE_0);           // Размер переферии 16 бит
//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MINC);              // инкрементировать память
	//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_TCIE);          // прерывание после передачи, а надо?
	//NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_EN);                // включить дма
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <ADC_init+0xcc>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <ADC_init+0xcc>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	46c0      	nop			; (mov r8, r8)
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40012400 	.word	0x40012400
 8001a60:	40020008 	.word	0x40020008
 8001a64:	40012440 	.word	0x40012440
 8001a68:	2000003c 	.word	0x2000003c
 8001a6c:	000025a0 	.word	0x000025a0

08001a70 <map>:

#include "main.h"

int32_t map(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	69b9      	ldr	r1, [r7, #24]
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	1a8a      	subs	r2, r1, r2
 8001a8a:	435a      	muls	r2, r3
 8001a8c:	0010      	movs	r0, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	0019      	movs	r1, r3
 8001a96:	f7fe ff37 	bl	8000908 <__divsi3>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	18d3      	adds	r3, r2, r3
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b004      	add	sp, #16
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <new_speed>:
		CLEAR_BIT(USART1->CR1, USART_CR1_UE);  // отключим USART
		set_baud(USART2, baud);
		SET_BIT(USART1->CR1, USART_CR1_UE);    // включим USART
}

uint32_t new_speed (uint32_t speed, uint32_t num_motor){     // новая скорость вращения.
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
	if (speed > 1000) return 0;                              // поиграться с этими параметрами
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	23fa      	movs	r3, #250	; 0xfa
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d901      	bls.n	8001ac4 <new_speed+0x18>
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e020      	b.n	8001b06 <new_speed+0x5a>
	if (num_motor == 0) {
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10c      	bne.n	8001ae4 <new_speed+0x38>
		TIM17->ARR = map (speed, 0, 1000, 30000, 100);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4910      	ldr	r1, [pc, #64]	; (8001b10 <new_speed+0x64>)
 8001ace:	23fa      	movs	r3, #250	; 0xfa
 8001ad0:	009a      	lsls	r2, r3, #2
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	000b      	movs	r3, r1
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f7ff ffc9 	bl	8001a70 <map>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <new_speed+0x68>)
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (num_motor == 1) {
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d10c      	bne.n	8001b04 <new_speed+0x58>
		TIM16->ARR = map (speed, 0, 1000, 30000, 100);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4908      	ldr	r1, [pc, #32]	; (8001b10 <new_speed+0x64>)
 8001aee:	23fa      	movs	r3, #250	; 0xfa
 8001af0:	009a      	lsls	r2, r3, #2
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	000b      	movs	r3, r1
 8001af8:	2100      	movs	r1, #0
 8001afa:	f7ff ffb9 	bl	8001a70 <map>
 8001afe:	0002      	movs	r2, r0
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <new_speed+0x6c>)
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return speed;
 8001b04:	687b      	ldr	r3, [r7, #4]
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	00007530 	.word	0x00007530
 8001b14:	40014800 	.word	0x40014800
 8001b18:	40014400 	.word	0x40014400

08001b1c <init_flash_data>:

void init_flash_data (void) {                                // инициализация параметров из памяти
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	TIM17->ARR = 10000;                     // скорость
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <init_flash_data+0x34>)
 8001b22:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <init_flash_data+0x38>)
 8001b24:	62da      	str	r2, [r3, #44]	; 0x2c
	write_to_TMC2300 (1,0x6C, 0x3008001);   //  выберем шаг 32
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <init_flash_data+0x3c>)
 8001b28:	001a      	movs	r2, r3
 8001b2a:	216c      	movs	r1, #108	; 0x6c
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	f001 f993 	bl	8002e58 <write_to_TMC2300>
	Delay_ms(2);
 8001b32:	2002      	movs	r0, #2
 8001b34:	f000 fa20 	bl	8001f78 <Delay_ms>
	write_to_TMC2300 (3,0x6C, 0x3008001);   //  выберем шаг 32
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <init_flash_data+0x3c>)
 8001b3a:	001a      	movs	r2, r3
 8001b3c:	216c      	movs	r1, #108	; 0x6c
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f001 f98a 	bl	8002e58 <write_to_TMC2300>
	Delay_ms(2);
 8001b44:	2002      	movs	r0, #2
 8001b46:	f000 fa17 	bl	8001f78 <Delay_ms>

}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40014800 	.word	0x40014800
 8001b54:	00002710 	.word	0x00002710
 8001b58:	03008001 	.word	0x03008001

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	0002      	movs	r2, r0
 8001b64:	1dfb      	adds	r3, r7, #7
 8001b66:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b7f      	cmp	r3, #127	; 0x7f
 8001b6e:	d809      	bhi.n	8001b84 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	001a      	movs	r2, r3
 8001b76:	231f      	movs	r3, #31
 8001b78:	401a      	ands	r2, r3
 8001b7a:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <__NVIC_EnableIRQ+0x30>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4091      	lsls	r1, r2
 8001b80:	000a      	movs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
  }
}
 8001b84:	46c0      	nop			; (mov r8, r8)
 8001b86:	46bd      	mov	sp, r7
 8001b88:	b002      	add	sp, #8
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	e000e100 	.word	0xe000e100

08001b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	0002      	movs	r2, r0
 8001b98:	6039      	str	r1, [r7, #0]
 8001b9a:	1dfb      	adds	r3, r7, #7
 8001b9c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b9e:	1dfb      	adds	r3, r7, #7
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b7f      	cmp	r3, #127	; 0x7f
 8001ba4:	d828      	bhi.n	8001bf8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba6:	4a2f      	ldr	r2, [pc, #188]	; (8001c64 <__NVIC_SetPriority+0xd4>)
 8001ba8:	1dfb      	adds	r3, r7, #7
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b25b      	sxtb	r3, r3
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	33c0      	adds	r3, #192	; 0xc0
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	589b      	ldr	r3, [r3, r2]
 8001bb6:	1dfa      	adds	r2, r7, #7
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	0011      	movs	r1, r2
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	00d2      	lsls	r2, r2, #3
 8001bc2:	21ff      	movs	r1, #255	; 0xff
 8001bc4:	4091      	lsls	r1, r2
 8001bc6:	000a      	movs	r2, r1
 8001bc8:	43d2      	mvns	r2, r2
 8001bca:	401a      	ands	r2, r3
 8001bcc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	019b      	lsls	r3, r3, #6
 8001bd2:	22ff      	movs	r2, #255	; 0xff
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	2303      	movs	r3, #3
 8001bde:	4003      	ands	r3, r0
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001be4:	481f      	ldr	r0, [pc, #124]	; (8001c64 <__NVIC_SetPriority+0xd4>)
 8001be6:	1dfb      	adds	r3, r7, #7
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b25b      	sxtb	r3, r3
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	33c0      	adds	r3, #192	; 0xc0
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bf6:	e031      	b.n	8001c5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf8:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <__NVIC_SetPriority+0xd8>)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	0019      	movs	r1, r3
 8001c00:	230f      	movs	r3, #15
 8001c02:	400b      	ands	r3, r1
 8001c04:	3b08      	subs	r3, #8
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3306      	adds	r3, #6
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	18d3      	adds	r3, r2, r3
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1dfa      	adds	r2, r7, #7
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	0011      	movs	r1, r2
 8001c18:	2203      	movs	r2, #3
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	401a      	ands	r2, r3
 8001c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	22ff      	movs	r2, #255	; 0xff
 8001c30:	401a      	ands	r2, r3
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	2303      	movs	r3, #3
 8001c3a:	4003      	ands	r3, r0
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c40:	4809      	ldr	r0, [pc, #36]	; (8001c68 <__NVIC_SetPriority+0xd8>)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	001c      	movs	r4, r3
 8001c48:	230f      	movs	r3, #15
 8001c4a:	4023      	ands	r3, r4
 8001c4c:	3b08      	subs	r3, #8
 8001c4e:	089b      	lsrs	r3, r3, #2
 8001c50:	430a      	orrs	r2, r1
 8001c52:	3306      	adds	r3, #6
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	18c3      	adds	r3, r0, r3
 8001c58:	3304      	adds	r3, #4
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b003      	add	sp, #12
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <init_rcc>:
volatile uint32_t Delay_counter_ms = 0; // Счетчик для функции Delay_ms
volatile uint32_t counter_ms = 0;       // Счетчик для функции pid
volatile uint32_t counter_ms1 = 0;      // Счетчик для функции pid
extern struct _flags *point_flags;

void init_rcc(void) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_HSEON);                                        // Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 8001c70:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <init_rcc+0xc8>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b2f      	ldr	r3, [pc, #188]	; (8001d34 <init_rcc+0xc8>)
 8001c76:	2180      	movs	r1, #128	; 0x80
 8001c78:	0249      	lsls	r1, r1, #9
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0);                         // Дождемся поднятия флага о готовности
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <init_rcc+0xc8>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d0f9      	beq.n	8001c80 <init_rcc+0x14>
	SET_BIT(FLASH->ACR, FLASH_ACR_LATENCY);                                // включим тактирование флеша
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <init_rcc+0xcc>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <init_rcc+0xcc>)
 8001c92:	2101      	movs	r1, #1
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE);                                 // включим буфер предварительной выборки ??
 8001c98:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <init_rcc+0xcc>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <init_rcc+0xcc>)
 8001c9e:	2110      	movs	r1, #16
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL, RCC_CFGR_PLLMUL6);              // умножаем на 6 PLLMUL
 8001ca4:	4b23      	ldr	r3, [pc, #140]	; (8001d34 <init_rcc+0xc8>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <init_rcc+0xd0>)
 8001caa:	401a      	ands	r2, r3
 8001cac:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <init_rcc+0xc8>)
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	0349      	lsls	r1, r1, #13
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_CFGR_PPRE_DIV1);              // APB1 делитель 1
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <init_rcc+0xc8>)
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <init_rcc+0xc8>)
 8001cbc:	4920      	ldr	r1, [pc, #128]	; (8001d40 <init_rcc+0xd4>)
 8001cbe:	400a      	ands	r2, r1
 8001cc0:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1);              // AHB делитель 1
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	; (8001d34 <init_rcc+0xc8>)
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <init_rcc+0xc8>)
 8001cc8:	21f0      	movs	r1, #240	; 0xf0
 8001cca:	438a      	bics	r2, r1
 8001ccc:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC, RCC_CFGR_PLLSRC_HSE_PREDIV);    // HSE как входящий для PLL
 8001cce:	4b19      	ldr	r3, [pc, #100]	; (8001d34 <init_rcc+0xc8>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <init_rcc+0xd8>)
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <init_rcc+0xc8>)
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0249      	lsls	r1, r1, #9
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
	SET_BIT(RCC->CR, RCC_CR_CSSON);                                        // Включим CSS
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <init_rcc+0xc8>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <init_rcc+0xc8>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0309      	lsls	r1, r1, #12
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
	SET_BIT(RCC->CR, RCC_CR_PLLON);                                        // Запустим PLL
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <init_rcc+0xc8>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <init_rcc+0xc8>)
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	0449      	lsls	r1, r1, #17
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]
	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0);                         // Дожидемся поднятия флага включения PLL
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <init_rcc+0xc8>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	049b      	lsls	r3, r3, #18
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0f9      	beq.n	8001cfe <init_rcc+0x92>
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL);                   // Выберем PLL в качестве System Clock
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <init_rcc+0xc8>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2203      	movs	r2, #3
 8001d10:	4393      	bics	r3, r2
 8001d12:	001a      	movs	r2, r3
 8001d14:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <init_rcc+0xc8>)
 8001d16:	2102      	movs	r1, #2
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]

	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN); //Включим тактирование порта А, Включим тактирование порта В
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <init_rcc+0xc8>)
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <init_rcc+0xc8>)
 8001d22:	21c0      	movs	r1, #192	; 0xc0
 8001d24:	02c9      	lsls	r1, r1, #11
 8001d26:	430a      	orrs	r2, r1
 8001d28:	615a      	str	r2, [r3, #20]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001d2a:	b662      	cpsie	i
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
	//SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN); //Включим тактирование порта В
	__enable_irq();                                                        // важно!
}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	ffc3ffff 	.word	0xffc3ffff
 8001d40:	fffff8ff 	.word	0xfffff8ff
 8001d44:	fffe7fff 	.word	0xfffe7fff

08001d48 <init_wdt>:

void init_wdt(void) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
#ifndef DEBUG_MODE
	WRITE_REG(IWDG->KR, 0x5555);              // разрешим запись в регистры IWDG
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <init_wdt+0x34>)
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <init_wdt+0x38>)
 8001d50:	601a      	str	r2, [r3, #0]
	WRITE_REG(IWDG->PR, 0x111);               // запишем делитель
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <init_wdt+0x34>)
 8001d54:	2212      	movs	r2, #18
 8001d56:	32ff      	adds	r2, #255	; 0xff
 8001d58:	605a      	str	r2, [r3, #4]
	WRITE_REG(IWDG->RLR, 0xFFF);              // запишем время до сброса
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <init_wdt+0x34>)
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <init_wdt+0x3c>)
 8001d5e:	609a      	str	r2, [r3, #8]
	WRITE_REG(IWDG->KR, 0xCCCC);              // запустим ватч дог
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <init_wdt+0x34>)
 8001d62:	4a09      	ldr	r2, [pc, #36]	; (8001d88 <init_wdt+0x40>)
 8001d64:	601a      	str	r2, [r3, #0]
	while (IWDG->SR);                         // дождемся установки
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <init_wdt+0x34>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1fb      	bne.n	8001d68 <init_wdt+0x20>
	WRITE_REG(IWDG->KR, 0xAAAA);              // сброс ватч дога
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <init_wdt+0x34>)
 8001d72:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <init_wdt+0x44>)
 8001d74:	601a      	str	r2, [r3, #0]
#endif
}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40003000 	.word	0x40003000
 8001d80:	00005555 	.word	0x00005555
 8001d84:	00000fff 	.word	0x00000fff
 8001d88:	0000cccc 	.word	0x0000cccc
 8001d8c:	0000aaaa 	.word	0x0000aaaa

08001d90 <iwdt_reset>:

void iwdt_reset(void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	WRITE_REG(IWDG->KR, 0xAAAA);              // сброс ватч дога
 8001d94:	4b02      	ldr	r3, [pc, #8]	; (8001da0 <iwdt_reset+0x10>)
 8001d96:	4a03      	ldr	r2, [pc, #12]	; (8001da4 <iwdt_reset+0x14>)
 8001d98:	601a      	str	r2, [r3, #0]
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40003000 	.word	0x40003000
 8001da4:	0000aaaa 	.word	0x0000aaaa

08001da8 <CMSIS_SysTick_Timer_init>:

void CMSIS_SysTick_Timer_init(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	/* п. 4.5.1 SysTick control and status register (STK_CTRL) (стр. 151)*/
	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 8001dac:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	438a      	bics	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 48MHz
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b0e      	ldr	r3, [pc, #56]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dca:	2104      	movs	r1, #4
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	601a      	str	r2, [r3, #0]
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk,
 8001dd0:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	0e1b      	lsrs	r3, r3, #24
 8001dd6:	061a      	lsls	r2, r3, #24
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dda:	490b      	ldr	r1, [pc, #44]	; (8001e08 <CMSIS_SysTick_Timer_init+0x60>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
			47999 << SysTick_LOAD_RELOAD_Pos); //Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk,
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	0e1b      	lsrs	r3, r3, #24
 8001de6:	061a      	lsls	r2, r3, #24
 8001de8:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001dea:	4907      	ldr	r1, [pc, #28]	; (8001e08 <CMSIS_SysTick_Timer_init+0x60>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	609a      	str	r2, [r3, #8]
			47999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 47999
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <CMSIS_SysTick_Timer_init+0x5c>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	46c0      	nop			; (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	e000e010 	.word	0xe000e010
 8001e08:	0000bb7f 	.word	0x0000bb7f

08001e0c <SysTick_Handler>:

void SysTick_Handler(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <SysTick_Handler+0x150>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	1c5a      	adds	r2, r3, #1
 8001e16:	4b51      	ldr	r3, [pc, #324]	; (8001f5c <SysTick_Handler+0x150>)
 8001e18:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms) {
 8001e1a:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <SysTick_Handler+0x154>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <SysTick_Handler+0x20>
		Delay_counter_ms--;
 8001e22:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <SysTick_Handler+0x154>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	1e5a      	subs	r2, r3, #1
 8001e28:	4b4d      	ldr	r3, [pc, #308]	; (8001f60 <SysTick_Handler+0x154>)
 8001e2a:	601a      	str	r2, [r3, #0]
	}

	if (counter_ms < 20)
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <SysTick_Handler+0x158>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b13      	cmp	r3, #19
 8001e32:	d805      	bhi.n	8001e40 <SysTick_Handler+0x34>
		counter_ms++;
 8001e34:	4b4b      	ldr	r3, [pc, #300]	; (8001f64 <SysTick_Handler+0x158>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <SysTick_Handler+0x158>)
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e008      	b.n	8001e52 <SysTick_Handler+0x46>
	else {
		point_flags->pid_ok = TRUE;
 8001e40:	4b49      	ldr	r3, [pc, #292]	; (8001f68 <SysTick_Handler+0x15c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	789a      	ldrb	r2, [r3, #2]
 8001e46:	2110      	movs	r1, #16
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	709a      	strb	r2, [r3, #2]
		counter_ms = 0;
 8001e4c:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <SysTick_Handler+0x158>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
	}

	if (point_flags->iwdt_res) {
 8001e52:	4b45      	ldr	r3, [pc, #276]	; (8001f68 <SysTick_Handler+0x15c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	789b      	ldrb	r3, [r3, #2]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <SysTick_Handler+0x5c>
		WRITE_REG(IWDG->KR, 0xAAAA);        // сброс ватч дога
 8001e62:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <SysTick_Handler+0x160>)
 8001e64:	4a42      	ldr	r2, [pc, #264]	; (8001f70 <SysTick_Handler+0x164>)
 8001e66:	601a      	str	r2, [r3, #0]
	}

	if (point_flags->delay > 0) { // тут бы в дальнейшем переделать на другой таймер
 8001e68:	4b3f      	ldr	r3, [pc, #252]	; (8001f68 <SysTick_Handler+0x15c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	23f0      	movs	r3, #240	; 0xf0
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4013      	ands	r3, r2
 8001e74:	d06f      	beq.n	8001f56 <SysTick_Handler+0x14a>
		if (point_flags->delay == 5) {
 8001e76:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <SysTick_Handler+0x15c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	23f0      	movs	r3, #240	; 0xf0
 8001e7e:	025b      	lsls	r3, r3, #9
 8001e80:	401a      	ands	r2, r3
 8001e82:	23a0      	movs	r3, #160	; 0xa0
 8001e84:	021b      	lsls	r3, r3, #8
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d108      	bne.n	8001e9c <SysTick_Handler+0x90>
			STEP3_OFF;
 8001e8a:	2390      	movs	r3, #144	; 0x90
 8001e8c:	05db      	lsls	r3, r3, #23
 8001e8e:	699a      	ldr	r2, [r3, #24]
 8001e90:	2390      	movs	r3, #144	; 0x90
 8001e92:	05db      	lsls	r3, r3, #23
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0409      	lsls	r1, r1, #16
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 4) {
 8001e9c:	4b32      	ldr	r3, [pc, #200]	; (8001f68 <SysTick_Handler+0x15c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	23f0      	movs	r3, #240	; 0xf0
 8001ea4:	025b      	lsls	r3, r3, #9
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d107      	bne.n	8001ec0 <SysTick_Handler+0xb4>
			STEP3_ON;
 8001eb0:	2390      	movs	r3, #144	; 0x90
 8001eb2:	05db      	lsls	r3, r3, #23
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	2390      	movs	r3, #144	; 0x90
 8001eb8:	05db      	lsls	r3, r3, #23
 8001eba:	2180      	movs	r1, #128	; 0x80
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 3) { // 5 вкл 3 раза, 3 вкл 2 раза, 1 вкл 1 раз
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <SysTick_Handler+0x15c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	23f0      	movs	r3, #240	; 0xf0
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	401a      	ands	r2, r3
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	01db      	lsls	r3, r3, #7
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d108      	bne.n	8001ee6 <SysTick_Handler+0xda>
			STEP3_OFF;
 8001ed4:	2390      	movs	r3, #144	; 0x90
 8001ed6:	05db      	lsls	r3, r3, #23
 8001ed8:	699a      	ldr	r2, [r3, #24]
 8001eda:	2390      	movs	r3, #144	; 0x90
 8001edc:	05db      	lsls	r3, r3, #23
 8001ede:	2180      	movs	r1, #128	; 0x80
 8001ee0:	0409      	lsls	r1, r1, #16
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 2) {
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <SysTick_Handler+0x15c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	23f0      	movs	r3, #240	; 0xf0
 8001eee:	025b      	lsls	r3, r3, #9
 8001ef0:	401a      	ands	r2, r3
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	01db      	lsls	r3, r3, #7
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d107      	bne.n	8001f0a <SysTick_Handler+0xfe>
			STEP3_ON;
 8001efa:	2390      	movs	r3, #144	; 0x90
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	699a      	ldr	r2, [r3, #24]
 8001f00:	2390      	movs	r3, #144	; 0x90
 8001f02:	05db      	lsls	r3, r3, #23
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	430a      	orrs	r2, r1
 8001f08:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 1) {
 8001f0a:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <SysTick_Handler+0x15c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	23f0      	movs	r3, #240	; 0xf0
 8001f12:	025b      	lsls	r3, r3, #9
 8001f14:	401a      	ands	r2, r3
 8001f16:	2380      	movs	r3, #128	; 0x80
 8001f18:	019b      	lsls	r3, r3, #6
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d108      	bne.n	8001f30 <SysTick_Handler+0x124>
			STEP3_OFF;
 8001f1e:	2390      	movs	r3, #144	; 0x90
 8001f20:	05db      	lsls	r3, r3, #23
 8001f22:	699a      	ldr	r2, [r3, #24]
 8001f24:	2390      	movs	r3, #144	; 0x90
 8001f26:	05db      	lsls	r3, r3, #23
 8001f28:	2180      	movs	r1, #128	; 0x80
 8001f2a:	0409      	lsls	r1, r1, #16
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	619a      	str	r2, [r3, #24]
		}
		point_flags->delay--;
 8001f30:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <SysTick_Handler+0x15c>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	03d2      	lsls	r2, r2, #15
 8001f38:	0f12      	lsrs	r2, r2, #28
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	320f      	adds	r2, #15
 8001f3e:	1c11      	adds	r1, r2, #0
 8001f40:	220f      	movs	r2, #15
 8001f42:	400a      	ands	r2, r1
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	210f      	movs	r1, #15
 8001f48:	400a      	ands	r2, r1
 8001f4a:	0352      	lsls	r2, r2, #13
 8001f4c:	6819      	ldr	r1, [r3, #0]
 8001f4e:	4809      	ldr	r0, [pc, #36]	; (8001f74 <SysTick_Handler+0x168>)
 8001f50:	4001      	ands	r1, r0
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
	}
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000040 	.word	0x20000040
 8001f60:	20000044 	.word	0x20000044
 8001f64:	20000048 	.word	0x20000048
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	40003000 	.word	0x40003000
 8001f70:	0000aaaa 	.word	0x0000aaaa
 8001f74:	fffe1fff 	.word	0xfffe1fff

08001f78 <Delay_ms>:

void Delay_ms(uint32_t Milliseconds) {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <Delay_ms+0x24>)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0);
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <Delay_ms+0x24>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1fb      	bne.n	8001f88 <Delay_ms+0x10>
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	20000044 	.word	0x20000044

08001fa0 <init_tim3>:

void init_tim3(void) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);             // включим тактирование
 8001fa4:	4b21      	ldr	r3, [pc, #132]	; (800202c <init_tim3+0x8c>)
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	4b20      	ldr	r3, [pc, #128]	; (800202c <init_tim3+0x8c>)
 8001faa:	2102      	movs	r1, #2
 8001fac:	430a      	orrs	r2, r1
 8001fae:	61da      	str	r2, [r3, #28]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER6_1);            // альтернативная функция
 8001fb0:	2390      	movs	r3, #144	; 0x90
 8001fb2:	05db      	lsls	r3, r3, #23
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	2390      	movs	r3, #144	; 0x90
 8001fb8:	05db      	lsls	r3, r3, #23
 8001fba:	2180      	movs	r1, #128	; 0x80
 8001fbc:	0189      	lsls	r1, r1, #6
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->AFR[0], 1 << GPIO_AFRL_AFRL6_Pos);      // TIM3
 8001fc2:	2390      	movs	r3, #144	; 0x90
 8001fc4:	05db      	lsls	r3, r3, #23
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	2390      	movs	r3, #144	; 0x90
 8001fca:	05db      	lsls	r3, r3, #23
 8001fcc:	2180      	movs	r1, #128	; 0x80
 8001fce:	0449      	lsls	r1, r1, #17
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	621a      	str	r2, [r3, #32]
	TIM3->PSC = 0;
 8001fd4:	4b16      	ldr	r3, [pc, #88]	; (8002030 <init_tim3+0x90>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 600;
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <init_tim3+0x90>)
 8001fdc:	2296      	movs	r2, #150	; 0x96
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 200;
 8001fe2:	4b13      	ldr	r3, [pc, #76]	; (8002030 <init_tim3+0x90>)
 8001fe4:	22c8      	movs	r2, #200	; 0xc8
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(TIM3->CR1, TIM_CR1_ARPE);                      // включить автоматическую перезагрузку
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <init_tim3+0x90>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <init_tim3+0x90>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM3->CCMR1, TIM_CCMR1_OC1PE);                 // загрузка значений в регистр сравнения немедленно
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <init_tim3+0x90>)
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <init_tim3+0x90>)
 8001ffa:	2108      	movs	r1, #8
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM3->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos);     // шим режим 1 (счет вперед)
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <init_tim3+0x90>)
 8002002:	699a      	ldr	r2, [r3, #24]
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <init_tim3+0x90>)
 8002006:	2160      	movs	r1, #96	; 0x60
 8002008:	430a      	orrs	r2, r1
 800200a:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM3->CCER, TIM_CCER_CC1E);                    // Сравнение 1 выхода включен.
 800200c:	4b08      	ldr	r3, [pc, #32]	; (8002030 <init_tim3+0x90>)
 800200e:	6a1a      	ldr	r2, [r3, #32]
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <init_tim3+0x90>)
 8002012:	2101      	movs	r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);                       // включить таймер
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <init_tim3+0x90>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b04      	ldr	r3, [pc, #16]	; (8002030 <init_tim3+0x90>)
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	40021000 	.word	0x40021000
 8002030:	40000400 	.word	0x40000400

08002034 <init_tim17>:

void init_tim17(uint16_t prescaler, uint16_t reload) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	0002      	movs	r2, r0
 800203c:	1dbb      	adds	r3, r7, #6
 800203e:	801a      	strh	r2, [r3, #0]
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	1c0a      	adds	r2, r1, #0
 8002044:	801a      	strh	r2, [r3, #0]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM17EN);   // включим тактирование
 8002046:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <init_tim17+0x6c>)
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <init_tim17+0x6c>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	02c9      	lsls	r1, r1, #11
 8002050:	430a      	orrs	r2, r1
 8002052:	619a      	str	r2, [r3, #24]
	TIM17->PSC = prescaler - 1;
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	881b      	ldrh	r3, [r3, #0]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <init_tim17+0x70>)
 800205c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM17->ARR = reload;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <init_tim17+0x70>)
 8002060:	1d3a      	adds	r2, r7, #4
 8002062:	8812      	ldrh	r2, [r2, #0]
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM17->CR1, TIM_CR1_ARPE);       // включить автоматическую перезагрузку
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <init_tim17+0x70>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <init_tim17+0x70>)
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM17->CR1, TIM_CR1_CEN);        // включить таймер
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <init_tim17+0x70>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <init_tim17+0x70>)
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);      // включим прерывание по обновлению
 800207e:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <init_tim17+0x70>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <init_tim17+0x70>)
 8002084:	2101      	movs	r1, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(TIM17_IRQn);
 800208a:	2016      	movs	r0, #22
 800208c:	f7ff fd66 	bl	8001b5c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM17_IRQn, 2);         // выставим приоритет
 8002090:	2102      	movs	r1, #2
 8002092:	2016      	movs	r0, #22
 8002094:	f7ff fd7c 	bl	8001b90 <__NVIC_SetPriority>
}
 8002098:	46c0      	nop			; (mov r8, r8)
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40014800 	.word	0x40014800

080020a8 <init_tim16>:

void init_tim16(uint16_t prescaler, uint16_t reload) {
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	1dbb      	adds	r3, r7, #6
 80020b2:	801a      	strh	r2, [r3, #0]
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	1c0a      	adds	r2, r1, #0
 80020b8:	801a      	strh	r2, [r3, #0]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM16EN);   // включим тактирование
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <init_tim16+0x60>)
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <init_tim16+0x60>)
 80020c0:	2180      	movs	r1, #128	; 0x80
 80020c2:	0289      	lsls	r1, r1, #10
 80020c4:	430a      	orrs	r2, r1
 80020c6:	619a      	str	r2, [r3, #24]
	TIM16->PSC = prescaler - 1;
 80020c8:	1dbb      	adds	r3, r7, #6
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	1e5a      	subs	r2, r3, #1
 80020ce:	4b0f      	ldr	r3, [pc, #60]	; (800210c <init_tim16+0x64>)
 80020d0:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = reload;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <init_tim16+0x64>)
 80020d4:	1d3a      	adds	r2, r7, #4
 80020d6:	8812      	ldrh	r2, [r2, #0]
 80020d8:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM16->CR1, TIM_CR1_ARPE);            // включить автоматическую перезагрузку
 80020da:	4b0c      	ldr	r3, [pc, #48]	; (800210c <init_tim16+0x64>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <init_tim16+0x64>)
 80020e0:	2180      	movs	r1, #128	; 0x80
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM16->CR1, TIM_CR1_CEN);             // включить таймер
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <init_tim16+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <init_tim16+0x64>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	430a      	orrs	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]
	//SET_BIT(TIM16->DIER, TIM_DIER_UIE);         // включим прерывание по обновлению

	NVIC_EnableIRQ(TIM16_IRQn);
 80020f2:	2015      	movs	r0, #21
 80020f4:	f7ff fd32 	bl	8001b5c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM16_IRQn, 2);              // выставим приоритет
 80020f8:	2102      	movs	r1, #2
 80020fa:	2015      	movs	r0, #21
 80020fc:	f7ff fd48 	bl	8001b90 <__NVIC_SetPriority>
}
 8002100:	46c0      	nop			; (mov r8, r8)
 8002102:	46bd      	mov	sp, r7
 8002104:	b002      	add	sp, #8
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	40014400 	.word	0x40014400

08002110 <init_pins>:

void init_pins(void) {
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER0_0 | GPIO_MODER_MODER1_0 | GPIO_MODER_MODER7_0);  // на выход А0,А1,А7
 8002114:	2390      	movs	r3, #144	; 0x90
 8002116:	05db      	lsls	r3, r3, #23
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	2390      	movs	r3, #144	; 0x90
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	4914      	ldr	r1, [pc, #80]	; (8002170 <init_pins+0x60>)
 8002120:	430a      	orrs	r2, r1
 8002122:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR0 | GPIO_OSPEEDR_OSPEEDR1| GPIO_OSPEEDR_OSPEEDR7);     // максимальная скорость
 8002124:	2390      	movs	r3, #144	; 0x90
 8002126:	05db      	lsls	r3, r3, #23
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	2390      	movs	r3, #144	; 0x90
 800212c:	05db      	lsls	r3, r3, #23
 800212e:	4911      	ldr	r1, [pc, #68]	; (8002174 <init_pins+0x64>)
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER1_0 | GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0);  // на выход В1, В3, В4, В5
 8002134:	4b10      	ldr	r3, [pc, #64]	; (8002178 <init_pins+0x68>)
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <init_pins+0x68>)
 800213a:	4910      	ldr	r1, [pc, #64]	; (800217c <init_pins+0x6c>)
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR1 | GPIO_OSPEEDR_OSPEEDR3 | GPIO_OSPEEDR_OSPEEDR4 | GPIO_OSPEEDR_OSPEEDR5);     // максимальная скорость
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <init_pins+0x68>)
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <init_pins+0x68>)
 8002146:	490e      	ldr	r1, [pc, #56]	; (8002180 <init_pins+0x70>)
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6); // на вход В6
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <init_pins+0x68>)
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	4b09      	ldr	r3, [pc, #36]	; (8002178 <init_pins+0x68>)
 8002152:	21c0      	movs	r1, #192	; 0xc0
 8002154:	0189      	lsls	r1, r1, #6
 8002156:	430a      	orrs	r2, r1
 8002158:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR7); // на вход В7
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <init_pins+0x68>)
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <init_pins+0x68>)
 8002160:	21c0      	movs	r1, #192	; 0xc0
 8002162:	0209      	lsls	r1, r1, #8
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]

}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	00004005 	.word	0x00004005
 8002174:	0000c00f 	.word	0x0000c00f
 8002178:	48000400 	.word	0x48000400
 800217c:	00000544 	.word	0x00000544
 8002180:	00000fcc 	.word	0x00000fcc

08002184 <init_debug_pin>:

void init_debug_pin(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER13_Msk, GPIO_MODER_MODER13_0); // на выход А13
 8002188:	2390      	movs	r3, #144	; 0x90
 800218a:	05db      	lsls	r3, r3, #23
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <init_debug_pin+0x9c>)
 8002190:	401a      	ands	r2, r3
 8002192:	2390      	movs	r3, #144	; 0x90
 8002194:	05db      	lsls	r3, r3, #23
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	04c9      	lsls	r1, r1, #19
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_13);         // push_pull
 800219e:	2390      	movs	r3, #144	; 0x90
 80021a0:	05db      	lsls	r3, r3, #23
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	2390      	movs	r3, #144	; 0x90
 80021a6:	05db      	lsls	r3, r3, #23
 80021a8:	491e      	ldr	r1, [pc, #120]	; (8002224 <init_debug_pin+0xa0>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR13_Msk);     // без резисторов
 80021ae:	2390      	movs	r3, #144	; 0x90
 80021b0:	05db      	lsls	r3, r3, #23
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	2390      	movs	r3, #144	; 0x90
 80021b6:	05db      	lsls	r3, r3, #23
 80021b8:	4919      	ldr	r1, [pc, #100]	; (8002220 <init_debug_pin+0x9c>)
 80021ba:	400a      	ands	r2, r1
 80021bc:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR13);     // максимальная скорость
 80021be:	2390      	movs	r3, #144	; 0x90
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	2390      	movs	r3, #144	; 0x90
 80021c6:	05db      	lsls	r3, r3, #23
 80021c8:	21c0      	movs	r1, #192	; 0xc0
 80021ca:	0509      	lsls	r1, r1, #20
 80021cc:	430a      	orrs	r2, r1
 80021ce:	609a      	str	r2, [r3, #8]

	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER14_Msk, GPIO_MODER_MODER14_0); // на выход А14
 80021d0:	2390      	movs	r3, #144	; 0x90
 80021d2:	05db      	lsls	r3, r3, #23
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a14      	ldr	r2, [pc, #80]	; (8002228 <init_debug_pin+0xa4>)
 80021d8:	401a      	ands	r2, r3
 80021da:	2390      	movs	r3, #144	; 0x90
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	0549      	lsls	r1, r1, #21
 80021e2:	430a      	orrs	r2, r1
 80021e4:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_14);         // push_pull
 80021e6:	2390      	movs	r3, #144	; 0x90
 80021e8:	05db      	lsls	r3, r3, #23
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	2390      	movs	r3, #144	; 0x90
 80021ee:	05db      	lsls	r3, r3, #23
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <init_debug_pin+0xa8>)
 80021f2:	400a      	ands	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR14_Msk);     // без резисторов
 80021f6:	2390      	movs	r3, #144	; 0x90
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	2390      	movs	r3, #144	; 0x90
 80021fe:	05db      	lsls	r3, r3, #23
 8002200:	4909      	ldr	r1, [pc, #36]	; (8002228 <init_debug_pin+0xa4>)
 8002202:	400a      	ands	r2, r1
 8002204:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR14);     // максимальная скорость
 8002206:	2390      	movs	r3, #144	; 0x90
 8002208:	05db      	lsls	r3, r3, #23
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	2390      	movs	r3, #144	; 0x90
 800220e:	05db      	lsls	r3, r3, #23
 8002210:	21c0      	movs	r1, #192	; 0xc0
 8002212:	0589      	lsls	r1, r1, #22
 8002214:	430a      	orrs	r2, r1
 8002216:	609a      	str	r2, [r3, #8]
}
 8002218:	46c0      	nop			; (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	f3ffffff 	.word	0xf3ffffff
 8002224:	ffffdfff 	.word	0xffffdfff
 8002228:	cfffffff 	.word	0xcfffffff
 800222c:	ffffbfff 	.word	0xffffbfff

08002230 <new_data_flag>:
struct stepp stepp_2;

struct _flags flags;
struct _flags *point_flags = &flags;

void new_data_flag (uint32_t flag) {                           // проверяем если биты совпадают то ничего не делаем
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
	if (point_flags->ir_filter == 0 && (flag & 0x01)){         // а если не совпадают то переставляем бит и делаем операцию
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <new_data_flag+0x9c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	227f      	movs	r2, #127	; 0x7f
 8002240:	4393      	bics	r3, r2
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d11a      	bne.n	800227e <new_data_flag+0x4e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	4013      	ands	r3, r2
 800224e:	d016      	beq.n	800227e <new_data_flag+0x4e>
		point_flags->ir_filter = 1;
 8002250:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <new_data_flag+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	2180      	movs	r1, #128	; 0x80
 8002258:	4249      	negs	r1, r1
 800225a:	430a      	orrs	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]
		STEP3_ON;
 800225e:	2390      	movs	r3, #144	; 0x90
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	2390      	movs	r3, #144	; 0x90
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	2180      	movs	r1, #128	; 0x80
 800226a:	430a      	orrs	r2, r1
 800226c:	619a      	str	r2, [r3, #24]
		flags.delay = 4;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <new_data_flag+0xa0>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	4918      	ldr	r1, [pc, #96]	; (80022d4 <new_data_flag+0xa4>)
 8002274:	400a      	ands	r2, r1
 8002276:	2180      	movs	r1, #128	; 0x80
 8002278:	0209      	lsls	r1, r1, #8
 800227a:	430a      	orrs	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
	}
	if (point_flags->ir_filter == 1 && !(flag & 0x01)) {
 800227e:	4b13      	ldr	r3, [pc, #76]	; (80022cc <new_data_flag+0x9c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	227f      	movs	r2, #127	; 0x7f
 8002286:	4393      	bics	r3, r2
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d019      	beq.n	80022c2 <new_data_flag+0x92>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	4013      	ands	r3, r2
 8002294:	d115      	bne.n	80022c2 <new_data_flag+0x92>
		point_flags->ir_filter = 0;
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <new_data_flag+0x9c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	217f      	movs	r1, #127	; 0x7f
 800229e:	400a      	ands	r2, r1
 80022a0:	701a      	strb	r2, [r3, #0]
		STEP3_ON;
 80022a2:	2390      	movs	r3, #144	; 0x90
 80022a4:	05db      	lsls	r3, r3, #23
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	2390      	movs	r3, #144	; 0x90
 80022aa:	05db      	lsls	r3, r3, #23
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	430a      	orrs	r2, r1
 80022b0:	619a      	str	r2, [r3, #24]
		flags.delay = 4;
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <new_data_flag+0xa0>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4907      	ldr	r1, [pc, #28]	; (80022d4 <new_data_flag+0xa4>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	0209      	lsls	r1, r1, #8
 80022be:	430a      	orrs	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
	}
}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	20000000 	.word	0x20000000
 80022d0:	2000006c 	.word	0x2000006c
 80022d4:	fffe1fff 	.word	0xfffe1fff

080022d8 <stop_motor>:

void stop_motor (void){
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	stepp_1.curent_steps = stepp_1.last_steps;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <stop_motor+0x1c>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <stop_motor+0x1c>)
 80022e2:	605a      	str	r2, [r3, #4]
	stepp_2.curent_steps = stepp_2.last_steps;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <stop_motor+0x20>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <stop_motor+0x20>)
 80022ea:	605a      	str	r2, [r3, #4]
}
 80022ec:	46c0      	nop			; (mov r8, r8)
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	2000004c 	.word	0x2000004c
 80022f8:	2000005c 	.word	0x2000005c

080022fc <poz_motor>:

uint32_t poz_motor (uint8_t num_motor){
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	0002      	movs	r2, r0
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	701a      	strb	r2, [r3, #0]
	if (num_motor == 1) {
 8002308:	1dfb      	adds	r3, r7, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <poz_motor+0x1a>
		return stepp_1.last_steps ;  // для совместимости с входящими данными
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <poz_motor+0x34>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	e007      	b.n	8002326 <poz_motor+0x2a>
	}
	if (num_motor == 2) {
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b02      	cmp	r3, #2
 800231c:	d102      	bne.n	8002324 <poz_motor+0x28>
		return stepp_2.last_steps ;
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <poz_motor+0x38>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	e000      	b.n	8002326 <poz_motor+0x2a>
	}
	return 0;
 8002324:	2300      	movs	r3, #0
}
 8002326:	0018      	movs	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	b002      	add	sp, #8
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	2000004c 	.word	0x2000004c
 8002334:	2000005c 	.word	0x2000005c

08002338 <search_zero>:

static inline void search_zero(void) {              // поиск нуля
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	if (!flags.start_zero) {                        // если мы первый раз заходим в прерывание
 800233c:	4b5b      	ldr	r3, [pc, #364]	; (80024ac <search_zero+0x174>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2204      	movs	r2, #4
 8002342:	4013      	ands	r3, r2
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d112      	bne.n	8002370 <search_zero+0x38>
		flags.start_zero = TRUE;                    // сбросим флаг первого раза
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <search_zero+0x174>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	2104      	movs	r1, #4
 8002350:	430a      	orrs	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
		DIR1_OFF;                                    // установим дир в нужное положение, чтоб шагать к концевику
 8002354:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <search_zero+0x178>)
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <search_zero+0x178>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0389      	lsls	r1, r1, #14
 800235e:	430a      	orrs	r2, r1
 8002360:	619a      	str	r2, [r3, #24]
		DIR2_ON;                                    // сюда заходим один раз чтоб сначала установить дир, а потом шагать
 8002362:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <search_zero+0x178>)
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <search_zero+0x178>)
 8002368:	2110      	movs	r1, #16
 800236a:	430a      	orrs	r2, r1
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	e06f      	b.n	8002450 <search_zero+0x118>
	} else {                                        // если уже не первый раз заходим
		if (!READ_LIM1 && !flags.zero_pos1) {        // считаем состояние концевика, если не ноль, шагаем
 8002370:	4b4f      	ldr	r3, [pc, #316]	; (80024b0 <search_zero+0x178>)
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2280      	movs	r2, #128	; 0x80
 8002376:	4013      	ands	r3, r2
 8002378:	d124      	bne.n	80023c4 <search_zero+0x8c>
 800237a:	4b4c      	ldr	r3, [pc, #304]	; (80024ac <search_zero+0x174>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2201      	movs	r2, #1
 8002380:	4013      	ands	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11d      	bne.n	80023c4 <search_zero+0x8c>
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002388:	2390      	movs	r3, #144	; 0x90
 800238a:	05db      	lsls	r3, r3, #23
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	2201      	movs	r2, #1
 8002390:	4013      	ands	r3, r2
 8002392:	d009      	beq.n	80023a8 <search_zero+0x70>
				STEP1_OFF;                          // если 1 то выставим 0
 8002394:	2390      	movs	r3, #144	; 0x90
 8002396:	05db      	lsls	r3, r3, #23
 8002398:	699a      	ldr	r2, [r3, #24]
 800239a:	2390      	movs	r3, #144	; 0x90
 800239c:	05db      	lsls	r3, r3, #23
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	0249      	lsls	r1, r1, #9
 80023a2:	430a      	orrs	r2, r1
 80023a4:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 80023a6:	e01b      	b.n	80023e0 <search_zero+0xa8>
			else {
				STEP1_ON;                           // если же там 0 то установим 1 на выходе
 80023a8:	2390      	movs	r3, #144	; 0x90
 80023aa:	05db      	lsls	r3, r3, #23
 80023ac:	699a      	ldr	r2, [r3, #24]
 80023ae:	2390      	movs	r3, #144	; 0x90
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	2101      	movs	r1, #1
 80023b4:	430a      	orrs	r2, r1
 80023b6:	619a      	str	r2, [r3, #24]
				stepp_1.step_down --;               // считаем переменную количества шагов от конца --;
 80023b8:	4b3e      	ldr	r3, [pc, #248]	; (80024b4 <search_zero+0x17c>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <search_zero+0x17c>)
 80023c0:	60da      	str	r2, [r3, #12]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 80023c2:	e00d      	b.n	80023e0 <search_zero+0xa8>
			}
		} else {
			flags.zero_pos1 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 80023c4:	4b39      	ldr	r3, [pc, #228]	; (80024ac <search_zero+0x174>)
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	2101      	movs	r1, #1
 80023ca:	430a      	orrs	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
			STEP1_OFF;                              // и сбрасываем степ в 0
 80023ce:	2390      	movs	r3, #144	; 0x90
 80023d0:	05db      	lsls	r3, r3, #23
 80023d2:	699a      	ldr	r2, [r3, #24]
 80023d4:	2390      	movs	r3, #144	; 0x90
 80023d6:	05db      	lsls	r3, r3, #23
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	619a      	str	r2, [r3, #24]
		}
		if (READ_LIM2 && !flags.zero_pos2) {        // считаем состояние концевика, если не ноль, шагаем
 80023e0:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <search_zero+0x178>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2240      	movs	r2, #64	; 0x40
 80023e6:	4013      	ands	r3, r2
 80023e8:	d024      	beq.n	8002434 <search_zero+0xfc>
 80023ea:	4b30      	ldr	r3, [pc, #192]	; (80024ac <search_zero+0x174>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d11d      	bne.n	8002434 <search_zero+0xfc>
			if (GPIOA->IDR & GPIO_IDR_1)
 80023f8:	2390      	movs	r3, #144	; 0x90
 80023fa:	05db      	lsls	r3, r3, #23
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2202      	movs	r2, #2
 8002400:	4013      	ands	r3, r2
 8002402:	d009      	beq.n	8002418 <search_zero+0xe0>
				STEP2_OFF;                          // считаем что у нас сейчас в регистре выхода, если 1 то выставим 0
 8002404:	2390      	movs	r3, #144	; 0x90
 8002406:	05db      	lsls	r3, r3, #23
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	2390      	movs	r3, #144	; 0x90
 800240c:	05db      	lsls	r3, r3, #23
 800240e:	2180      	movs	r1, #128	; 0x80
 8002410:	0289      	lsls	r1, r1, #10
 8002412:	430a      	orrs	r2, r1
 8002414:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002416:	e01b      	b.n	8002450 <search_zero+0x118>
			else {
				STEP2_ON;                           // если же там 0 то установим 1 на выходе
 8002418:	2390      	movs	r3, #144	; 0x90
 800241a:	05db      	lsls	r3, r3, #23
 800241c:	699a      	ldr	r2, [r3, #24]
 800241e:	2390      	movs	r3, #144	; 0x90
 8002420:	05db      	lsls	r3, r3, #23
 8002422:	2102      	movs	r1, #2
 8002424:	430a      	orrs	r2, r1
 8002426:	619a      	str	r2, [r3, #24]
				stepp_2.step_down --;
 8002428:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <search_zero+0x180>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <search_zero+0x180>)
 8002430:	60da      	str	r2, [r3, #12]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002432:	e00d      	b.n	8002450 <search_zero+0x118>
			}
		} else {
			flags.zero_pos2 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002434:	4b1d      	ldr	r3, [pc, #116]	; (80024ac <search_zero+0x174>)
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	2102      	movs	r1, #2
 800243a:	430a      	orrs	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
			STEP2_OFF;
 800243e:	2390      	movs	r3, #144	; 0x90
 8002440:	05db      	lsls	r3, r3, #23
 8002442:	699a      	ldr	r2, [r3, #24]
 8002444:	2390      	movs	r3, #144	; 0x90
 8002446:	05db      	lsls	r3, r3, #23
 8002448:	2180      	movs	r1, #128	; 0x80
 800244a:	0289      	lsls	r1, r1, #10
 800244c:	430a      	orrs	r2, r1
 800244e:	619a      	str	r2, [r3, #24]
		}
	}

	if (flags.zero_pos1 && flags.zero_pos2) {            // если сработало два флага значит мы в нулях
 8002450:	4b16      	ldr	r3, [pc, #88]	; (80024ac <search_zero+0x174>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2201      	movs	r2, #1
 8002456:	4013      	ands	r3, r2
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d022      	beq.n	80024a4 <search_zero+0x16c>
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <search_zero+0x174>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2202      	movs	r2, #2
 8002464:	4013      	ands	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d01b      	beq.n	80024a4 <search_zero+0x16c>
		flags.zero_ok = TRUE;                            // установим флаг
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <search_zero+0x174>)
 800246e:	781a      	ldrb	r2, [r3, #0]
 8002470:	2118      	movs	r1, #24
 8002472:	438a      	bics	r2, r1
 8002474:	1c11      	adds	r1, r2, #0
 8002476:	2208      	movs	r2, #8
 8002478:	430a      	orrs	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
		stepp_1.last_steps = 0;//stepp_1.step_down << 5;     // приравняем в текущие шаги то сколько отшагали от конца
 800247c:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <search_zero+0x17c>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
		stepp_2.last_steps = 0;//stepp_2.step_down << 5;
 8002482:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <search_zero+0x180>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
		stepp_1.curent_steps = stepp_1.last_steps;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <search_zero+0x17c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <search_zero+0x17c>)
 800248e:	605a      	str	r2, [r3, #4]
		stepp_2.curent_steps = stepp_2.last_steps;
 8002490:	4b09      	ldr	r3, [pc, #36]	; (80024b8 <search_zero+0x180>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <search_zero+0x180>)
 8002496:	605a      	str	r2, [r3, #4]
		//flags.zero_in_programm = FALSE;             // сбросить флаг обнуления в программе
		//flags.reset_setting = TRUE;                 // установить флаг что нужно перенастроить шаги, скорость
		CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);         // выключим прерывание по обновлению
 8002498:	4b08      	ldr	r3, [pc, #32]	; (80024bc <search_zero+0x184>)
 800249a:	68da      	ldr	r2, [r3, #12]
 800249c:	4b07      	ldr	r3, [pc, #28]	; (80024bc <search_zero+0x184>)
 800249e:	2101      	movs	r1, #1
 80024a0:	438a      	bics	r2, r1
 80024a2:	60da      	str	r2, [r3, #12]
	}
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	2000006c 	.word	0x2000006c
 80024b0:	48000400 	.word	0x48000400
 80024b4:	2000004c 	.word	0x2000004c
 80024b8:	2000005c 	.word	0x2000005c
 80024bc:	40014800 	.word	0x40014800

080024c0 <revers_zero>:

static inline void revers_zero (void){
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
	if (!flags.start_zero) {                        // если мы первый раз заходим в прерывание
 80024c4:	4b54      	ldr	r3, [pc, #336]	; (8002618 <revers_zero+0x158>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2204      	movs	r2, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d112      	bne.n	80024f8 <revers_zero+0x38>
		flags.start_zero = TRUE;                    // сбросим флаг первого раза
 80024d2:	4b51      	ldr	r3, [pc, #324]	; (8002618 <revers_zero+0x158>)
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	2104      	movs	r1, #4
 80024d8:	430a      	orrs	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
		DIR1_ON;                                   // установим дир в нужное положение, чтоб шагать к концевику
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <revers_zero+0x15c>)
 80024de:	699a      	ldr	r2, [r3, #24]
 80024e0:	4b4e      	ldr	r3, [pc, #312]	; (800261c <revers_zero+0x15c>)
 80024e2:	2120      	movs	r1, #32
 80024e4:	430a      	orrs	r2, r1
 80024e6:	619a      	str	r2, [r3, #24]
		DIR2_OFF;                                    // сюда заходим один раз чтоб сначала установить дир, а потом шагать
 80024e8:	4b4c      	ldr	r3, [pc, #304]	; (800261c <revers_zero+0x15c>)
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	4b4b      	ldr	r3, [pc, #300]	; (800261c <revers_zero+0x15c>)
 80024ee:	2180      	movs	r1, #128	; 0x80
 80024f0:	0349      	lsls	r1, r1, #13
 80024f2:	430a      	orrs	r2, r1
 80024f4:	619a      	str	r2, [r3, #24]
 80024f6:	e06f      	b.n	80025d8 <revers_zero+0x118>
	} else {                                        // если уже не первый раз заходим
		if (READ_LIM1 && !flags.zero_pos1) {       // считаем состояние концевика, если ноль, шагаем
 80024f8:	4b48      	ldr	r3, [pc, #288]	; (800261c <revers_zero+0x15c>)
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2280      	movs	r2, #128	; 0x80
 80024fe:	4013      	ands	r3, r2
 8002500:	d024      	beq.n	800254c <revers_zero+0x8c>
 8002502:	4b45      	ldr	r3, [pc, #276]	; (8002618 <revers_zero+0x158>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2201      	movs	r2, #1
 8002508:	4013      	ands	r3, r2
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11d      	bne.n	800254c <revers_zero+0x8c>
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002510:	2390      	movs	r3, #144	; 0x90
 8002512:	05db      	lsls	r3, r3, #23
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	d009      	beq.n	8002530 <revers_zero+0x70>
				STEP1_OFF;                          // если 1 то выставим 0
 800251c:	2390      	movs	r3, #144	; 0x90
 800251e:	05db      	lsls	r3, r3, #23
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	2390      	movs	r3, #144	; 0x90
 8002524:	05db      	lsls	r3, r3, #23
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	0249      	lsls	r1, r1, #9
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 800252e:	e01b      	b.n	8002568 <revers_zero+0xa8>
			else {
				STEP1_ON;                           // если же там 0 то установим 1 на выходе
 8002530:	2390      	movs	r3, #144	; 0x90
 8002532:	05db      	lsls	r3, r3, #23
 8002534:	699a      	ldr	r2, [r3, #24]
 8002536:	2390      	movs	r3, #144	; 0x90
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	2101      	movs	r1, #1
 800253c:	430a      	orrs	r2, r1
 800253e:	619a      	str	r2, [r3, #24]
			    stepp_1.step_up ++;                 // считаем переменную количества шагов от конца
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <revers_zero+0x160>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <revers_zero+0x160>)
 8002548:	609a      	str	r2, [r3, #8]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 800254a:	e00d      	b.n	8002568 <revers_zero+0xa8>
			}
		} else {
			flags.zero_pos1 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <revers_zero+0x158>)
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	2101      	movs	r1, #1
 8002552:	430a      	orrs	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
			STEP1_OFF;                              // и сбрасываем степ в 0
 8002556:	2390      	movs	r3, #144	; 0x90
 8002558:	05db      	lsls	r3, r3, #23
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	2390      	movs	r3, #144	; 0x90
 800255e:	05db      	lsls	r3, r3, #23
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	0249      	lsls	r1, r1, #9
 8002564:	430a      	orrs	r2, r1
 8002566:	619a      	str	r2, [r3, #24]
		}
		if (!READ_LIM2 && !flags.zero_pos2) {       // считаем состояние концевика, если не ноль, шагаем
 8002568:	4b2c      	ldr	r3, [pc, #176]	; (800261c <revers_zero+0x15c>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	2240      	movs	r2, #64	; 0x40
 800256e:	4013      	ands	r3, r2
 8002570:	d124      	bne.n	80025bc <revers_zero+0xfc>
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <revers_zero+0x158>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2202      	movs	r2, #2
 8002578:	4013      	ands	r3, r2
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11d      	bne.n	80025bc <revers_zero+0xfc>
			if (GPIOA->IDR & GPIO_IDR_1)
 8002580:	2390      	movs	r3, #144	; 0x90
 8002582:	05db      	lsls	r3, r3, #23
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2202      	movs	r2, #2
 8002588:	4013      	ands	r3, r2
 800258a:	d009      	beq.n	80025a0 <revers_zero+0xe0>
				STEP2_OFF;                          // считаем что у нас сейчас в регистре выхода, если 1 то выставим 0
 800258c:	2390      	movs	r3, #144	; 0x90
 800258e:	05db      	lsls	r3, r3, #23
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	2390      	movs	r3, #144	; 0x90
 8002594:	05db      	lsls	r3, r3, #23
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0289      	lsls	r1, r1, #10
 800259a:	430a      	orrs	r2, r1
 800259c:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 800259e:	e01b      	b.n	80025d8 <revers_zero+0x118>
			else {
				STEP2_ON;                           // если же там 0 то установим 1 на выходе
 80025a0:	2390      	movs	r3, #144	; 0x90
 80025a2:	05db      	lsls	r3, r3, #23
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	2390      	movs	r3, #144	; 0x90
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	2102      	movs	r1, #2
 80025ac:	430a      	orrs	r2, r1
 80025ae:	619a      	str	r2, [r3, #24]
				stepp_2.step_up ++;
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <revers_zero+0x164>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <revers_zero+0x164>)
 80025b8:	609a      	str	r2, [r3, #8]
			if (GPIOA->IDR & GPIO_IDR_1)
 80025ba:	e00d      	b.n	80025d8 <revers_zero+0x118>
			}
		} else {
			flags.zero_pos2 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <revers_zero+0x158>)
 80025be:	781a      	ldrb	r2, [r3, #0]
 80025c0:	2102      	movs	r1, #2
 80025c2:	430a      	orrs	r2, r1
 80025c4:	701a      	strb	r2, [r3, #0]
			STEP2_OFF;
 80025c6:	2390      	movs	r3, #144	; 0x90
 80025c8:	05db      	lsls	r3, r3, #23
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	2390      	movs	r3, #144	; 0x90
 80025ce:	05db      	lsls	r3, r3, #23
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0289      	lsls	r1, r1, #10
 80025d4:	430a      	orrs	r2, r1
 80025d6:	619a      	str	r2, [r3, #24]
		}
	}

	if (flags.zero_pos1 && flags.zero_pos2) {       // если сработало два флага значит мы в нулях
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <revers_zero+0x158>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d014      	beq.n	8002610 <revers_zero+0x150>
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <revers_zero+0x158>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00d      	beq.n	8002610 <revers_zero+0x150>
		flags.zero_ok = TRUE;                       // установим флаг
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <revers_zero+0x158>)
 80025f6:	781a      	ldrb	r2, [r3, #0]
 80025f8:	2118      	movs	r1, #24
 80025fa:	438a      	bics	r2, r1
 80025fc:	1c11      	adds	r1, r2, #0
 80025fe:	2208      	movs	r2, #8
 8002600:	430a      	orrs	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);       // выключим прерывание по обновлению
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <revers_zero+0x168>)
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	4b07      	ldr	r3, [pc, #28]	; (8002628 <revers_zero+0x168>)
 800260a:	2101      	movs	r1, #1
 800260c:	438a      	bics	r2, r1
 800260e:	60da      	str	r2, [r3, #12]
	}
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	2000006c 	.word	0x2000006c
 800261c:	48000400 	.word	0x48000400
 8002620:	2000004c 	.word	0x2000004c
 8002624:	2000005c 	.word	0x2000005c
 8002628:	40014800 	.word	0x40014800

0800262c <new_step_go1>:

static inline void new_step_go1(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	if (flags.balance_1) {                                   // если новое движение
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <new_step_go1+0xd4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2220      	movs	r2, #32
 8002636:	4013      	ands	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d019      	beq.n	8002672 <new_step_go1+0x46>
		if (stepp_1.curent_steps > stepp_1.last_steps)       // если у нас движение в одну сторону
 800263e:	4b31      	ldr	r3, [pc, #196]	; (8002704 <new_step_go1+0xd8>)
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4b30      	ldr	r3, [pc, #192]	; (8002704 <new_step_go1+0xd8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	dd07      	ble.n	800265a <new_step_go1+0x2e>
			DIR1_OFF;                                        // установим единичку на дир
 800264a:	4b2f      	ldr	r3, [pc, #188]	; (8002708 <new_step_go1+0xdc>)
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	4b2e      	ldr	r3, [pc, #184]	; (8002708 <new_step_go1+0xdc>)
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0389      	lsls	r1, r1, #14
 8002654:	430a      	orrs	r2, r1
 8002656:	619a      	str	r2, [r3, #24]
 8002658:	e005      	b.n	8002666 <new_step_go1+0x3a>
		else                                                 // если в другую
			DIR1_ON;                                         // установим нолик на дир
 800265a:	4b2b      	ldr	r3, [pc, #172]	; (8002708 <new_step_go1+0xdc>)
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <new_step_go1+0xdc>)
 8002660:	2120      	movs	r1, #32
 8002662:	430a      	orrs	r2, r1
 8002664:	619a      	str	r2, [r3, #24]
		flags.balance_1 = FALSE;                             // сбросим новое движение
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <new_step_go1+0xd4>)
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	2120      	movs	r1, #32
 800266c:	438a      	bics	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
			else
				stepp_1.last_steps ++;
			}
		}
	}
}
 8002670:	e042      	b.n	80026f8 <new_step_go1+0xcc>
		if (stepp_1.curent_steps == stepp_1.last_steps) {    // если шаги равны то пропускаем движение
 8002672:	4b24      	ldr	r3, [pc, #144]	; (8002704 <new_step_go1+0xd8>)
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4b23      	ldr	r3, [pc, #140]	; (8002704 <new_step_go1+0xd8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	d113      	bne.n	80026a6 <new_step_go1+0x7a>
			CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);            // если шагать не нужно выключим прерывания
 800267e:	4b23      	ldr	r3, [pc, #140]	; (800270c <new_step_go1+0xe0>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <new_step_go1+0xe0>)
 8002684:	2101      	movs	r1, #1
 8002686:	438a      	bics	r2, r1
 8002688:	60da      	str	r2, [r3, #12]
			stepp_1.last_steps = stepp_1.curent_steps;       // приравняем значения
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <new_step_go1+0xd8>)
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4b1d      	ldr	r3, [pc, #116]	; (8002704 <new_step_go1+0xd8>)
 8002690:	601a      	str	r2, [r3, #0]
			STEP1_OFF;                                       // и сбросим степ
 8002692:	2390      	movs	r3, #144	; 0x90
 8002694:	05db      	lsls	r3, r3, #23
 8002696:	699a      	ldr	r2, [r3, #24]
 8002698:	2390      	movs	r3, #144	; 0x90
 800269a:	05db      	lsls	r3, r3, #23
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
}
 80026a4:	e028      	b.n	80026f8 <new_step_go1+0xcc>
			if (GPIOA->IDR & GPIO_IDR_0) {                   // считаем регистр, если там единичка
 80026a6:	2390      	movs	r3, #144	; 0x90
 80026a8:	05db      	lsls	r3, r3, #23
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2201      	movs	r2, #1
 80026ae:	4013      	ands	r3, r2
 80026b0:	d009      	beq.n	80026c6 <new_step_go1+0x9a>
				STEP1_OFF;                                   // переведем степ в 0
 80026b2:	2390      	movs	r3, #144	; 0x90
 80026b4:	05db      	lsls	r3, r3, #23
 80026b6:	699a      	ldr	r2, [r3, #24]
 80026b8:	2390      	movs	r3, #144	; 0x90
 80026ba:	05db      	lsls	r3, r3, #23
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
}
 80026c4:	e018      	b.n	80026f8 <new_step_go1+0xcc>
				STEP1_ON;                                    // переведем степ в 1
 80026c6:	2390      	movs	r3, #144	; 0x90
 80026c8:	05db      	lsls	r3, r3, #23
 80026ca:	699a      	ldr	r2, [r3, #24]
 80026cc:	2390      	movs	r3, #144	; 0x90
 80026ce:	05db      	lsls	r3, r3, #23
 80026d0:	2101      	movs	r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	619a      	str	r2, [r3, #24]
			if (stepp_1.curent_steps < stepp_1.last_steps)
 80026d6:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <new_step_go1+0xd8>)
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <new_step_go1+0xd8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	da05      	bge.n	80026ee <new_step_go1+0xc2>
				stepp_1.last_steps --;                       // а так же изменим текущие шаги
 80026e2:	4b08      	ldr	r3, [pc, #32]	; (8002704 <new_step_go1+0xd8>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <new_step_go1+0xd8>)
 80026ea:	601a      	str	r2, [r3, #0]
}
 80026ec:	e004      	b.n	80026f8 <new_step_go1+0xcc>
				stepp_1.last_steps ++;
 80026ee:	4b05      	ldr	r3, [pc, #20]	; (8002704 <new_step_go1+0xd8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <new_step_go1+0xd8>)
 80026f6:	601a      	str	r2, [r3, #0]
}
 80026f8:	46c0      	nop			; (mov r8, r8)
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	2000006c 	.word	0x2000006c
 8002704:	2000004c 	.word	0x2000004c
 8002708:	48000400 	.word	0x48000400
 800270c:	40014800 	.word	0x40014800

08002710 <new_step_go2>:
//DIR инвертирован
static inline void new_step_go2(void) {
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
	if (flags.balance_2) {
 8002714:	4b33      	ldr	r3, [pc, #204]	; (80027e4 <new_step_go2+0xd4>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2240      	movs	r2, #64	; 0x40
 800271a:	4013      	ands	r3, r2
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <new_step_go2+0x46>
		if (stepp_2.curent_steps > stepp_2.last_steps)
 8002722:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <new_step_go2+0xd8>)
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <new_step_go2+0xd8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	dd06      	ble.n	800273c <new_step_go2+0x2c>
			DIR2_ON;                                        // установим единичку на дир
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <new_step_go2+0xdc>)
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	4b2e      	ldr	r3, [pc, #184]	; (80027ec <new_step_go2+0xdc>)
 8002734:	2110      	movs	r1, #16
 8002736:	430a      	orrs	r2, r1
 8002738:	619a      	str	r2, [r3, #24]
 800273a:	e006      	b.n	800274a <new_step_go2+0x3a>
		else
			DIR2_OFF;                                         // установим нолик на дир
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <new_step_go2+0xdc>)
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	4b2a      	ldr	r3, [pc, #168]	; (80027ec <new_step_go2+0xdc>)
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	0349      	lsls	r1, r1, #13
 8002746:	430a      	orrs	r2, r1
 8002748:	619a      	str	r2, [r3, #24]
		flags.balance_2 = FALSE;
 800274a:	4b26      	ldr	r3, [pc, #152]	; (80027e4 <new_step_go2+0xd4>)
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	2140      	movs	r1, #64	; 0x40
 8002750:	438a      	bics	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
			else
				stepp_2.last_steps ++;
			}
		}
	}
}
 8002754:	e042      	b.n	80027dc <new_step_go2+0xcc>
		if (stepp_2.curent_steps == stepp_2.last_steps) {    // если шаги равны то пропускаем движение
 8002756:	4b24      	ldr	r3, [pc, #144]	; (80027e8 <new_step_go2+0xd8>)
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <new_step_go2+0xd8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d113      	bne.n	800278a <new_step_go2+0x7a>
			CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);            // если шагать не нужно выключим прерывания
 8002762:	4b23      	ldr	r3, [pc, #140]	; (80027f0 <new_step_go2+0xe0>)
 8002764:	68da      	ldr	r2, [r3, #12]
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <new_step_go2+0xe0>)
 8002768:	2101      	movs	r1, #1
 800276a:	438a      	bics	r2, r1
 800276c:	60da      	str	r2, [r3, #12]
			stepp_2.last_steps = stepp_2.curent_steps;       // приравняем значения
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <new_step_go2+0xd8>)
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b1d      	ldr	r3, [pc, #116]	; (80027e8 <new_step_go2+0xd8>)
 8002774:	601a      	str	r2, [r3, #0]
			STEP2_OFF;                                       // и сбросим степ
 8002776:	2390      	movs	r3, #144	; 0x90
 8002778:	05db      	lsls	r3, r3, #23
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	2390      	movs	r3, #144	; 0x90
 800277e:	05db      	lsls	r3, r3, #23
 8002780:	2180      	movs	r1, #128	; 0x80
 8002782:	0289      	lsls	r1, r1, #10
 8002784:	430a      	orrs	r2, r1
 8002786:	619a      	str	r2, [r3, #24]
}
 8002788:	e028      	b.n	80027dc <new_step_go2+0xcc>
			if (GPIOA->IDR & GPIO_IDR_1) {                   // считаем регистр, если там единичка
 800278a:	2390      	movs	r3, #144	; 0x90
 800278c:	05db      	lsls	r3, r3, #23
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d009      	beq.n	80027aa <new_step_go2+0x9a>
				STEP2_OFF;                                   // переведем степ в 0
 8002796:	2390      	movs	r3, #144	; 0x90
 8002798:	05db      	lsls	r3, r3, #23
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	2390      	movs	r3, #144	; 0x90
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	0289      	lsls	r1, r1, #10
 80027a4:	430a      	orrs	r2, r1
 80027a6:	619a      	str	r2, [r3, #24]
}
 80027a8:	e018      	b.n	80027dc <new_step_go2+0xcc>
				STEP2_ON;                                    // переведем степ в 1
 80027aa:	2390      	movs	r3, #144	; 0x90
 80027ac:	05db      	lsls	r3, r3, #23
 80027ae:	699a      	ldr	r2, [r3, #24]
 80027b0:	2390      	movs	r3, #144	; 0x90
 80027b2:	05db      	lsls	r3, r3, #23
 80027b4:	2102      	movs	r1, #2
 80027b6:	430a      	orrs	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
			if (stepp_2.curent_steps < stepp_2.last_steps)
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <new_step_go2+0xd8>)
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <new_step_go2+0xd8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	da05      	bge.n	80027d2 <new_step_go2+0xc2>
				stepp_2.last_steps --;                       // а так же изменим текущие шаги
 80027c6:	4b08      	ldr	r3, [pc, #32]	; (80027e8 <new_step_go2+0xd8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	1e5a      	subs	r2, r3, #1
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <new_step_go2+0xd8>)
 80027ce:	601a      	str	r2, [r3, #0]
}
 80027d0:	e004      	b.n	80027dc <new_step_go2+0xcc>
				stepp_2.last_steps ++;
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <new_step_go2+0xd8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	4b03      	ldr	r3, [pc, #12]	; (80027e8 <new_step_go2+0xd8>)
 80027da:	601a      	str	r2, [r3, #0]
}
 80027dc:	46c0      	nop			; (mov r8, r8)
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	46c0      	nop			; (mov r8, r8)
 80027e4:	2000006c 	.word	0x2000006c
 80027e8:	2000005c 	.word	0x2000005c
 80027ec:	48000400 	.word	0x48000400
 80027f0:	40014400 	.word	0x40014400

080027f4 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	TIM17->SR &= ~TIM_SR_UIF;                                // сбросим флаг прерывания
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <TIM17_IRQHandler+0x44>)
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <TIM17_IRQHandler+0x44>)
 80027fe:	2101      	movs	r1, #1
 8002800:	438a      	bics	r2, r1
 8002802:	611a      	str	r2, [r3, #16]
	if (flags.zero_ok == 0) {
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <TIM17_IRQHandler+0x48>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2218      	movs	r2, #24
 800280a:	4013      	ands	r3, r2
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d102      	bne.n	8002818 <TIM17_IRQHandler+0x24>
		search_zero();
 8002812:	f7ff fd91 	bl	8002338 <search_zero>
	} else if (flags.zero_ok == 1) {
		new_step_go1();
	} else {
		revers_zero ();
	}
}
 8002816:	e00b      	b.n	8002830 <TIM17_IRQHandler+0x3c>
	} else if (flags.zero_ok == 1) {
 8002818:	4b08      	ldr	r3, [pc, #32]	; (800283c <TIM17_IRQHandler+0x48>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2218      	movs	r2, #24
 800281e:	4013      	ands	r3, r2
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b08      	cmp	r3, #8
 8002824:	d102      	bne.n	800282c <TIM17_IRQHandler+0x38>
		new_step_go1();
 8002826:	f7ff ff01 	bl	800262c <new_step_go1>
}
 800282a:	e001      	b.n	8002830 <TIM17_IRQHandler+0x3c>
		revers_zero ();
 800282c:	f7ff fe48 	bl	80024c0 <revers_zero>
}
 8002830:	46c0      	nop			; (mov r8, r8)
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	40014800 	.word	0x40014800
 800283c:	2000006c 	.word	0x2000006c

08002840 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
	TIM16->SR &= ~TIM_SR_UIF;                                // сбросим флаг прерывания
 8002844:	4b05      	ldr	r3, [pc, #20]	; (800285c <TIM16_IRQHandler+0x1c>)
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <TIM16_IRQHandler+0x1c>)
 800284a:	2101      	movs	r1, #1
 800284c:	438a      	bics	r2, r1
 800284e:	611a      	str	r2, [r3, #16]
	new_step_go2();
 8002850:	f7ff ff5e 	bl	8002710 <new_step_go2>
}
 8002854:	46c0      	nop			; (mov r8, r8)
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	40014400 	.word	0x40014400

08002860 <stepper>:

uint32_t stepper( int32_t stepper, uint32_t num_motor) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	if (num_motor > 1) return 0;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d901      	bls.n	8002874 <stepper+0x14>
 8002870:	2300      	movs	r3, #0
 8002872:	e028      	b.n	80028c6 <stepper+0x66>
	if (num_motor == 0) {
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d110      	bne.n	800289c <stepper+0x3c>
		stepp_1.curent_steps = stepper;
 800287a:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <stepper+0x70>)
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	605a      	str	r2, [r3, #4]
		flags.balance_1 = 1;
 8002880:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <stepper+0x74>)
 8002882:	781a      	ldrb	r2, [r3, #0]
 8002884:	2120      	movs	r1, #32
 8002886:	430a      	orrs	r2, r1
 8002888:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <stepper+0x78>)
 800288c:	2200      	movs	r2, #0
 800288e:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8002890:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <stepper+0x78>)
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <stepper+0x78>)
 8002896:	2101      	movs	r1, #1
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]
	}
	if (num_motor == 1) {
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d110      	bne.n	80028c4 <stepper+0x64>
		stepp_2.curent_steps = stepper;
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <stepper+0x7c>)
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	605a      	str	r2, [r3, #4]
		flags.balance_2 = 1;
 80028a8:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <stepper+0x74>)
 80028aa:	781a      	ldrb	r2, [r3, #0]
 80028ac:	2140      	movs	r1, #64	; 0x40
 80028ae:	430a      	orrs	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 80028b2:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <stepper+0x80>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM16->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <stepper+0x80>)
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <stepper+0x80>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]
	}
	return 1;
 80028c4:	2301      	movs	r3, #1
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b002      	add	sp, #8
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	2000004c 	.word	0x2000004c
 80028d4:	2000006c 	.word	0x2000006c
 80028d8:	40014800 	.word	0x40014800
 80028dc:	2000005c 	.word	0x2000005c
 80028e0:	40014400 	.word	0x40014400

080028e4 <extrn_step>:

uint32_t extrn_step(uint32_t stepper, uint32_t num_motor){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	if (num_motor > 1) return 0;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d901      	bls.n	80028f8 <extrn_step+0x14>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e028      	b.n	800294a <extrn_step+0x66>
	//if (stepper > RESOLUTION) return 0;
	if (num_motor == 0) {
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d110      	bne.n	8002920 <extrn_step+0x3c>
		//stepp_1.curent_steps = map (stepper, 0, RESOLUTION, (stepp_1.step_up<<4)-PROTECT, (stepp_1.step_down<<4)-PROTECT); // >>1 для полного шага потому что переменная складывается 2 раза
		stepp_1.curent_steps = stepper;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <extrn_step+0x70>)
 8002902:	605a      	str	r2, [r3, #4]
		flags.balance_1 = 1;
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <extrn_step+0x74>)
 8002906:	781a      	ldrb	r2, [r3, #0]
 8002908:	2120      	movs	r1, #32
 800290a:	430a      	orrs	r2, r1
 800290c:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 800290e:	4b13      	ldr	r3, [pc, #76]	; (800295c <extrn_step+0x78>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8002914:	4b11      	ldr	r3, [pc, #68]	; (800295c <extrn_step+0x78>)
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <extrn_step+0x78>)
 800291a:	2101      	movs	r1, #1
 800291c:	430a      	orrs	r2, r1
 800291e:	60da      	str	r2, [r3, #12]
	}
	if (num_motor == 1) {
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d110      	bne.n	8002948 <extrn_step+0x64>
		//stepp_2.curent_steps = map (stepper, 0,RESOLUTION, (stepp_2.step_down<<4)-PROTECT, (stepp_2.step_up<<4)-PROTECT); // тут умножение на 32 заменено смещением на 4
		stepp_2.curent_steps = stepper;
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <extrn_step+0x7c>)
 800292a:	605a      	str	r2, [r3, #4]
		flags.balance_2 = 1;     // но так как у нас переменная считается в прерывании 2 раза то нужно еще и разделит на 2, но можем просто делить на 16
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <extrn_step+0x74>)
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	430a      	orrs	r2, r1
 8002934:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8002936:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <extrn_step+0x80>)
 8002938:	2200      	movs	r2, #0
 800293a:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM16->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <extrn_step+0x80>)
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <extrn_step+0x80>)
 8002942:	2101      	movs	r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	60da      	str	r2, [r3, #12]
	}
	return 1;
 8002948:	2301      	movs	r3, #1
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	2000004c 	.word	0x2000004c
 8002958:	2000006c 	.word	0x2000006c
 800295c:	40014800 	.word	0x40014800
 8002960:	2000005c 	.word	0x2000005c
 8002964:	40014400 	.word	0x40014400

08002968 <max_step>:

uint32_t max_step (uint32_t num_motor) {              // отдать максимальное количество шагов
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
	uint32_t return_data = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
	if (num_motor == 0) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <max_step+0x2e>
		return_data = (-stepp_1.step_down << 5) << 16;
 800297a:	4b12      	ldr	r3, [pc, #72]	; (80029c4 <max_step+0x5c>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	425b      	negs	r3, r3
 8002980:	055b      	lsls	r3, r3, #21
 8002982:	60fb      	str	r3, [r7, #12]
		return_data |= (stepp_1.step_up << 5);        // *32 чтоб мы могли двигаться по дробленому шагу
 8002984:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <max_step+0x5c>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	015b      	lsls	r3, r3, #5
 800298a:	001a      	movs	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
		return return_data; //return (stepp_1.step_down << 5)  + (stepp_1.step_up << 5);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	e011      	b.n	80029ba <max_step+0x52>
	}
	if (num_motor == 1) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d10d      	bne.n	80029b8 <max_step+0x50>
		return_data = (stepp_2.step_up << 5) << 16;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <max_step+0x60>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	055b      	lsls	r3, r3, #21
 80029a2:	60fb      	str	r3, [r7, #12]
		return_data |= (-stepp_2.step_down << 5);        // *32 чтоб мы могли двигаться по дробленому шагу
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <max_step+0x60>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	425b      	negs	r3, r3
 80029aa:	015b      	lsls	r3, r3, #5
 80029ac:	001a      	movs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
		return return_data; //return (stepp_2.step_down << 5) + (stepp_2.step_up << 5);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	e000      	b.n	80029ba <max_step+0x52>
	}
	return 0;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	0018      	movs	r0, r3
 80029bc:	46bd      	mov	sp, r7
 80029be:	b004      	add	sp, #16
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	2000004c 	.word	0x2000004c
 80029c8:	2000005c 	.word	0x2000005c

080029cc <init_struct>:

void init_struct (void){                         // инициализируем ячейки
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
	flags.ir_filter = TRUE;
 80029d0:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <init_struct+0x78>)
 80029d2:	781a      	ldrb	r2, [r3, #0]
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	4249      	negs	r1, r1
 80029d8:	430a      	orrs	r2, r1
 80029da:	701a      	strb	r2, [r3, #0]
	flags.iris_drive = FALSE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <init_struct+0x78>)
 80029de:	785a      	ldrb	r2, [r3, #1]
 80029e0:	2101      	movs	r1, #1
 80029e2:	438a      	bics	r2, r1
 80029e4:	705a      	strb	r2, [r3, #1]
	flags.zero_ok = TRUE;                        // это первоначальная инициализация чтоб можно было пошагать
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <init_struct+0x78>)
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	2118      	movs	r1, #24
 80029ec:	438a      	bics	r2, r1
 80029ee:	1c11      	adds	r1, r2, #0
 80029f0:	2208      	movs	r2, #8
 80029f2:	430a      	orrs	r2, r1
 80029f4:	701a      	strb	r2, [r3, #0]
	flags.zero_in_programm = FALSE;
 80029f6:	4b13      	ldr	r3, [pc, #76]	; (8002a44 <init_struct+0x78>)
 80029f8:	789a      	ldrb	r2, [r3, #2]
 80029fa:	2102      	movs	r1, #2
 80029fc:	438a      	bics	r2, r1
 80029fe:	709a      	strb	r2, [r3, #2]
	flags.reset_setting = TRUE;
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <init_struct+0x78>)
 8002a02:	789a      	ldrb	r2, [r3, #2]
 8002a04:	2104      	movs	r1, #4
 8002a06:	430a      	orrs	r2, r1
 8002a08:	709a      	strb	r2, [r3, #2]
	flags.change_pin_conf = FALSE;
 8002a0a:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <init_struct+0x78>)
 8002a0c:	789a      	ldrb	r2, [r3, #2]
 8002a0e:	2140      	movs	r1, #64	; 0x40
 8002a10:	438a      	bics	r2, r1
 8002a12:	709a      	strb	r2, [r3, #2]
	flags.iwdt_res = FALSE;
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <init_struct+0x78>)
 8002a16:	789a      	ldrb	r2, [r3, #2]
 8002a18:	2108      	movs	r1, #8
 8002a1a:	438a      	bics	r2, r1
 8002a1c:	709a      	strb	r2, [r3, #2]
	stepp_1.last_steps = 0;                      // это чтоб с самого начала могли пошагать в -8000
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <init_struct+0x7c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
	stepp_2.last_steps = 0;
 8002a24:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <init_struct+0x80>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
	STEP3_OFF;                                   // ?
 8002a2a:	2390      	movs	r3, #144	; 0x90
 8002a2c:	05db      	lsls	r3, r3, #23
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	2390      	movs	r3, #144	; 0x90
 8002a32:	05db      	lsls	r3, r3, #23
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0409      	lsls	r1, r1, #16
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
}
 8002a3c:	46c0      	nop			; (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	2000006c 	.word	0x2000006c
 8002a48:	2000004c 	.word	0x2000004c
 8002a4c:	2000005c 	.word	0x2000005c

08002a50 <zero_position>:

void zero_position(void) {
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
	CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <zero_position+0x64>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);         // а тут выключим прерывания
 8002a5a:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <zero_position+0x64>)
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <zero_position+0x64>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	438a      	bics	r2, r1
 8002a64:	60da      	str	r2, [r3, #12]
	flags.zero_ok = FALSE;
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <zero_position+0x68>)
 8002a68:	781a      	ldrb	r2, [r3, #0]
 8002a6a:	2118      	movs	r1, #24
 8002a6c:	438a      	bics	r2, r1
 8002a6e:	701a      	strb	r2, [r3, #0]
	flags.zero_pos1 = FALSE;
 8002a70:	4b11      	ldr	r3, [pc, #68]	; (8002ab8 <zero_position+0x68>)
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	438a      	bics	r2, r1
 8002a78:	701a      	strb	r2, [r3, #0]
	flags.zero_pos2 = FALSE;
 8002a7a:	4b0f      	ldr	r3, [pc, #60]	; (8002ab8 <zero_position+0x68>)
 8002a7c:	781a      	ldrb	r2, [r3, #0]
 8002a7e:	2102      	movs	r1, #2
 8002a80:	438a      	bics	r2, r1
 8002a82:	701a      	strb	r2, [r3, #0]
	flags.start_zero = FALSE;
 8002a84:	4b0c      	ldr	r3, [pc, #48]	; (8002ab8 <zero_position+0x68>)
 8002a86:	781a      	ldrb	r2, [r3, #0]
 8002a88:	2104      	movs	r1, #4
 8002a8a:	438a      	bics	r2, r1
 8002a8c:	701a      	strb	r2, [r3, #0]
	stepp_1.step_down = 0;                        // сбросим счетчик шагов "вниз"
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <zero_position+0x6c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	60da      	str	r2, [r3, #12]
	stepp_2.step_down = 0;
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <zero_position+0x70>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
	CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <zero_position+0x74>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8002aa0:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <zero_position+0x74>)
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <zero_position+0x74>)
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]
}
 8002aac:	46c0      	nop			; (mov r8, r8)
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	2000006c 	.word	0x2000006c
 8002abc:	2000004c 	.word	0x2000004c
 8002ac0:	2000005c 	.word	0x2000005c
 8002ac4:	40014800 	.word	0x40014800

08002ac8 <search_steps>:

void search_steps (void) {                        // поиск количества шагов от максимума
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8002acc:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <search_steps+0x68>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);         // а тут выключим прерывания
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <search_steps+0x68>)
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <search_steps+0x68>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	438a      	bics	r2, r1
 8002adc:	60da      	str	r2, [r3, #12]
	stepp_1.step_up = 0;                          // сбросим счетчик шагов "вверх"
 8002ade:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <search_steps+0x6c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	609a      	str	r2, [r3, #8]
	stepp_2.step_up = 0;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <search_steps+0x70>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]
	flags.zero_ok = 2;
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <search_steps+0x74>)
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	2118      	movs	r1, #24
 8002af0:	438a      	bics	r2, r1
 8002af2:	1c11      	adds	r1, r2, #0
 8002af4:	2210      	movs	r2, #16
 8002af6:	430a      	orrs	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
	flags.zero_pos1 = FALSE;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <search_steps+0x74>)
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	2101      	movs	r1, #1
 8002b00:	438a      	bics	r2, r1
 8002b02:	701a      	strb	r2, [r3, #0]
	flags.zero_pos2 = FALSE;
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <search_steps+0x74>)
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	2102      	movs	r1, #2
 8002b0a:	438a      	bics	r2, r1
 8002b0c:	701a      	strb	r2, [r3, #0]
	flags.start_zero = FALSE;                     // это для первичного выбора направления движения
 8002b0e:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <search_steps+0x74>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	2104      	movs	r1, #4
 8002b14:	438a      	bics	r2, r1
 8002b16:	701a      	strb	r2, [r3, #0]
	CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 8002b18:	4b09      	ldr	r3, [pc, #36]	; (8002b40 <search_steps+0x78>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <search_steps+0x78>)
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <search_steps+0x78>)
 8002b24:	2101      	movs	r1, #1
 8002b26:	430a      	orrs	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]

}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40014400 	.word	0x40014400
 8002b34:	2000004c 	.word	0x2000004c
 8002b38:	2000005c 	.word	0x2000005c
 8002b3c:	2000006c 	.word	0x2000006c
 8002b40:	40014800 	.word	0x40014800

08002b44 <__NVIC_EnableIRQ>:
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	1dfb      	adds	r3, r7, #7
 8002b4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b50:	1dfb      	adds	r3, r7, #7
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b7f      	cmp	r3, #127	; 0x7f
 8002b56:	d809      	bhi.n	8002b6c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	231f      	movs	r3, #31
 8002b60:	401a      	ands	r2, r3
 8002b62:	4b04      	ldr	r3, [pc, #16]	; (8002b74 <__NVIC_EnableIRQ+0x30>)
 8002b64:	2101      	movs	r1, #1
 8002b66:	4091      	lsls	r1, r2
 8002b68:	000a      	movs	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]
}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b002      	add	sp, #8
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	0002      	movs	r2, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	1dfb      	adds	r3, r7, #7
 8002b84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b86:	1dfb      	adds	r3, r7, #7
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8002b8c:	d828      	bhi.n	8002be0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b8e:	4a2f      	ldr	r2, [pc, #188]	; (8002c4c <__NVIC_SetPriority+0xd4>)
 8002b90:	1dfb      	adds	r3, r7, #7
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	089b      	lsrs	r3, r3, #2
 8002b98:	33c0      	adds	r3, #192	; 0xc0
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	589b      	ldr	r3, [r3, r2]
 8002b9e:	1dfa      	adds	r2, r7, #7
 8002ba0:	7812      	ldrb	r2, [r2, #0]
 8002ba2:	0011      	movs	r1, r2
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	400a      	ands	r2, r1
 8002ba8:	00d2      	lsls	r2, r2, #3
 8002baa:	21ff      	movs	r1, #255	; 0xff
 8002bac:	4091      	lsls	r1, r2
 8002bae:	000a      	movs	r2, r1
 8002bb0:	43d2      	mvns	r2, r2
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	22ff      	movs	r2, #255	; 0xff
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	1dfb      	adds	r3, r7, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	4003      	ands	r3, r0
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bcc:	481f      	ldr	r0, [pc, #124]	; (8002c4c <__NVIC_SetPriority+0xd4>)
 8002bce:	1dfb      	adds	r3, r7, #7
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	33c0      	adds	r3, #192	; 0xc0
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	501a      	str	r2, [r3, r0]
}
 8002bde:	e031      	b.n	8002c44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <__NVIC_SetPriority+0xd8>)
 8002be2:	1dfb      	adds	r3, r7, #7
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	0019      	movs	r1, r3
 8002be8:	230f      	movs	r3, #15
 8002bea:	400b      	ands	r3, r1
 8002bec:	3b08      	subs	r3, #8
 8002bee:	089b      	lsrs	r3, r3, #2
 8002bf0:	3306      	adds	r3, #6
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	18d3      	adds	r3, r2, r3
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	1dfa      	adds	r2, r7, #7
 8002bfc:	7812      	ldrb	r2, [r2, #0]
 8002bfe:	0011      	movs	r1, r2
 8002c00:	2203      	movs	r2, #3
 8002c02:	400a      	ands	r2, r1
 8002c04:	00d2      	lsls	r2, r2, #3
 8002c06:	21ff      	movs	r1, #255	; 0xff
 8002c08:	4091      	lsls	r1, r2
 8002c0a:	000a      	movs	r2, r1
 8002c0c:	43d2      	mvns	r2, r2
 8002c0e:	401a      	ands	r2, r3
 8002c10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	019b      	lsls	r3, r3, #6
 8002c16:	22ff      	movs	r2, #255	; 0xff
 8002c18:	401a      	ands	r2, r3
 8002c1a:	1dfb      	adds	r3, r7, #7
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	0018      	movs	r0, r3
 8002c20:	2303      	movs	r3, #3
 8002c22:	4003      	ands	r3, r0
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c28:	4809      	ldr	r0, [pc, #36]	; (8002c50 <__NVIC_SetPriority+0xd8>)
 8002c2a:	1dfb      	adds	r3, r7, #7
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	001c      	movs	r4, r3
 8002c30:	230f      	movs	r3, #15
 8002c32:	4023      	ands	r3, r4
 8002c34:	3b08      	subs	r3, #8
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	3306      	adds	r3, #6
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	18c3      	adds	r3, r0, r3
 8002c40:	3304      	adds	r3, #4
 8002c42:	601a      	str	r2, [r3, #0]
}
 8002c44:	46c0      	nop			; (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b003      	add	sp, #12
 8002c4a:	bd90      	pop	{r4, r7, pc}
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <init_Uart1>:

struct USART_TX_only husart1;
struct USART husart2;
struct data send_data;

void init_Uart1(uint32_t baud) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);  // включим тактирование
 8002c5c:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <init_Uart1+0xa0>)
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <init_Uart1+0xa0>)
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	01c9      	lsls	r1, r1, #7
 8002c66:	430a      	orrs	r2, r1
 8002c68:	619a      	str	r2, [r3, #24]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER9_1); // альтернативную функцию включим
 8002c6a:	2390      	movs	r3, #144	; 0x90
 8002c6c:	05db      	lsls	r3, r3, #23
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2390      	movs	r3, #144	; 0x90
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	0309      	lsls	r1, r1, #12
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR9); // максимальную скорость
 8002c7c:	2390      	movs	r3, #144	; 0x90
 8002c7e:	05db      	lsls	r3, r3, #23
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	2390      	movs	r3, #144	; 0x90
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	21c0      	movs	r1, #192	; 0xc0
 8002c88:	0309      	lsls	r1, r1, #12
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_9); // открытый колектор
 8002c8e:	2390      	movs	r3, #144	; 0x90
 8002c90:	05db      	lsls	r3, r3, #23
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	2390      	movs	r3, #144	; 0x90
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	2180      	movs	r1, #128	; 0x80
 8002c9a:	0089      	lsls	r1, r1, #2
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]
	SET_BIT(GPIOA->AFR[1], 1<<GPIO_AFRH_AFSEL9_Pos); // альтернативную функцию включим см даташит
 8002ca0:	2390      	movs	r3, #144	; 0x90
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca6:	2390      	movs	r3, #144	; 0x90
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	2110      	movs	r1, #16
 8002cac:	430a      	orrs	r2, r1
 8002cae:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(USART1->CR1, USART_CR1_OVER8 | USART_CR1_TE | USART_CR1_RE | USART_CR3_HDSEL);// делитель на 8
 8002cb0:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <init_Uart1+0xa4>)
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <init_Uart1+0xa4>)
 8002cb6:	4911      	ldr	r1, [pc, #68]	; (8002cfc <init_Uart1+0xa8>)
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART1->CR1, USART_CR1_TE);       // передатчик включить
	//SET_BIT(USART1->CR1, USART_CR1_RE);       // приемник включить
	//SET_BIT(USART1->CR3, USART_CR3_HDSEL);    // однопроводной режим

	//set_baud(USART1, baud);
	USART1->BRR = 0x340;
 8002cbc:	4b0e      	ldr	r3, [pc, #56]	; (8002cf8 <init_Uart1+0xa4>)
 8002cbe:	22d0      	movs	r2, #208	; 0xd0
 8002cc0:	0092      	lsls	r2, r2, #2
 8002cc2:	60da      	str	r2, [r3, #12]

	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);     // прерывание на прием
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <init_Uart1+0xa4>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <init_Uart1+0xa4>)
 8002cca:	2120      	movs	r1, #32
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART1->CR1, USART_CR1_IDLEIE);   // прерывание IDLEIE для надежности обнулим руками
	SET_BIT(USART1->CR1, USART_CR1_UE);         // включим USART
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <init_Uart1+0xa4>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <init_Uart1+0xa4>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);                // Включим прерывания по USART
 8002cdc:	201b      	movs	r0, #27
 8002cde:	f7ff ff31 	bl	8002b44 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);           // выставим приоритет
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	201b      	movs	r0, #27
 8002ce6:	f7ff ff47 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b002      	add	sp, #8
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	0000800c 	.word	0x0000800c

08002d00 <init_Uart2>:

void init_Uart2(uint32_t baud) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);                                 // включим тактирование юарта
 8002d08:	4b27      	ldr	r3, [pc, #156]	; (8002da8 <init_Uart2+0xa8>)
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <init_Uart2+0xa8>)
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0289      	lsls	r1, r1, #10
 8002d12:	430a      	orrs	r2, r1
 8002d14:	61da      	str	r2, [r3, #28]
	CLEAR_BIT(USART2->CR1, USART_CR1_UE);                                        // выключим USART иначе нельзя изменить биты
 8002d16:	4b25      	ldr	r3, [pc, #148]	; (8002dac <init_Uart2+0xac>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4b24      	ldr	r3, [pc, #144]	; (8002dac <init_Uart2+0xac>)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	438a      	bics	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);            // альтернативную функцию включим для ножки А2
 8002d22:	2390      	movs	r3, #144	; 0x90
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2390      	movs	r3, #144	; 0x90
 8002d2a:	05db      	lsls	r3, r3, #23
 8002d2c:	21a0      	movs	r1, #160	; 0xa0
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR2 | GPIO_OSPEEDER_OSPEEDR3);    // максимальную скорость
 8002d32:	2390      	movs	r3, #144	; 0x90
 8002d34:	05db      	lsls	r3, r3, #23
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	2390      	movs	r3, #144	; 0x90
 8002d3a:	05db      	lsls	r3, r3, #23
 8002d3c:	21f0      	movs	r1, #240	; 0xf0
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_2);                                    // открытый колектор
 8002d42:	2390      	movs	r3, #144	; 0x90
 8002d44:	05db      	lsls	r3, r3, #23
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	2390      	movs	r3, #144	; 0x90
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
	SET_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR2_0 | GPIO_PUPDR_PUPDR3_0);            // резистор к +
 8002d52:	2390      	movs	r3, #144	; 0x90
 8002d54:	05db      	lsls	r3, r3, #23
 8002d56:	68da      	ldr	r2, [r3, #12]
 8002d58:	2390      	movs	r3, #144	; 0x90
 8002d5a:	05db      	lsls	r3, r3, #23
 8002d5c:	2150      	movs	r1, #80	; 0x50
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->AFR[0], 1<<GPIO_AFRL_AFSEL2_Pos | 1<<GPIO_AFRL_AFSEL3_Pos);   // альтернативную функцию включим см даташит 37стрн
 8002d62:	2390      	movs	r3, #144	; 0x90
 8002d64:	05db      	lsls	r3, r3, #23
 8002d66:	6a1a      	ldr	r2, [r3, #32]
 8002d68:	2390      	movs	r3, #144	; 0x90
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	2188      	movs	r1, #136	; 0x88
 8002d6e:	0149      	lsls	r1, r1, #5
 8002d70:	430a      	orrs	r2, r1
 8002d72:	621a      	str	r2, [r3, #32]
	//SET_BIT(GPIOA->MODER, GPIO_MODER_MODER3_1);          // альтернативную функцию включим
	//SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR3);     // максимальную скорость
	//SET_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR3_0);          // резистор к +
	//SET_BIT(GPIOA->AFR[0], 1<<GPIO_AFRL_AFSEL3_Pos);     // альтернативную функцию включим см даташит

	SET_BIT(USART2->CR1, USART_CR1_OVER8 | USART_CR1_TE | USART_CR1_RE | USART_CR1_RXNEIE | USART_CR1_IDLEIE);    // делитель на 8
 8002d74:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <init_Uart2+0xac>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <init_Uart2+0xac>)
 8002d7a:	490d      	ldr	r1, [pc, #52]	; (8002db0 <init_Uart2+0xb0>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART2->CR1, USART_CR1_RE);       // приемник включить
	//SET_BIT(USART2->CR1, USART_CR1_RXNEIE);   // прерывание на прием
	//SET_BIT(USART2->CR1, USART_CR1_IDLEIE);   // прерывание IDLEIE

	//set_baud(USART2, baud);
	USART2->BRR = 0x681;
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <init_Uart2+0xac>)
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <init_Uart2+0xb4>)
 8002d84:	60da      	str	r2, [r3, #12]

	SET_BIT(USART2->CR1, USART_CR1_UE);   // включим USART
 8002d86:	4b09      	ldr	r3, [pc, #36]	; (8002dac <init_Uart2+0xac>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <init_Uart2+0xac>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);          // Включим прерывания по USART
 8002d92:	201c      	movs	r0, #28
 8002d94:	f7ff fed6 	bl	8002b44 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART2_IRQn, 1);     // выставим приоритет
 8002d98:	2101      	movs	r1, #1
 8002d9a:	201c      	movs	r0, #28
 8002d9c:	f7ff feec 	bl	8002b78 <__NVIC_SetPriority>
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40004400 	.word	0x40004400
 8002db0:	0000803c 	.word	0x0000803c
 8002db4:	00000681 	.word	0x00000681

08002db8 <UART1_transmit>:
	push = push >> 13;
	usart->BRR &= ~0xF;
	usart->BRR |= push;
}

void UART1_transmit(uint8_t lenght, uint8_t *data) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	1dfb      	adds	r3, r7, #7
 8002dc4:	701a      	strb	r2, [r3, #0]
	while (husart1.tx_counter);     // Ждем, пока линия не освободится
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	4b0c      	ldr	r3, [pc, #48]	; (8002dfc <UART1_transmit+0x44>)
 8002dca:	7e5b      	ldrb	r3, [r3, #25]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1fb      	bne.n	8002dc8 <UART1_transmit+0x10>
	USART1->TDR = *data;            // Кидаем данные
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <UART1_transmit+0x48>)
 8002dd6:	b292      	uxth	r2, r2
 8002dd8:	851a      	strh	r2, [r3, #40]	; 0x28
	husart1.tx_size = lenght;
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <UART1_transmit+0x44>)
 8002ddc:	1dfa      	adds	r2, r7, #7
 8002dde:	7812      	ldrb	r2, [r2, #0]
 8002de0:	76da      	strb	r2, [r3, #27]
	husart1.tx_counter = 1;         // увеличиваем счетчик
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <UART1_transmit+0x44>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	765a      	strb	r2, [r3, #25]
	USART1->CR1 |= USART_CR1_TXEIE; // включим прерывание
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <UART1_transmit+0x48>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <UART1_transmit+0x48>)
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b002      	add	sp, #8
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000070 	.word	0x20000070
 8002e00:	40013800 	.word	0x40013800

08002e04 <UART2_transmit>:

void UART2_transmit(uint8_t lenght, uint8_t *data) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	701a      	strb	r2, [r3, #0]
	while (husart2.tx_counter)
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	4b0e      	ldr	r3, [pc, #56]	; (8002e50 <UART2_transmit+0x4c>)
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1fa      	bne.n	8002e14 <UART2_transmit+0x10>
		;   //Ждем, пока линия не освободится
	USART2->TDR = *data;          //Кидаем данные
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	781a      	ldrb	r2, [r3, #0]
 8002e22:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <UART2_transmit+0x50>)
 8002e24:	b292      	uxth	r2, r2
 8002e26:	851a      	strh	r2, [r3, #40]	; 0x28
	husart2.tx_size = lenght;
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <UART2_transmit+0x4c>)
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	2142      	movs	r1, #66	; 0x42
 8002e2e:	7812      	ldrb	r2, [r2, #0]
 8002e30:	545a      	strb	r2, [r3, r1]
	husart2.tx_counter = 1;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <UART2_transmit+0x4c>)
 8002e34:	2240      	movs	r2, #64	; 0x40
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
	USART2->CR1 |= USART_CR1_TXEIE; // включим прерывание
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <UART2_transmit+0x50>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <UART2_transmit+0x50>)
 8002e40:	2180      	movs	r1, #128	; 0x80
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b002      	add	sp, #8
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	20000090 	.word	0x20000090
 8002e54:	40004400 	.word	0x40004400

08002e58 <write_to_TMC2300>:

void write_to_TMC2300(uint8_t adr, uint8_t reg, uint32_t data) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	603a      	str	r2, [r7, #0]
 8002e60:	1dfb      	adds	r3, r7, #7
 8002e62:	1c02      	adds	r2, r0, #0
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	1dbb      	adds	r3, r7, #6
 8002e68:	1c0a      	adds	r2, r1, #0
 8002e6a:	701a      	strb	r2, [r3, #0]
	husart1.tx_buffer[0] = 0x55;        // это синхронизация
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002e6e:	2255      	movs	r2, #85	; 0x55
 8002e70:	701a      	strb	r2, [r3, #0]
	husart1.tx_buffer[1] = adr;         // адрес модуля
 8002e72:	4b18      	ldr	r3, [pc, #96]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002e74:	1dfa      	adds	r2, r7, #7
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	705a      	strb	r2, [r3, #1]
	husart1.tx_buffer[2] = 0x80;        // устновим бит записи
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	709a      	strb	r2, [r3, #2]
	husart1.tx_buffer[2] |= reg;        // регистр в который пишем + бит записи
 8002e80:	4b14      	ldr	r3, [pc, #80]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002e82:	789a      	ldrb	r2, [r3, #2]
 8002e84:	1dbb      	adds	r3, r7, #6
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002e8e:	709a      	strb	r2, [r3, #2]
	husart1.tx_buffer[3] = data >> 24;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	0e1b      	lsrs	r3, r3, #24
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002e98:	70da      	strb	r2, [r3, #3]
	husart1.tx_buffer[4] = data >> 16;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002ea2:	711a      	strb	r2, [r3, #4]
	husart1.tx_buffer[5] = data >> 8;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	0a1b      	lsrs	r3, r3, #8
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002eac:	715a      	strb	r2, [r3, #5]
	husart1.tx_buffer[6] = data;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	4b08      	ldr	r3, [pc, #32]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002eb4:	719a      	strb	r2, [r3, #6]
	swuart_calcCRC(husart1.tx_buffer, 8);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002eb8:	2108      	movs	r1, #8
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 fa9a 	bl	80033f4 <swuart_calcCRC>
	UART1_transmit(8, husart1.tx_buffer);
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <write_to_TMC2300+0x7c>)
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	2008      	movs	r0, #8
 8002ec6:	f7ff ff77 	bl	8002db8 <UART1_transmit>
}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	b002      	add	sp, #8
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	20000070 	.word	0x20000070

08002ed8 <read_TMC2300>:

void read_TMC2300(uint8_t adr, uint8_t reg) {  //0x6A считать
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	0002      	movs	r2, r0
 8002ee0:	1dfb      	adds	r3, r7, #7
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	1c0a      	adds	r2, r1, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
 husart1.tx_buffer[0] = 0x55; // это синхронизация
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <read_TMC2300+0x44>)
 8002eec:	2255      	movs	r2, #85	; 0x55
 8002eee:	701a      	strb	r2, [r3, #0]
 husart1.tx_buffer[1] = adr; // адрес модуля
 8002ef0:	4b0a      	ldr	r3, [pc, #40]	; (8002f1c <read_TMC2300+0x44>)
 8002ef2:	1dfa      	adds	r2, r7, #7
 8002ef4:	7812      	ldrb	r2, [r2, #0]
 8002ef6:	705a      	strb	r2, [r3, #1]
 husart1.tx_buffer[2] = reg; // регистр в который пишем + бит записи
 8002ef8:	4b08      	ldr	r3, [pc, #32]	; (8002f1c <read_TMC2300+0x44>)
 8002efa:	1dba      	adds	r2, r7, #6
 8002efc:	7812      	ldrb	r2, [r2, #0]
 8002efe:	709a      	strb	r2, [r3, #2]
 swuart_calcCRC (husart1.tx_buffer, 4);
 8002f00:	4b06      	ldr	r3, [pc, #24]	; (8002f1c <read_TMC2300+0x44>)
 8002f02:	2104      	movs	r1, #4
 8002f04:	0018      	movs	r0, r3
 8002f06:	f000 fa75 	bl	80033f4 <swuart_calcCRC>
 UART1_transmit(4, husart1.tx_buffer);
 8002f0a:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <read_TMC2300+0x44>)
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	2004      	movs	r0, #4
 8002f10:	f7ff ff52 	bl	8002db8 <UART1_transmit>
 }
 8002f14:	46c0      	nop			; (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000070 	.word	0x20000070

08002f20 <setting_TMC230>:

void setting_TMC230(void) {
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	write_to_TMC2300(0, 0x6C, 0x8008001);        // включим, выберем шаг STEP3 // 8
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <setting_TMC230+0x54>)
 8002f26:	001a      	movs	r2, r3
 8002f28:	216c      	movs	r1, #108	; 0x6c
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	f7ff ff94 	bl	8002e58 <write_to_TMC2300>
	Delay_ms(2);
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7ff f821 	bl	8001f78 <Delay_ms>
	write_to_TMC2300(0, 0x10, 0x10208);          // выберем ток STEP3
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <setting_TMC230+0x58>)
 8002f38:	001a      	movs	r2, r3
 8002f3a:	2110      	movs	r1, #16
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7ff ff8b 	bl	8002e58 <write_to_TMC2300>
	Delay_ms(2);
 8002f42:	2002      	movs	r0, #2
 8002f44:	f7ff f818 	bl	8001f78 <Delay_ms>
	write_to_TMC2300(1, 0x6C, 0x8008001);        // включим, полный шаг STEP1
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <setting_TMC230+0x54>)
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	216c      	movs	r1, #108	; 0x6c
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f7ff ff82 	bl	8002e58 <write_to_TMC2300>
	Delay_ms(2);
 8002f54:	2002      	movs	r0, #2
 8002f56:	f7ff f80f 	bl	8001f78 <Delay_ms>
	write_to_TMC2300(3, 0x6C, 0x8008001);        // включим, полный шаг STEP2
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <setting_TMC230+0x54>)
 8002f5c:	001a      	movs	r2, r3
 8002f5e:	216c      	movs	r1, #108	; 0x6c
 8002f60:	2003      	movs	r0, #3
 8002f62:	f7ff ff79 	bl	8002e58 <write_to_TMC2300>
	Delay_ms(2);
 8002f66:	2002      	movs	r0, #2
 8002f68:	f7ff f806 	bl	8001f78 <Delay_ms>
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	08008001 	.word	0x08008001
 8002f78:	00010208 	.word	0x00010208

08002f7c <parsing_data>:

void parsing_data(void) {  // парсим данные
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
	//uint32_t bdt = 0;      // для запоминания скорости перед установкой
	if (husart2.rx_ok) {   // если флаг ок, сбросим его
 8002f82:	4b88      	ldr	r3, [pc, #544]	; (80031a4 <parsing_data+0x228>)
 8002f84:	2243      	movs	r2, #67	; 0x43
 8002f86:	5c9b      	ldrb	r3, [r3, r2]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d100      	bne.n	8002f8e <parsing_data+0x12>
 8002f8c:	e106      	b.n	800319c <parsing_data+0x220>
		husart2.rx_ok = 0;
 8002f8e:	4b85      	ldr	r3, [pc, #532]	; (80031a4 <parsing_data+0x228>)
 8002f90:	2243      	movs	r2, #67	; 0x43
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]
		if (husart2.rx_buffer[0] == 0x02) { // если совпадает начало посылки  умножение на 4 заменим смещением на 2
 8002f96:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <parsing_data+0x228>)
 8002f98:	2220      	movs	r2, #32
 8002f9a:	5c9b      	ldrb	r3, [r3, r2]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d000      	beq.n	8002fa2 <parsing_data+0x26>
 8002fa0:	e0fc      	b.n	800319c <parsing_data+0x220>
			if (calcCRC(((husart2.rx_buffer[1] << 2) + 3), husart2.rx_buffer)
 8002fa2:	4b80      	ldr	r3, [pc, #512]	; (80031a4 <parsing_data+0x228>)
 8002fa4:	2221      	movs	r2, #33	; 0x21
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3303      	adds	r3, #3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4a7d      	ldr	r2, [pc, #500]	; (80031a8 <parsing_data+0x22c>)
 8002fb2:	0011      	movs	r1, r2
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fa71 	bl	800349c <calcCRC>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	0018      	movs	r0, r3
					== husart2.rx_buffer[((husart2.rx_buffer[1] << 2) + 3)]) { // проверим срс
 8002fbe:	4b79      	ldr	r3, [pc, #484]	; (80031a4 <parsing_data+0x228>)
 8002fc0:	2221      	movs	r2, #33	; 0x21
 8002fc2:	5c9b      	ldrb	r3, [r3, r2]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3303      	adds	r3, #3
 8002fc8:	4a76      	ldr	r2, [pc, #472]	; (80031a4 <parsing_data+0x228>)
 8002fca:	2120      	movs	r1, #32
 8002fcc:	18d3      	adds	r3, r2, r3
 8002fce:	185b      	adds	r3, r3, r1
 8002fd0:	781b      	ldrb	r3, [r3, #0]
			if (calcCRC(((husart2.rx_buffer[1] << 2) + 3), husart2.rx_buffer)
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	d000      	beq.n	8002fd8 <parsing_data+0x5c>
 8002fd6:	e0d5      	b.n	8003184 <parsing_data+0x208>
				switch (husart2.rx_buffer[2]) { // в зависимости от типа посылки выполняем операции
 8002fd8:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <parsing_data+0x228>)
 8002fda:	2222      	movs	r2, #34	; 0x22
 8002fdc:	5c9b      	ldrb	r3, [r3, r2]
 8002fde:	2b0d      	cmp	r3, #13
 8002fe0:	d900      	bls.n	8002fe4 <parsing_data+0x68>
 8002fe2:	e0db      	b.n	800319c <parsing_data+0x220>
 8002fe4:	009a      	lsls	r2, r3, #2
 8002fe6:	4b71      	ldr	r3, [pc, #452]	; (80031ac <parsing_data+0x230>)
 8002fe8:	18d3      	adds	r3, r2, r3
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	469f      	mov	pc, r3
				case 1:
					send_data.one = 0x01; // запишем что нужно передать в первую переменную структуры
 8002fee:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <parsing_data+0x234>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]
					form_send_byte(PING, 1); // отправим ответ на пинг (тип посылки, одна переменная)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2001      	movs	r0, #1
 8002ff8:	f000 f926 	bl	8003248 <form_send_byte>
					break;
 8002ffc:	e0ce      	b.n	800319c <parsing_data+0x220>
				case 2:
					new_data_flag(make_32bit(husart2.rx_buffer + 3)); // соберем из переданного буфера переменную с 3 элемента
 8002ffe:	4b6d      	ldr	r3, [pc, #436]	; (80031b4 <parsing_data+0x238>)
 8003000:	0018      	movs	r0, r3
 8003002:	f000 f99f 	bl	8003344 <make_32bit>
 8003006:	0003      	movs	r3, r0
 8003008:	0018      	movs	r0, r3
 800300a:	f7ff f911 	bl	8002230 <new_data_flag>
					send_data.one = read_flag();
 800300e:	f000 f8dd 	bl	80031cc <read_flag>
 8003012:	0002      	movs	r2, r0
 8003014:	4b66      	ldr	r3, [pc, #408]	; (80031b0 <parsing_data+0x234>)
 8003016:	601a      	str	r2, [r3, #0]
					form_send_byte(SET_PARAM, 1);
 8003018:	2101      	movs	r1, #1
 800301a:	2002      	movs	r0, #2
 800301c:	f000 f914 	bl	8003248 <form_send_byte>
					break;
 8003020:	e0bc      	b.n	800319c <parsing_data+0x220>
				case 3:
					send_data.one = poz_motor(1); // записать текущую позицию мотора
 8003022:	2001      	movs	r0, #1
 8003024:	f7ff f96a 	bl	80022fc <poz_motor>
 8003028:	0002      	movs	r2, r0
 800302a:	4b61      	ldr	r3, [pc, #388]	; (80031b0 <parsing_data+0x234>)
 800302c:	601a      	str	r2, [r3, #0]
					send_data.two = poz_motor(2);
 800302e:	2002      	movs	r0, #2
 8003030:	f7ff f964 	bl	80022fc <poz_motor>
 8003034:	0002      	movs	r2, r0
 8003036:	4b5e      	ldr	r3, [pc, #376]	; (80031b0 <parsing_data+0x234>)
 8003038:	605a      	str	r2, [r3, #4]
					send_data.three = read_flag(); // и флаг (доделать движение моторов)
 800303a:	f000 f8c7 	bl	80031cc <read_flag>
 800303e:	0002      	movs	r2, r0
 8003040:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <parsing_data+0x234>)
 8003042:	609a      	str	r2, [r3, #8]
					form_send_byte(MOTOR_POS, 3);
 8003044:	2103      	movs	r1, #3
 8003046:	2003      	movs	r0, #3
 8003048:	f000 f8fe 	bl	8003248 <form_send_byte>
					break;
 800304c:	e0a6      	b.n	800319c <parsing_data+0x220>
					//form_send_byte(SET_BAUD, 1);  // ответить скоростью
					//Delay_ms(5);
					//if (bdt) new_baud_set (bdt);  // если бауд правильный то установить его
					break;
				case 5:
					send_data.one = extrn_step(make_32bit(husart2.rx_buffer + 3),
 800304e:	4b59      	ldr	r3, [pc, #356]	; (80031b4 <parsing_data+0x238>)
 8003050:	0018      	movs	r0, r3
 8003052:	f000 f977 	bl	8003344 <make_32bit>
 8003056:	0004      	movs	r4, r0
 8003058:	4b57      	ldr	r3, [pc, #348]	; (80031b8 <parsing_data+0x23c>)
 800305a:	0018      	movs	r0, r3
 800305c:	f000 f972 	bl	8003344 <make_32bit>
 8003060:	0003      	movs	r3, r0
 8003062:	0019      	movs	r1, r3
 8003064:	0020      	movs	r0, r4
 8003066:	f7ff fc3d 	bl	80028e4 <extrn_step>
 800306a:	0002      	movs	r2, r0
 800306c:	4b50      	ldr	r3, [pc, #320]	; (80031b0 <parsing_data+0x234>)
 800306e:	601a      	str	r2, [r3, #0]
							make_32bit(husart2.rx_buffer + 7)); // установить поз моторов
					form_send_byte(NEW_POS, 1);
 8003070:	2101      	movs	r1, #1
 8003072:	2005      	movs	r0, #5
 8003074:	f000 f8e8 	bl	8003248 <form_send_byte>
					break;
 8003078:	e090      	b.n	800319c <parsing_data+0x220>
				case 6:
					send_data.one = setting_pin_rasbery (make_32bit(husart2.rx_buffer + 3));
 800307a:	4b4e      	ldr	r3, [pc, #312]	; (80031b4 <parsing_data+0x238>)
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f961 	bl	8003344 <make_32bit>
 8003082:	0003      	movs	r3, r0
 8003084:	0018      	movs	r0, r3
 8003086:	f000 fda5 	bl	8003bd4 <setting_pin_rasbery>
 800308a:	0002      	movs	r2, r0
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <parsing_data+0x234>)
 800308e:	601a      	str	r2, [r3, #0]
					form_send_byte(SIGN, 1);
 8003090:	2101      	movs	r1, #1
 8003092:	2006      	movs	r0, #6
 8003094:	f000 f8d8 	bl	8003248 <form_send_byte>
					break;
 8003098:	e080      	b.n	800319c <parsing_data+0x220>
				case 7:
					send_data.one = new_speed(make_32bit(husart2.rx_buffer + 3),make_32bit(husart2.rx_buffer + 7));
 800309a:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <parsing_data+0x238>)
 800309c:	0018      	movs	r0, r3
 800309e:	f000 f951 	bl	8003344 <make_32bit>
 80030a2:	0004      	movs	r4, r0
 80030a4:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <parsing_data+0x23c>)
 80030a6:	0018      	movs	r0, r3
 80030a8:	f000 f94c 	bl	8003344 <make_32bit>
 80030ac:	0003      	movs	r3, r0
 80030ae:	0019      	movs	r1, r3
 80030b0:	0020      	movs	r0, r4
 80030b2:	f7fe fcfb 	bl	8001aac <new_speed>
 80030b6:	0002      	movs	r2, r0
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <parsing_data+0x234>)
 80030ba:	601a      	str	r2, [r3, #0]
					form_send_byte(NEW_SPEED, 1);
 80030bc:	2101      	movs	r1, #1
 80030be:	2007      	movs	r0, #7
 80030c0:	f000 f8c2 	bl	8003248 <form_send_byte>
					break;
 80030c4:	e06a      	b.n	800319c <parsing_data+0x220>
				case 8:
					send_data.one = max_step(0); // записать текущую позицию мотора
 80030c6:	2000      	movs	r0, #0
 80030c8:	f7ff fc4e 	bl	8002968 <max_step>
 80030cc:	0002      	movs	r2, r0
 80030ce:	4b38      	ldr	r3, [pc, #224]	; (80031b0 <parsing_data+0x234>)
 80030d0:	601a      	str	r2, [r3, #0]
					send_data.two = max_step(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7ff fc48 	bl	8002968 <max_step>
 80030d8:	0002      	movs	r2, r0
 80030da:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <parsing_data+0x234>)
 80030dc:	605a      	str	r2, [r3, #4]
					form_send_byte(STEP_COUNT, 2);
 80030de:	2102      	movs	r1, #2
 80030e0:	2008      	movs	r0, #8
 80030e2:	f000 f8b1 	bl	8003248 <form_send_byte>
					break;
 80030e6:	e059      	b.n	800319c <parsing_data+0x220>
				case 9:
					send_data.one = 0x01;   // отправить ок
 80030e8:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <parsing_data+0x234>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
					form_send_byte(STOP_MOTOR, 1);
 80030ee:	2101      	movs	r1, #1
 80030f0:	2009      	movs	r0, #9
 80030f2:	f000 f8a9 	bl	8003248 <form_send_byte>
					stop_motor();           // остановить моторы
 80030f6:	f7ff f8ef 	bl	80022d8 <stop_motor>
					break;
 80030fa:	e04f      	b.n	800319c <parsing_data+0x220>
				case 10:
					send_data.one = VERSIONS; // отправить версию
 80030fc:	4b2c      	ldr	r3, [pc, #176]	; (80031b0 <parsing_data+0x234>)
 80030fe:	2202      	movs	r2, #2
 8003100:	601a      	str	r2, [r3, #0]
					form_send_byte(VERSION, 1);
 8003102:	2101      	movs	r1, #1
 8003104:	200a      	movs	r0, #10
 8003106:	f000 f89f 	bl	8003248 <form_send_byte>
					break;
 800310a:	e047      	b.n	800319c <parsing_data+0x220>
				case 11:
					send_data.one = set_pid(make_32bit(husart2.rx_buffer + 3));
 800310c:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <parsing_data+0x238>)
 800310e:	0018      	movs	r0, r3
 8003110:	f000 f918 	bl	8003344 <make_32bit>
 8003114:	0003      	movs	r3, r0
 8003116:	0018      	movs	r0, r3
 8003118:	f000 fd26 	bl	8003b68 <set_pid>
 800311c:	0002      	movs	r2, r0
 800311e:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <parsing_data+0x234>)
 8003120:	601a      	str	r2, [r3, #0]
					form_send_byte(NEW_PID, 1);
 8003122:	2101      	movs	r1, #1
 8003124:	200b      	movs	r0, #11
 8003126:	f000 f88f 	bl	8003248 <form_send_byte>
					break;
 800312a:	e037      	b.n	800319c <parsing_data+0x220>
				case 12:
					send_data.one = 0x01;
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <parsing_data+0x234>)
 800312e:	2201      	movs	r2, #1
 8003130:	601a      	str	r2, [r3, #0]
					form_send_byte(RESTARTS, 1);
 8003132:	2101      	movs	r1, #1
 8003134:	200c      	movs	r0, #12
 8003136:	f000 f887 	bl	8003248 <form_send_byte>
					while (1);
 800313a:	e7fe      	b.n	800313a <parsing_data+0x1be>
					break;
				case 13: ;
				    uint16_t* adr_flash_write;
				    FLASH->KEYR = FLASH_KEY1;             // последовательность для разблокировки памяти
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <parsing_data+0x240>)
 800313e:	4a20      	ldr	r2, [pc, #128]	; (80031c0 <parsing_data+0x244>)
 8003140:	605a      	str	r2, [r3, #4]
					FLASH->KEYR = FLASH_KEY2;
 8003142:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <parsing_data+0x240>)
 8003144:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <parsing_data+0x248>)
 8003146:	605a      	str	r2, [r3, #4]
					SET_BIT(FLASH->CR, FLASH_CR_PG);      // установим бит записи
 8003148:	4b1c      	ldr	r3, [pc, #112]	; (80031bc <parsing_data+0x240>)
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <parsing_data+0x240>)
 800314e:	2101      	movs	r1, #1
 8003150:	430a      	orrs	r2, r1
 8003152:	611a      	str	r2, [r3, #16]
					adr_flash_write = (uint16_t*)0x08003FF8;
 8003154:	4b1c      	ldr	r3, [pc, #112]	; (80031c8 <parsing_data+0x24c>)
 8003156:	607b      	str	r3, [r7, #4]
					*adr_flash_write = 0x01;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	801a      	strh	r2, [r3, #0]
				    while (!(FLASH->SR & FLASH_SR_EOP));  // Дождемся поднятия флага о готовности
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	4b16      	ldr	r3, [pc, #88]	; (80031bc <parsing_data+0x240>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	4013      	ands	r3, r2
 8003168:	d0fa      	beq.n	8003160 <parsing_data+0x1e4>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);    // сбросим бит записи
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <parsing_data+0x240>)
 800316c:	691a      	ldr	r2, [r3, #16]
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <parsing_data+0x240>)
 8003170:	2101      	movs	r1, #1
 8003172:	438a      	bics	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
					SET_BIT(FLASH->CR, FLASH_CR_LOCK);    // заблокируем память
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <parsing_data+0x240>)
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	4b10      	ldr	r3, [pc, #64]	; (80031bc <parsing_data+0x240>)
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	430a      	orrs	r2, r1
 8003180:	611a      	str	r2, [r3, #16]
					while (1);
 8003182:	e7fe      	b.n	8003182 <parsing_data+0x206>
				}
			} else {                                       // если не совпал срс
				send_data.one = 0x00;   // отправить не ок
 8003184:	4b0a      	ldr	r3, [pc, #40]	; (80031b0 <parsing_data+0x234>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
				form_send_byte(husart2.rx_buffer[2], 0);
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <parsing_data+0x228>)
 800318c:	2222      	movs	r2, #34	; 0x22
 800318e:	5c9b      	ldrb	r3, [r3, r2]
 8003190:	2100      	movs	r1, #0
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f858 	bl	8003248 <form_send_byte>
			}
		}
	}
}
 8003198:	e000      	b.n	800319c <parsing_data+0x220>
					break;
 800319a:	46c0      	nop			; (mov r8, r8)
}
 800319c:	46c0      	nop			; (mov r8, r8)
 800319e:	46bd      	mov	sp, r7
 80031a0:	b003      	add	sp, #12
 80031a2:	bd90      	pop	{r4, r7, pc}
 80031a4:	20000090 	.word	0x20000090
 80031a8:	200000b0 	.word	0x200000b0
 80031ac:	08003dc8 	.word	0x08003dc8
 80031b0:	200000d4 	.word	0x200000d4
 80031b4:	200000b3 	.word	0x200000b3
 80031b8:	200000b7 	.word	0x200000b7
 80031bc:	40022000 	.word	0x40022000
 80031c0:	45670123 	.word	0x45670123
 80031c4:	cdef89ab 	.word	0xcdef89ab
 80031c8:	08003ff8 	.word	0x08003ff8

080031cc <read_flag>:

uint32_t read_flag(void) {           // считем отдельные флаги в одну переменную
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	607b      	str	r3, [r7, #4]
	data = point_flags->ir_filter;
 80031d6:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <read_flag+0x74>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	0fdb      	lsrs	r3, r3, #31
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	607b      	str	r3, [r7, #4]
	data |= point_flags->iris_drive << 1;
 80031e4:	4b16      	ldr	r3, [pc, #88]	; (8003240 <read_flag+0x74>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	785b      	ldrb	r3, [r3, #1]
 80031ea:	07db      	lsls	r3, r3, #31
 80031ec:	0fdb      	lsrs	r3, r3, #31
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	001a      	movs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	607b      	str	r3, [r7, #4]
	//data |= point_flags->set_led << 2;        //??
	if (READ_MOTOR1)
 80031fa:	2390      	movs	r3, #144	; 0x90
 80031fc:	05db      	lsls	r3, r3, #23
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	2380      	movs	r3, #128	; 0x80
 8003202:	019b      	lsls	r3, r3, #6
 8003204:	4013      	ands	r3, r2
 8003206:	d003      	beq.n	8003210 <read_flag+0x44>
		data |= 1 << 3;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2208      	movs	r2, #8
 800320c:	4313      	orrs	r3, r2
 800320e:	607b      	str	r3, [r7, #4]
	if (READ_MOTOR2)
 8003210:	2390      	movs	r3, #144	; 0x90
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	01db      	lsls	r3, r3, #7
 800321a:	4013      	ands	r3, r2
 800321c:	d003      	beq.n	8003226 <read_flag+0x5a>
		data |= 1 << 4;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2210      	movs	r2, #16
 8003222:	4313      	orrs	r3, r2
 8003224:	607b      	str	r3, [r7, #4]
	data |= pid_param << 5;
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <read_flag+0x78>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	001a      	movs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4313      	orrs	r3, r2
 8003232:	607b      	str	r3, [r7, #4]
	return data;
 8003234:	687b      	ldr	r3, [r7, #4]
}
 8003236:	0018      	movs	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	b002      	add	sp, #8
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	20000000 	.word	0x20000000
 8003244:	2000001c 	.word	0x2000001c

08003248 <form_send_byte>:

void form_send_byte(uint8_t number_send, uint8_t num_byte) { // функция для формирования ответа. указываем количество 32байтных данных для отправки
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	0002      	movs	r2, r0
 8003250:	1dfb      	adds	r3, r7, #7
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	1dbb      	adds	r3, r7, #6
 8003256:	1c0a      	adds	r2, r1, #0
 8003258:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[0] = 0x02;        // начало посылки
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <form_send_byte+0xf4>)
 800325c:	2202      	movs	r2, #2
 800325e:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[1] = num_byte;    // сколько полезных данных
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <form_send_byte+0xf4>)
 8003262:	1dba      	adds	r2, r7, #6
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	705a      	strb	r2, [r3, #1]
	husart2.tx_buffer[2] = number_send; // номер посылки (ее смысл)
 8003268:	4b34      	ldr	r3, [pc, #208]	; (800333c <form_send_byte+0xf4>)
 800326a:	1dfa      	adds	r2, r7, #7
 800326c:	7812      	ldrb	r2, [r2, #0]
 800326e:	709a      	strb	r2, [r3, #2]
	divide_32bit(send_data.one, 3);     // раскладываем переменную в буфер
 8003270:	4b33      	ldr	r3, [pc, #204]	; (8003340 <form_send_byte+0xf8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2103      	movs	r1, #3
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f890 	bl	800339c <divide_32bit>
	switch (num_byte) {
 800327c:	1dbb      	adds	r3, r7, #6
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d03b      	beq.n	80032fc <form_send_byte+0xb4>
 8003284:	dc55      	bgt.n	8003332 <form_send_byte+0xea>
 8003286:	2b02      	cmp	r3, #2
 8003288:	d023      	beq.n	80032d2 <form_send_byte+0x8a>
 800328a:	dc52      	bgt.n	8003332 <form_send_byte+0xea>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <form_send_byte+0x4e>
 8003290:	2b01      	cmp	r3, #1
 8003292:	d00f      	beq.n	80032b4 <form_send_byte+0x6c>
		divide_32bit(send_data.three, 11);
		husart2.tx_buffer[15] = calcCRC(15, husart2.tx_buffer);
		UART2_transmit(16, husart2.tx_buffer);
		break;
	}
}
 8003294:	e04d      	b.n	8003332 <form_send_byte+0xea>
		husart2.tx_buffer[3] = calcCRC(3, husart2.tx_buffer);
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <form_send_byte+0xf4>)
 8003298:	0019      	movs	r1, r3
 800329a:	2003      	movs	r0, #3
 800329c:	f000 f8fe 	bl	800349c <calcCRC>
 80032a0:	0003      	movs	r3, r0
 80032a2:	001a      	movs	r2, r3
 80032a4:	4b25      	ldr	r3, [pc, #148]	; (800333c <form_send_byte+0xf4>)
 80032a6:	70da      	strb	r2, [r3, #3]
		UART2_transmit(4, husart2.tx_buffer);
 80032a8:	4b24      	ldr	r3, [pc, #144]	; (800333c <form_send_byte+0xf4>)
 80032aa:	0019      	movs	r1, r3
 80032ac:	2004      	movs	r0, #4
 80032ae:	f7ff fda9 	bl	8002e04 <UART2_transmit>
		break;
 80032b2:	e03e      	b.n	8003332 <form_send_byte+0xea>
		husart2.tx_buffer[7] = calcCRC(7, husart2.tx_buffer);
 80032b4:	4b21      	ldr	r3, [pc, #132]	; (800333c <form_send_byte+0xf4>)
 80032b6:	0019      	movs	r1, r3
 80032b8:	2007      	movs	r0, #7
 80032ba:	f000 f8ef 	bl	800349c <calcCRC>
 80032be:	0003      	movs	r3, r0
 80032c0:	001a      	movs	r2, r3
 80032c2:	4b1e      	ldr	r3, [pc, #120]	; (800333c <form_send_byte+0xf4>)
 80032c4:	71da      	strb	r2, [r3, #7]
		UART2_transmit(8, husart2.tx_buffer);
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <form_send_byte+0xf4>)
 80032c8:	0019      	movs	r1, r3
 80032ca:	2008      	movs	r0, #8
 80032cc:	f7ff fd9a 	bl	8002e04 <UART2_transmit>
		break;
 80032d0:	e02f      	b.n	8003332 <form_send_byte+0xea>
		divide_32bit(send_data.two, 7);
 80032d2:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <form_send_byte+0xf8>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2107      	movs	r1, #7
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f85f 	bl	800339c <divide_32bit>
		husart2.tx_buffer[11] = calcCRC(11, husart2.tx_buffer);
 80032de:	4b17      	ldr	r3, [pc, #92]	; (800333c <form_send_byte+0xf4>)
 80032e0:	0019      	movs	r1, r3
 80032e2:	200b      	movs	r0, #11
 80032e4:	f000 f8da 	bl	800349c <calcCRC>
 80032e8:	0003      	movs	r3, r0
 80032ea:	001a      	movs	r2, r3
 80032ec:	4b13      	ldr	r3, [pc, #76]	; (800333c <form_send_byte+0xf4>)
 80032ee:	72da      	strb	r2, [r3, #11]
		UART2_transmit(12, husart2.tx_buffer);
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <form_send_byte+0xf4>)
 80032f2:	0019      	movs	r1, r3
 80032f4:	200c      	movs	r0, #12
 80032f6:	f7ff fd85 	bl	8002e04 <UART2_transmit>
		break;
 80032fa:	e01a      	b.n	8003332 <form_send_byte+0xea>
		divide_32bit(send_data.two, 7);
 80032fc:	4b10      	ldr	r3, [pc, #64]	; (8003340 <form_send_byte+0xf8>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2107      	movs	r1, #7
 8003302:	0018      	movs	r0, r3
 8003304:	f000 f84a 	bl	800339c <divide_32bit>
		divide_32bit(send_data.three, 11);
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <form_send_byte+0xf8>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	210b      	movs	r1, #11
 800330e:	0018      	movs	r0, r3
 8003310:	f000 f844 	bl	800339c <divide_32bit>
		husart2.tx_buffer[15] = calcCRC(15, husart2.tx_buffer);
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <form_send_byte+0xf4>)
 8003316:	0019      	movs	r1, r3
 8003318:	200f      	movs	r0, #15
 800331a:	f000 f8bf 	bl	800349c <calcCRC>
 800331e:	0003      	movs	r3, r0
 8003320:	001a      	movs	r2, r3
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <form_send_byte+0xf4>)
 8003324:	73da      	strb	r2, [r3, #15]
		UART2_transmit(16, husart2.tx_buffer);
 8003326:	4b05      	ldr	r3, [pc, #20]	; (800333c <form_send_byte+0xf4>)
 8003328:	0019      	movs	r1, r3
 800332a:	2010      	movs	r0, #16
 800332c:	f7ff fd6a 	bl	8002e04 <UART2_transmit>
		break;
 8003330:	46c0      	nop			; (mov r8, r8)
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46bd      	mov	sp, r7
 8003336:	b002      	add	sp, #8
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	20000090 	.word	0x20000090
 8003340:	200000d4 	.word	0x200000d4

08003344 <make_32bit>:

uint32_t make_32bit(uint8_t *start_num) { // собрать 32битную переменную из буфера
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
	data = *start_num << 24;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	061b      	lsls	r3, r3, #24
 8003356:	60fb      	str	r3, [r7, #12]
	start_num++;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3301      	adds	r3, #1
 800335c:	607b      	str	r3, [r7, #4]
	data |= *start_num << 16;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	041b      	lsls	r3, r3, #16
 8003364:	001a      	movs	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
	start_num++;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3301      	adds	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
	data |= *start_num  << 8;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	001a      	movs	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]
	start_num++;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3301      	adds	r3, #1
 8003384:	607b      	str	r3, [r7, #4]
	data |= *start_num ;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	001a      	movs	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	4313      	orrs	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
	return data;
 8003392:	68fb      	ldr	r3, [r7, #12]
}
 8003394:	0018      	movs	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	b004      	add	sp, #16
 800339a:	bd80      	pop	{r7, pc}

0800339c <divide_32bit>:

void divide_32bit(uint32_t data, uint8_t start_num) { // разложить 32битную переменную в буфер
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	000a      	movs	r2, r1
 80033a6:	1cfb      	adds	r3, r7, #3
 80033a8:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[start_num] = data >> 24;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0e1a      	lsrs	r2, r3, #24
 80033ae:	1cfb      	adds	r3, r7, #3
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b2d1      	uxtb	r1, r2
 80033b4:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <divide_32bit+0x54>)
 80033b6:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 1] = data >> 16;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0c1a      	lsrs	r2, r3, #16
 80033bc:	1cfb      	adds	r3, r7, #3
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2d1      	uxtb	r1, r2
 80033c4:	4a0a      	ldr	r2, [pc, #40]	; (80033f0 <divide_32bit+0x54>)
 80033c6:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 2] = data >> 8;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0a1a      	lsrs	r2, r3, #8
 80033cc:	1cfb      	adds	r3, r7, #3
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	3302      	adds	r3, #2
 80033d2:	b2d1      	uxtb	r1, r2
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <divide_32bit+0x54>)
 80033d6:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 3] = data;
 80033d8:	1cfb      	adds	r3, r7, #3
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	3303      	adds	r3, #3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	b2d1      	uxtb	r1, r2
 80033e2:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <divide_32bit+0x54>)
 80033e4:	54d1      	strb	r1, [r2, r3]
}
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b002      	add	sp, #8
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	20000090 	.word	0x20000090

080033f4 <swuart_calcCRC>:

void swuart_calcCRC(uint8_t *datagram, uint8_t datagramLength) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	000a      	movs	r2, r1
 80033fe:	1cfb      	adds	r3, r7, #3
 8003400:	701a      	strb	r2, [r3, #0]
	int i, j;
	uint8_t *crc = datagram + (datagramLength - 1); // CRC located in last byte of message
 8003402:	1cfb      	adds	r3, r7, #3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	3b01      	subs	r3, #1
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	18d3      	adds	r3, r2, r3
 800340c:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2200      	movs	r2, #0
 8003412:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagramLength - 1); i++) { // Execute for all bytes of a message
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e035      	b.n	8003486 <swuart_calcCRC+0x92>
		currentByte = datagram[i]; // Retrieve a byte to be sent from Array
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	18d2      	adds	r2, r2, r3
 8003420:	230f      	movs	r3, #15
 8003422:	18fb      	adds	r3, r7, r3
 8003424:	7812      	ldrb	r2, [r2, #0]
 8003426:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8003428:	2300      	movs	r3, #0
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	e025      	b.n	800347a <swuart_calcCRC+0x86>
			if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	09db      	lsrs	r3, r3, #7
 8003434:	b2db      	uxtb	r3, r3
 8003436:	0019      	movs	r1, r3
 8003438:	230f      	movs	r3, #15
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	4013      	ands	r3, r2
 8003442:	4299      	cmp	r1, r3
 8003444:	d00a      	beq.n	800345c <swuart_calcCRC+0x68>
					{
				*crc = (*crc << 1) ^ 0x07;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	b25b      	sxtb	r3, r3
 800344e:	2207      	movs	r2, #7
 8003450:	4053      	eors	r3, r2
 8003452:	b25b      	sxtb	r3, r3
 8003454:	b2da      	uxtb	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	701a      	strb	r2, [r3, #0]
 800345a:	e005      	b.n	8003468 <swuart_calcCRC+0x74>
			} else {
				*crc = (*crc << 1);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	18db      	adds	r3, r3, r3
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	701a      	strb	r2, [r3, #0]
			}
			currentByte = currentByte >> 1;
 8003468:	220f      	movs	r2, #15
 800346a:	18bb      	adds	r3, r7, r2
 800346c:	18ba      	adds	r2, r7, r2
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	0852      	lsrs	r2, r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	3301      	adds	r3, #1
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b07      	cmp	r3, #7
 800347e:	ddd6      	ble.n	800342e <swuart_calcCRC+0x3a>
	for (i = 0; i < (datagramLength - 1); i++) { // Execute for all bytes of a message
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	3301      	adds	r3, #1
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	1cfb      	adds	r3, r7, #3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	3b01      	subs	r3, #1
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	429a      	cmp	r2, r3
 8003490:	dbc3      	blt.n	800341a <swuart_calcCRC+0x26>
		} // for CRC bit
	} // for message byte
}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}

0800349c <calcCRC>:

uint8_t calcCRC(uint8_t len, uint8_t *buf) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	0002      	movs	r2, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	1dfb      	adds	r3, r7, #7
 80034a8:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
 80034aa:	230f      	movs	r3, #15
 80034ac:	18fb      	adds	r3, r7, r3
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80034b2:	2300      	movs	r3, #0
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	e00c      	b.n	80034d2 <calcCRC+0x36>
		r -= buf[i];
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	18d3      	adds	r3, r2, r3
 80034be:	781a      	ldrb	r2, [r3, #0]
 80034c0:	210f      	movs	r1, #15
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	1879      	adds	r1, r7, r1
 80034c6:	7809      	ldrb	r1, [r1, #0]
 80034c8:	1a8a      	subs	r2, r1, r2
 80034ca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3301      	adds	r3, #1
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	1dfb      	adds	r3, r7, #7
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	429a      	cmp	r2, r3
 80034da:	dbed      	blt.n	80034b8 <calcCRC+0x1c>
	}
	r &= 0x7F;
 80034dc:	200f      	movs	r0, #15
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	183a      	adds	r2, r7, r0
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	217f      	movs	r1, #127	; 0x7f
 80034e6:	400a      	ands	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
	if (r < 0x21) {
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b20      	cmp	r3, #32
 80034f0:	d804      	bhi.n	80034fc <calcCRC+0x60>
		r += 0x21;
 80034f2:	183b      	adds	r3, r7, r0
 80034f4:	183a      	adds	r2, r7, r0
 80034f6:	7812      	ldrb	r2, [r2, #0]
 80034f8:	3221      	adds	r2, #33	; 0x21
 80034fa:	701a      	strb	r2, [r3, #0]
	}
#ifdef DEBUG_MODE
     return 1;
#endif
	return r;
 80034fc:	230f      	movs	r3, #15
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	781b      	ldrb	r3, [r3, #0]
}
 8003502:	0018      	movs	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	b004      	add	sp, #16
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
	if (READ_BIT(USART1->ISR, USART_ISR_TXE)) {
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <USART1_IRQHandler+0xa4>)
 8003512:	69db      	ldr	r3, [r3, #28]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	4013      	ands	r3, r2
 8003518:	d020      	beq.n	800355c <USART1_IRQHandler+0x50>
		if (husart1.tx_size > husart1.tx_counter) {
 800351a:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <USART1_IRQHandler+0xa8>)
 800351c:	7eda      	ldrb	r2, [r3, #27]
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003520:	7e5b      	ldrb	r3, [r3, #25]
 8003522:	429a      	cmp	r2, r3
 8003524:	d90e      	bls.n	8003544 <USART1_IRQHandler+0x38>
			USART1->TDR = husart1.tx_buffer[husart1.tx_counter];
 8003526:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003528:	7e5b      	ldrb	r3, [r3, #25]
 800352a:	001a      	movs	r2, r3
 800352c:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <USART1_IRQHandler+0xa8>)
 800352e:	5c9a      	ldrb	r2, [r3, r2]
 8003530:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <USART1_IRQHandler+0xa4>)
 8003532:	b292      	uxth	r2, r2
 8003534:	851a      	strh	r2, [r3, #40]	; 0x28
			husart1.tx_counter++;
 8003536:	4b1f      	ldr	r3, [pc, #124]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003538:	7e5b      	ldrb	r3, [r3, #25]
 800353a:	3301      	adds	r3, #1
 800353c:	b2da      	uxtb	r2, r3
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003540:	765a      	strb	r2, [r3, #25]
 8003542:	e00b      	b.n	800355c <USART1_IRQHandler+0x50>
		} else {
			CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE);
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <USART1_IRQHandler+0xa4>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <USART1_IRQHandler+0xa4>)
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	438a      	bics	r2, r1
 800354e:	601a      	str	r2, [r3, #0]
			husart1.tx_counter = 0;
 8003550:	4b18      	ldr	r3, [pc, #96]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003552:	2200      	movs	r2, #0
 8003554:	765a      	strb	r2, [r3, #25]
			husart1.tx_size = 0;
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003558:	2200      	movs	r2, #0
 800355a:	76da      	strb	r2, [r3, #27]
		}
	}

	if (READ_BIT(USART1->ISR, USART_ISR_RXNE)) {   //Если пришли данные по USART
 800355c:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <USART1_IRQHandler+0xa4>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2220      	movs	r2, #32
 8003562:	4013      	ands	r3, r2
 8003564:	d016      	beq.n	8003594 <USART1_IRQHandler+0x88>
		husart1.rx_buffer[husart1.rx_counter] = USART1->RDR; //Считаем данные в соответствующую ячейку в rx_buffer
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <USART1_IRQHandler+0xa4>)
 8003568:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800356a:	b29a      	uxth	r2, r3
 800356c:	4b11      	ldr	r3, [pc, #68]	; (80035b4 <USART1_IRQHandler+0xa8>)
 800356e:	7e9b      	ldrb	r3, [r3, #26]
 8003570:	0019      	movs	r1, r3
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003576:	185b      	adds	r3, r3, r1
 8003578:	729a      	strb	r2, [r3, #10]
		husart1.rx_counter++;              //Увеличим счетчик принятых байт на 1
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <USART1_IRQHandler+0xa8>)
 800357c:	7e9b      	ldrb	r3, [r3, #26]
 800357e:	3301      	adds	r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b0c      	ldr	r3, [pc, #48]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003584:	769a      	strb	r2, [r3, #26]
		if (husart1.rx_counter > 14)
 8003586:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003588:	7e9b      	ldrb	r3, [r3, #26]
 800358a:	2b0e      	cmp	r3, #14
 800358c:	d902      	bls.n	8003594 <USART1_IRQHandler+0x88>
			husart1.rx_counter = 0;
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <USART1_IRQHandler+0xa8>)
 8003590:	2200      	movs	r2, #0
 8003592:	769a      	strb	r2, [r3, #26]
	}
	if (READ_BIT(USART1->ISR, USART_ISR_ORE)) {       //Если прилетел флаг OVRN
 8003594:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <USART1_IRQHandler+0xa4>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2208      	movs	r2, #8
 800359a:	4013      	ands	r3, r2
 800359c:	d005      	beq.n	80035aa <USART1_IRQHandler+0x9e>
		SET_BIT(USART1->ICR, USART_ICR_ORECF);              //Сбросим флаг OVRN
 800359e:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <USART1_IRQHandler+0xa4>)
 80035a0:	6a1a      	ldr	r2, [r3, #32]
 80035a2:	4b03      	ldr	r3, [pc, #12]	; (80035b0 <USART1_IRQHandler+0xa4>)
 80035a4:	2108      	movs	r1, #8
 80035a6:	430a      	orrs	r2, r1
 80035a8:	621a      	str	r2, [r3, #32]
	/*if (READ_BIT(USART1->ISR, USART_ISR_IDLE)) {       //Если прилетел флаг IDLE
		SET_BIT(USART1->ICR, USART_ICR_IDLECF);              //Сбросим флаг IDLE
		husart1.rx_ok = 1;
		husart1.rx_counter = 0;              //сбросим счетчик приходящих данных
	}*/
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40013800 	.word	0x40013800
 80035b4:	20000070 	.word	0x20000070

080035b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	if (READ_BIT(USART2->ISR, USART_ISR_TXE)) {
 80035bc:	4b38      	ldr	r3, [pc, #224]	; (80036a0 <USART2_IRQHandler+0xe8>)
 80035be:	69db      	ldr	r3, [r3, #28]
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	4013      	ands	r3, r2
 80035c4:	d027      	beq.n	8003616 <USART2_IRQHandler+0x5e>
		if (husart2.tx_size > husart2.tx_counter) {
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <USART2_IRQHandler+0xec>)
 80035c8:	2242      	movs	r2, #66	; 0x42
 80035ca:	5c9a      	ldrb	r2, [r3, r2]
 80035cc:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <USART2_IRQHandler+0xec>)
 80035ce:	2140      	movs	r1, #64	; 0x40
 80035d0:	5c5b      	ldrb	r3, [r3, r1]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d911      	bls.n	80035fa <USART2_IRQHandler+0x42>
			USART2->TDR = husart2.tx_buffer[husart2.tx_counter];
 80035d6:	4b33      	ldr	r3, [pc, #204]	; (80036a4 <USART2_IRQHandler+0xec>)
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	5c9b      	ldrb	r3, [r3, r2]
 80035dc:	001a      	movs	r2, r3
 80035de:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <USART2_IRQHandler+0xec>)
 80035e0:	5c9a      	ldrb	r2, [r3, r2]
 80035e2:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <USART2_IRQHandler+0xe8>)
 80035e4:	b292      	uxth	r2, r2
 80035e6:	851a      	strh	r2, [r3, #40]	; 0x28
			husart2.tx_counter++;
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <USART2_IRQHandler+0xec>)
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	5c9b      	ldrb	r3, [r3, r2]
 80035ee:	3301      	adds	r3, #1
 80035f0:	b2d9      	uxtb	r1, r3
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <USART2_IRQHandler+0xec>)
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	5499      	strb	r1, [r3, r2]
 80035f8:	e00d      	b.n	8003616 <USART2_IRQHandler+0x5e>
		} else {
			USART2->CR1 &= ~USART_CR1_TXEIE;      // сбросим прерывание
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <USART2_IRQHandler+0xe8>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	4b28      	ldr	r3, [pc, #160]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	438a      	bics	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
			husart2.tx_counter = 0;
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]
			husart2.tx_size = 0;
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003610:	2242      	movs	r2, #66	; 0x42
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]
		}
	}
	if (READ_BIT(USART2->ISR, USART_ISR_RXNE)) {   //Если пришли данные по USART
 8003616:	4b22      	ldr	r3, [pc, #136]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2220      	movs	r2, #32
 800361c:	4013      	ands	r3, r2
 800361e:	d01e      	beq.n	800365e <USART2_IRQHandler+0xa6>
		husart2.rx_buffer[husart2.rx_counter] = USART2->RDR; //Считаем данные в соответствующую ячейку в rx_buffer
 8003620:	4b1f      	ldr	r3, [pc, #124]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003622:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003624:	b299      	uxth	r1, r3
 8003626:	4b1f      	ldr	r3, [pc, #124]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003628:	2241      	movs	r2, #65	; 0x41
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	0018      	movs	r0, r3
 800362e:	b2c9      	uxtb	r1, r1
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003632:	2220      	movs	r2, #32
 8003634:	181b      	adds	r3, r3, r0
 8003636:	189b      	adds	r3, r3, r2
 8003638:	1c0a      	adds	r2, r1, #0
 800363a:	701a      	strb	r2, [r3, #0]
		husart2.rx_counter++;              //Увеличим счетчик принятых байт на 1
 800363c:	4b19      	ldr	r3, [pc, #100]	; (80036a4 <USART2_IRQHandler+0xec>)
 800363e:	2241      	movs	r2, #65	; 0x41
 8003640:	5c9b      	ldrb	r3, [r3, r2]
 8003642:	3301      	adds	r3, #1
 8003644:	b2d9      	uxtb	r1, r3
 8003646:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003648:	2241      	movs	r2, #65	; 0x41
 800364a:	5499      	strb	r1, [r3, r2]
		if (husart2.rx_counter > 31)
 800364c:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <USART2_IRQHandler+0xec>)
 800364e:	2241      	movs	r2, #65	; 0x41
 8003650:	5c9b      	ldrb	r3, [r3, r2]
 8003652:	2b1f      	cmp	r3, #31
 8003654:	d903      	bls.n	800365e <USART2_IRQHandler+0xa6>
			husart2.rx_counter = 0;
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003658:	2241      	movs	r2, #65	; 0x41
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]
	}
	if (READ_BIT(USART2->ISR, USART_ISR_IDLE)) {       //Если прилетел флаг IDLE
 800365e:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	2210      	movs	r2, #16
 8003664:	4013      	ands	r3, r2
 8003666:	d00d      	beq.n	8003684 <USART2_IRQHandler+0xcc>
		SET_BIT(USART2->ICR, USART_ICR_IDLECF);              //Сбросим флаг IDLE
 8003668:	4b0d      	ldr	r3, [pc, #52]	; (80036a0 <USART2_IRQHandler+0xe8>)
 800366a:	6a1a      	ldr	r2, [r3, #32]
 800366c:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <USART2_IRQHandler+0xe8>)
 800366e:	2110      	movs	r1, #16
 8003670:	430a      	orrs	r2, r1
 8003672:	621a      	str	r2, [r3, #32]
		husart2.rx_ok = 1;
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <USART2_IRQHandler+0xec>)
 8003676:	2243      	movs	r2, #67	; 0x43
 8003678:	2101      	movs	r1, #1
 800367a:	5499      	strb	r1, [r3, r2]
		husart2.rx_counter = 0;              //сбросим счетчик приходящих данных
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <USART2_IRQHandler+0xec>)
 800367e:	2241      	movs	r2, #65	; 0x41
 8003680:	2100      	movs	r1, #0
 8003682:	5499      	strb	r1, [r3, r2]
	}
	if (READ_BIT(USART2->ISR, USART_ISR_ORE)) {       //Если прилетел флаг OVRN
 8003684:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	2208      	movs	r2, #8
 800368a:	4013      	ands	r3, r2
 800368c:	d005      	beq.n	800369a <USART2_IRQHandler+0xe2>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);              //Сбросим флаг OVRN
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003690:	6a1a      	ldr	r2, [r3, #32]
 8003692:	4b03      	ldr	r3, [pc, #12]	; (80036a0 <USART2_IRQHandler+0xe8>)
 8003694:	2108      	movs	r1, #8
 8003696:	430a      	orrs	r2, r1
 8003698:	621a      	str	r2, [r3, #32]
	}
}
 800369a:	46c0      	nop			; (mov r8, r8)
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40004400 	.word	0x40004400
 80036a4:	20000090 	.word	0x20000090

080036a8 <main>:
uint8_t pid_param = 40;

volatile uint32_t count = 0;
uint8_t flg = 0;

int main(void) {
 80036a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af04      	add	r7, sp, #16
	init_rcc();                              // 48Мгц
 80036ae:	f7fe fadd 	bl	8001c6c <init_rcc>
	CMSIS_SysTick_Timer_init();              // систик
 80036b2:	f7fe fb79 	bl	8001da8 <CMSIS_SysTick_Timer_init>
	init_pins();                             // пины
 80036b6:	f7fe fd2b 	bl	8002110 <init_pins>
	init_tim17(3, 10000);                    // настройка таймера делитель + счетчик
 80036ba:	4b5e      	ldr	r3, [pc, #376]	; (8003834 <main+0x18c>)
 80036bc:	0019      	movs	r1, r3
 80036be:	2003      	movs	r0, #3
 80036c0:	f7fe fcb8 	bl	8002034 <init_tim17>
	init_tim16(3, 10000);                    // настройка таймера делитель + счетчик
 80036c4:	4b5b      	ldr	r3, [pc, #364]	; (8003834 <main+0x18c>)
 80036c6:	0019      	movs	r1, r3
 80036c8:	2003      	movs	r0, #3
 80036ca:	f7fe fced 	bl	80020a8 <init_tim16>
	init_Uart1 (115200);                     // юарт ТМС
 80036ce:	23e1      	movs	r3, #225	; 0xe1
 80036d0:	025b      	lsls	r3, r3, #9
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7ff fabe 	bl	8002c54 <init_Uart1>
	ADC_init();                              // АЦП + ДМА
 80036d8:	f7fe f95c 	bl	8001994 <ADC_init>
	EN_ON;                                   // включить разрешить работу драйверов
 80036dc:	4b56      	ldr	r3, [pc, #344]	; (8003838 <main+0x190>)
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	4b55      	ldr	r3, [pc, #340]	; (8003838 <main+0x190>)
 80036e2:	2102      	movs	r1, #2
 80036e4:	430a      	orrs	r2, r1
 80036e6:	619a      	str	r2, [r3, #24]
#ifndef DEBUG_MODE
    Delay_ms(4000);                          // это чтоб можно было ножки программирования схватить
 80036e8:	23fa      	movs	r3, #250	; 0xfa
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fe fc43 	bl	8001f78 <Delay_ms>
    init_debug_pin ();                       // настроить пины программирования на выход
 80036f2:	f7fe fd47 	bl	8002184 <init_debug_pin>
#endif
    Delay_ms(300);
 80036f6:	2396      	movs	r3, #150	; 0x96
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fe fc3c 	bl	8001f78 <Delay_ms>
    setting_TMC230();                        // отправим настройки ТМС
 8003700:	f7ff fc0e 	bl	8002f20 <setting_TMC230>
    init_struct();                           // инициализация данных в структуре, чтоб правильно шагать
 8003704:	f7ff f962 	bl	80029cc <init_struct>
    stepper (9000, 0);                       // улетим в крайнюю точку чтоб от нее искать 0
 8003708:	4b4c      	ldr	r3, [pc, #304]	; (800383c <main+0x194>)
 800370a:	2100      	movs	r1, #0
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff f8a7 	bl	8002860 <stepper>
    stepper (9000, 1);                       // улетим в крайнюю точку чтоб от нее искать 0
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <main+0x194>)
 8003714:	2101      	movs	r1, #1
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff f8a2 	bl	8002860 <stepper>
    Delay_ms(4000);
 800371c:	23fa      	movs	r3, #250	; 0xfa
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	0018      	movs	r0, r3
 8003722:	f7fe fc29 	bl	8001f78 <Delay_ms>
    search_steps ();                         // поиск от крайней точки до отключения концевика
 8003726:	f7ff f9cf 	bl	8002ac8 <search_steps>
    Delay_ms(6000);
 800372a:	4b45      	ldr	r3, [pc, #276]	; (8003840 <main+0x198>)
 800372c:	0018      	movs	r0, r3
 800372e:	f7fe fc23 	bl	8001f78 <Delay_ms>
    stepper (-5000, 0);                      // улетим в крайнюю точку чтоб от нее искать 0
 8003732:	4b44      	ldr	r3, [pc, #272]	; (8003844 <main+0x19c>)
 8003734:	2100      	movs	r1, #0
 8003736:	0018      	movs	r0, r3
 8003738:	f7ff f892 	bl	8002860 <stepper>
    stepper (-5000, 1);                      // улетим в крайнюю точку чтоб от нее искать 0
 800373c:	4b41      	ldr	r3, [pc, #260]	; (8003844 <main+0x19c>)
 800373e:	2101      	movs	r1, #1
 8003740:	0018      	movs	r0, r3
 8003742:	f7ff f88d 	bl	8002860 <stepper>
    Delay_ms(4000);                          // ждем пока едет
 8003746:	23fa      	movs	r3, #250	; 0xfa
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	0018      	movs	r0, r3
 800374c:	f7fe fc14 	bl	8001f78 <Delay_ms>
    zero_position();                         // ищем ноль
 8003750:	f7ff f97e 	bl	8002a50 <zero_position>
    Delay_ms(4000);                          // ждем, это для того чтоб с той же скоростью искало 0
 8003754:	23fa      	movs	r3, #250	; 0xfa
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	0018      	movs	r0, r3
 800375a:	f7fe fc0d 	bl	8001f78 <Delay_ms>
    init_flash_data() ;                      // запишем все переменные из флеша в используемые ячейки (скорость, шаг)
 800375e:	f7fe f9dd 	bl	8001b1c <init_flash_data>
    init_tim3 ();                            // инит таймера 3 для шима
 8003762:	f7fe fc1d 	bl	8001fa0 <init_tim3>
	husart1.rx_counter = 0;                  // сбросим счетчик чтоб точно началось с 0 байта запись
 8003766:	4b38      	ldr	r3, [pc, #224]	; (8003848 <main+0x1a0>)
 8003768:	2200      	movs	r2, #0
 800376a:	769a      	strb	r2, [r3, #26]
	read_TMC2300 (0, 0x6A);                  // чтоб понять в каком положении был двигатель и инициализировать его
 800376c:	216a      	movs	r1, #106	; 0x6a
 800376e:	2000      	movs	r0, #0
 8003770:	f7ff fbb2 	bl	8002ed8 <read_TMC2300>
    Delay_ms(4);
 8003774:	2004      	movs	r0, #4
 8003776:	f7fe fbff 	bl	8001f78 <Delay_ms>
    check_iris (husart1.rx_buffer[9]);       // проверить в какой позиции сейчас шторка
 800377a:	4b33      	ldr	r3, [pc, #204]	; (8003848 <main+0x1a0>)
 800377c:	7cdb      	ldrb	r3, [r3, #19]
 800377e:	0018      	movs	r0, r3
 8003780:	f000 f8f0 	bl	8003964 <check_iris>
    init_wdt ();                             // инициализация вач дога
 8003784:	f7fe fae0 	bl	8001d48 <init_wdt>
    init_Uart2 (57600);                      // юарт Малинка
 8003788:	23e1      	movs	r3, #225	; 0xe1
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	0018      	movs	r0, r3
 800378e:	f7ff fab7 	bl	8002d00 <init_Uart2>

   //const uint16_t  FLASH_SIZE = (*((uint16_t*)FLASHSIZE_BASE)) << 10;   // размер памяти узнать

	for(;;){
		iwdt_reset();                          // сбросить ватч дог
 8003792:	f7fe fafd 	bl	8001d90 <iwdt_reset>
		/*if (point_flags->dma_ok){            // если сработало ДМА то можно фильтровать значения
			point_flags->dma_ok = FALSE;
			filtr_adc ();
		}*/
		if (!point_flags->zero_in_programm) parsing_data();    // обработать данные с юарта только когда не обнуляемся
 8003796:	4b2d      	ldr	r3, [pc, #180]	; (800384c <main+0x1a4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	2202      	movs	r2, #2
 800379e:	4013      	ands	r3, r2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <main+0x102>
 80037a6:	f7ff fbe9 	bl	8002f7c <parsing_data>
		if (point_flags->reset_setting) {                      // вернуть в исходное положение настройки скорости и шага после обнуления
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <main+0x1a4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	789b      	ldrb	r3, [r3, #2]
 80037b0:	2204      	movs	r2, #4
 80037b2:	4013      	ands	r3, r2
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <main+0x122>
			point_flags->reset_setting = FALSE;
 80037ba:	4b24      	ldr	r3, [pc, #144]	; (800384c <main+0x1a4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	789a      	ldrb	r2, [r3, #2]
 80037c0:	2104      	movs	r1, #4
 80037c2:	438a      	bics	r2, r1
 80037c4:	709a      	strb	r2, [r3, #2]
			init_flash_data ();                                // вернуть настройку скорости
 80037c6:	f7fe f9a9 	bl	8001b1c <init_flash_data>
		}
		if (point_flags->pid_ok) {                             // если сработал флаг ПИД
 80037ca:	4b20      	ldr	r3, [pc, #128]	; (800384c <main+0x1a4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	789b      	ldrb	r3, [r3, #2]
 80037d0:	2210      	movs	r2, #16
 80037d2:	4013      	ands	r3, r2
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d029      	beq.n	800382e <main+0x186>
			point_flags->pid_ok = FALSE;
 80037da:	4b1c      	ldr	r3, [pc, #112]	; (800384c <main+0x1a4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	789a      	ldrb	r2, [r3, #2]
 80037e0:	2110      	movs	r1, #16
 80037e2:	438a      	bics	r2, r1
 80037e4:	709a      	strb	r2, [r3, #2]
			TIM3->CCR1 = computePID (adc_buf[1], open, kp, ki, kd, 0.02, min, max);
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <main+0x1a8>)
 80037e8:	885b      	ldrh	r3, [r3, #2]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f7fe f872 	bl	80018d4 <__aeabi_ui2f>
 80037f0:	1c06      	adds	r6, r0, #0
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <main+0x1ac>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fe f81e 	bl	8001838 <__aeabi_i2f>
 80037fc:	4684      	mov	ip, r0
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <main+0x1b0>)
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	4b16      	ldr	r3, [pc, #88]	; (800385c <main+0x1b4>)
 8003804:	681d      	ldr	r5, [r3, #0]
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <main+0x1b8>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <main+0x1bc>)
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <main+0x1c0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4c16      	ldr	r4, [pc, #88]	; (800386c <main+0x1c4>)
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	9102      	str	r1, [sp, #8]
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <main+0x1c8>)
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	9200      	str	r2, [sp, #0]
 800381e:	1c2b      	adds	r3, r5, #0
 8003820:	1c02      	adds	r2, r0, #0
 8003822:	4661      	mov	r1, ip
 8003824:	1c30      	adds	r0, r6, #0
 8003826:	f000 f90b 	bl	8003a40 <computePID>
 800382a:	0003      	movs	r3, r0
 800382c:	6363      	str	r3, [r4, #52]	; 0x34
		}
		check_mov ();
 800382e:	f000 f821 	bl	8003874 <check_mov>
		iwdt_reset();                          // сбросить ватч дог
 8003832:	e7ae      	b.n	8003792 <main+0xea>
 8003834:	00002710 	.word	0x00002710
 8003838:	48000400 	.word	0x48000400
 800383c:	00002328 	.word	0x00002328
 8003840:	00001770 	.word	0x00001770
 8003844:	ffffec78 	.word	0xffffec78
 8003848:	20000070 	.word	0x20000070
 800384c:	20000000 	.word	0x20000000
 8003850:	2000003c 	.word	0x2000003c
 8003854:	20000010 	.word	0x20000010
 8003858:	20000004 	.word	0x20000004
 800385c:	20000008 	.word	0x20000008
 8003860:	2000000c 	.word	0x2000000c
 8003864:	20000014 	.word	0x20000014
 8003868:	20000018 	.word	0x20000018
 800386c:	40000400 	.word	0x40000400
 8003870:	3ca3d70a 	.word	0x3ca3d70a

08003874 <check_mov>:
	}
}

static inline void check_mov (void) {           // проверим есть у нас движение или нет
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
	if (point_flags->change_pin_conf == 0) {
 8003878:	4b37      	ldr	r3, [pc, #220]	; (8003958 <check_mov+0xe4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	789b      	ldrb	r3, [r3, #2]
 800387e:	2240      	movs	r2, #64	; 0x40
 8003880:	4013      	ands	r3, r2
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d131      	bne.n	80038ec <check_mov+0x78>
		if (stepp_1.curent_steps != stepp_1.last_steps && stepp_2.curent_steps != stepp_2.last_steps) {
 8003888:	4b34      	ldr	r3, [pc, #208]	; (800395c <check_mov+0xe8>)
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	4b33      	ldr	r3, [pc, #204]	; (800395c <check_mov+0xe8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d018      	beq.n	80038c6 <check_mov+0x52>
 8003894:	4b32      	ldr	r3, [pc, #200]	; (8003960 <check_mov+0xec>)
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4b31      	ldr	r3, [pc, #196]	; (8003960 <check_mov+0xec>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d012      	beq.n	80038c6 <check_mov+0x52>
			MOTOR_MOV_ON;                           // вывод на малинку
 80038a0:	2390      	movs	r3, #144	; 0x90
 80038a2:	05db      	lsls	r3, r3, #23
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	2390      	movs	r3, #144	; 0x90
 80038a8:	05db      	lsls	r3, r3, #23
 80038aa:	2180      	movs	r1, #128	; 0x80
 80038ac:	0189      	lsls	r1, r1, #6
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
			MOTOR_STP_OFF;
 80038b2:	2390      	movs	r3, #144	; 0x90
 80038b4:	05db      	lsls	r3, r3, #23
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	2390      	movs	r3, #144	; 0x90
 80038ba:	05db      	lsls	r3, r3, #23
 80038bc:	2180      	movs	r1, #128	; 0x80
 80038be:	05c9      	lsls	r1, r1, #23
 80038c0:	430a      	orrs	r2, r1
 80038c2:	619a      	str	r2, [r3, #24]
		if (stepp_1.curent_steps != stepp_1.last_steps) MOTOR_MOV_ON;
				else MOTOR_MOV_OFF;
		if (stepp_2.curent_steps != stepp_2.last_steps) MOTOR_STP_ON;
				else MOTOR_STP_OFF;
	}
}
 80038c4:	e044      	b.n	8003950 <check_mov+0xdc>
			MOTOR_MOV_OFF;
 80038c6:	2390      	movs	r3, #144	; 0x90
 80038c8:	05db      	lsls	r3, r3, #23
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	2390      	movs	r3, #144	; 0x90
 80038ce:	05db      	lsls	r3, r3, #23
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0589      	lsls	r1, r1, #22
 80038d4:	430a      	orrs	r2, r1
 80038d6:	619a      	str	r2, [r3, #24]
			MOTOR_STP_ON;                           // вывод на малинку
 80038d8:	2390      	movs	r3, #144	; 0x90
 80038da:	05db      	lsls	r3, r3, #23
 80038dc:	699a      	ldr	r2, [r3, #24]
 80038de:	2390      	movs	r3, #144	; 0x90
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	01c9      	lsls	r1, r1, #7
 80038e6:	430a      	orrs	r2, r1
 80038e8:	619a      	str	r2, [r3, #24]
}
 80038ea:	e031      	b.n	8003950 <check_mov+0xdc>
		if (stepp_1.curent_steps != stepp_1.last_steps) MOTOR_MOV_ON;
 80038ec:	4b1b      	ldr	r3, [pc, #108]	; (800395c <check_mov+0xe8>)
 80038ee:	685a      	ldr	r2, [r3, #4]
 80038f0:	4b1a      	ldr	r3, [pc, #104]	; (800395c <check_mov+0xe8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d009      	beq.n	800390c <check_mov+0x98>
 80038f8:	2390      	movs	r3, #144	; 0x90
 80038fa:	05db      	lsls	r3, r3, #23
 80038fc:	699a      	ldr	r2, [r3, #24]
 80038fe:	2390      	movs	r3, #144	; 0x90
 8003900:	05db      	lsls	r3, r3, #23
 8003902:	2180      	movs	r1, #128	; 0x80
 8003904:	0189      	lsls	r1, r1, #6
 8003906:	430a      	orrs	r2, r1
 8003908:	619a      	str	r2, [r3, #24]
 800390a:	e008      	b.n	800391e <check_mov+0xaa>
				else MOTOR_MOV_OFF;
 800390c:	2390      	movs	r3, #144	; 0x90
 800390e:	05db      	lsls	r3, r3, #23
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	2390      	movs	r3, #144	; 0x90
 8003914:	05db      	lsls	r3, r3, #23
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	0589      	lsls	r1, r1, #22
 800391a:	430a      	orrs	r2, r1
 800391c:	619a      	str	r2, [r3, #24]
		if (stepp_2.curent_steps != stepp_2.last_steps) MOTOR_STP_ON;
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <check_mov+0xec>)
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <check_mov+0xec>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d009      	beq.n	800393e <check_mov+0xca>
 800392a:	2390      	movs	r3, #144	; 0x90
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	2390      	movs	r3, #144	; 0x90
 8003932:	05db      	lsls	r3, r3, #23
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	01c9      	lsls	r1, r1, #7
 8003938:	430a      	orrs	r2, r1
 800393a:	619a      	str	r2, [r3, #24]
}
 800393c:	e008      	b.n	8003950 <check_mov+0xdc>
				else MOTOR_STP_OFF;
 800393e:	2390      	movs	r3, #144	; 0x90
 8003940:	05db      	lsls	r3, r3, #23
 8003942:	699a      	ldr	r2, [r3, #24]
 8003944:	2390      	movs	r3, #144	; 0x90
 8003946:	05db      	lsls	r3, r3, #23
 8003948:	2180      	movs	r1, #128	; 0x80
 800394a:	05c9      	lsls	r1, r1, #23
 800394c:	430a      	orrs	r2, r1
 800394e:	619a      	str	r2, [r3, #24]
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	20000000 	.word	0x20000000
 800395c:	2000004c 	.word	0x2000004c
 8003960:	2000005c 	.word	0x2000005c

08003964 <check_iris>:

static inline void check_iris (uint8_t poz) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	0002      	movs	r2, r0
 800396c:	1dfb      	adds	r3, r7, #7
 800396e:	701a      	strb	r2, [r3, #0]
	switch (poz) {
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d03e      	beq.n	80039f6 <check_iris+0x92>
 8003978:	dc3e      	bgt.n	80039f8 <check_iris+0x94>
 800397a:	2b02      	cmp	r3, #2
 800397c:	d029      	beq.n	80039d2 <check_iris+0x6e>
 800397e:	dc3b      	bgt.n	80039f8 <check_iris+0x94>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <check_iris+0x26>
 8003984:	2b01      	cmp	r3, #1
 8003986:	d012      	beq.n	80039ae <check_iris+0x4a>
    	point_flags->delay = 2;
		break;
	case 3:
		break;
	}
}
 8003988:	e036      	b.n	80039f8 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 800398a:	2390      	movs	r3, #144	; 0x90
 800398c:	05db      	lsls	r3, r3, #23
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	2390      	movs	r3, #144	; 0x90
 8003992:	05db      	lsls	r3, r3, #23
 8003994:	2180      	movs	r1, #128	; 0x80
 8003996:	430a      	orrs	r2, r1
 8003998:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 6;
 800399a:	4b19      	ldr	r3, [pc, #100]	; (8003a00 <check_iris+0x9c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4918      	ldr	r1, [pc, #96]	; (8003a04 <check_iris+0xa0>)
 80039a2:	400a      	ands	r2, r1
 80039a4:	21c0      	movs	r1, #192	; 0xc0
 80039a6:	0209      	lsls	r1, r1, #8
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
		break;
 80039ac:	e024      	b.n	80039f8 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 80039ae:	2390      	movs	r3, #144	; 0x90
 80039b0:	05db      	lsls	r3, r3, #23
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	2390      	movs	r3, #144	; 0x90
 80039b6:	05db      	lsls	r3, r3, #23
 80039b8:	2180      	movs	r1, #128	; 0x80
 80039ba:	430a      	orrs	r2, r1
 80039bc:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 4;
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <check_iris+0x9c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	490f      	ldr	r1, [pc, #60]	; (8003a04 <check_iris+0xa0>)
 80039c6:	400a      	ands	r2, r1
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	0209      	lsls	r1, r1, #8
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
		break;
 80039d0:	e012      	b.n	80039f8 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 80039d2:	2390      	movs	r3, #144	; 0x90
 80039d4:	05db      	lsls	r3, r3, #23
 80039d6:	699a      	ldr	r2, [r3, #24]
 80039d8:	2390      	movs	r3, #144	; 0x90
 80039da:	05db      	lsls	r3, r3, #23
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	430a      	orrs	r2, r1
 80039e0:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 2;
 80039e2:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <check_iris+0x9c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4906      	ldr	r1, [pc, #24]	; (8003a04 <check_iris+0xa0>)
 80039ea:	400a      	ands	r2, r1
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	01c9      	lsls	r1, r1, #7
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
		break;
 80039f4:	e000      	b.n	80039f8 <check_iris+0x94>
		break;
 80039f6:	46c0      	nop			; (mov r8, r8)
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000000 	.word	0x20000000
 8003a04:	fffe1fff 	.word	0xfffe1fff

08003a08 <constrain>:

float constrain(float x, float a, float b) {
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
    if(x < a) {
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7fd f874 	bl	8000b04 <__aeabi_fcmplt>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d001      	beq.n	8003a24 <constrain+0x1c>
        return a;
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	e008      	b.n	8003a36 <constrain+0x2e>
    }
    else if(b < x) {
 8003a24:	68f9      	ldr	r1, [r7, #12]
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7fd f86c 	bl	8000b04 <__aeabi_fcmplt>
 8003a2c:	1e03      	subs	r3, r0, #0
 8003a2e:	d001      	beq.n	8003a34 <constrain+0x2c>
        return b;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	e000      	b.n	8003a36 <constrain+0x2e>
    }
    else
        return x;
 8003a34:	68fb      	ldr	r3, [r7, #12]
}
 8003a36:	1c18      	adds	r0, r3, #0
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b004      	add	sp, #16
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <computePID>:

// (вход, установка, п, и, д, период в секундах, мин.выход, макс. выход)
uint32_t computePID(float input, float setpoint, float kp, float ki, float kd, float dt, int minOut, int maxOut) {
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  float err = (setpoint- ks) - input  ;
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <computePID+0x11c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fd fef0 	bl	8001838 <__aeabi_i2f>
 8003a58:	1c03      	adds	r3, r0, #0
 8003a5a:	1c19      	adds	r1, r3, #0
 8003a5c:	68b8      	ldr	r0, [r7, #8]
 8003a5e:	f7fd fd1d 	bl	800149c <__aeabi_fsub>
 8003a62:	1c03      	adds	r3, r0, #0
 8003a64:	68f9      	ldr	r1, [r7, #12]
 8003a66:	1c18      	adds	r0, r3, #0
 8003a68:	f7fd fd18 	bl	800149c <__aeabi_fsub>
 8003a6c:	1c03      	adds	r3, r0, #0
 8003a6e:	617b      	str	r3, [r7, #20]
  if (ks > 0) ks -= 15;                                           // для замедления реакции
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <computePID+0x11c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	dd05      	ble.n	8003a84 <computePID+0x44>
 8003a78:	4b38      	ldr	r3, [pc, #224]	; (8003b5c <computePID+0x11c>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3b0f      	subs	r3, #15
 8003a7e:	001a      	movs	r2, r3
 8003a80:	4b36      	ldr	r3, [pc, #216]	; (8003b5c <computePID+0x11c>)
 8003a82:	601a      	str	r2, [r3, #0]
  if (ks < 0) ks += 15;
 8003a84:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <computePID+0x11c>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	da05      	bge.n	8003a98 <computePID+0x58>
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <computePID+0x11c>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330f      	adds	r3, #15
 8003a92:	001a      	movs	r2, r3
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <computePID+0x11c>)
 8003a96:	601a      	str	r2, [r3, #0]
  static float integral = 0, prevErr = 0;
  integral = constrain(integral + err * dt * ki, minOut, maxOut);  // ???? ki
 8003a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a9a:	6978      	ldr	r0, [r7, #20]
 8003a9c:	f7fd fbd8 	bl	8001250 <__aeabi_fmul>
 8003aa0:	1c03      	adds	r3, r0, #0
 8003aa2:	6839      	ldr	r1, [r7, #0]
 8003aa4:	1c18      	adds	r0, r3, #0
 8003aa6:	f7fd fbd3 	bl	8001250 <__aeabi_fmul>
 8003aaa:	1c03      	adds	r3, r0, #0
 8003aac:	1c1a      	adds	r2, r3, #0
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <computePID+0x120>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	1c19      	adds	r1, r3, #0
 8003ab4:	1c10      	adds	r0, r2, #0
 8003ab6:	f7fd f865 	bl	8000b84 <__aeabi_fadd>
 8003aba:	1c03      	adds	r3, r0, #0
 8003abc:	1c1d      	adds	r5, r3, #0
 8003abe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ac0:	f7fd feba 	bl	8001838 <__aeabi_i2f>
 8003ac4:	1c04      	adds	r4, r0, #0
 8003ac6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003ac8:	f7fd feb6 	bl	8001838 <__aeabi_i2f>
 8003acc:	1c03      	adds	r3, r0, #0
 8003ace:	1c1a      	adds	r2, r3, #0
 8003ad0:	1c21      	adds	r1, r4, #0
 8003ad2:	1c28      	adds	r0, r5, #0
 8003ad4:	f7ff ff98 	bl	8003a08 <constrain>
 8003ad8:	1c02      	adds	r2, r0, #0
 8003ada:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <computePID+0x120>)
 8003adc:	601a      	str	r2, [r3, #0]
  float D = (err - prevErr) / dt;
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <computePID+0x124>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1c19      	adds	r1, r3, #0
 8003ae4:	6978      	ldr	r0, [r7, #20]
 8003ae6:	f7fd fcd9 	bl	800149c <__aeabi_fsub>
 8003aea:	1c03      	adds	r3, r0, #0
 8003aec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aee:	1c18      	adds	r0, r3, #0
 8003af0:	f7fd f9e6 	bl	8000ec0 <__aeabi_fdiv>
 8003af4:	1c03      	adds	r3, r0, #0
 8003af6:	613b      	str	r3, [r7, #16]
  prevErr = err;
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <computePID+0x124>)
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	601a      	str	r2, [r3, #0]
  return constrain(err * kp + integral + D * kd, minOut, maxOut);
 8003afe:	6879      	ldr	r1, [r7, #4]
 8003b00:	6978      	ldr	r0, [r7, #20]
 8003b02:	f7fd fba5 	bl	8001250 <__aeabi_fmul>
 8003b06:	1c03      	adds	r3, r0, #0
 8003b08:	1c1a      	adds	r2, r3, #0
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <computePID+0x120>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1c19      	adds	r1, r3, #0
 8003b10:	1c10      	adds	r0, r2, #0
 8003b12:	f7fd f837 	bl	8000b84 <__aeabi_fadd>
 8003b16:	1c03      	adds	r3, r0, #0
 8003b18:	1c1c      	adds	r4, r3, #0
 8003b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b1c:	6938      	ldr	r0, [r7, #16]
 8003b1e:	f7fd fb97 	bl	8001250 <__aeabi_fmul>
 8003b22:	1c03      	adds	r3, r0, #0
 8003b24:	1c19      	adds	r1, r3, #0
 8003b26:	1c20      	adds	r0, r4, #0
 8003b28:	f7fd f82c 	bl	8000b84 <__aeabi_fadd>
 8003b2c:	1c03      	adds	r3, r0, #0
 8003b2e:	1c1d      	adds	r5, r3, #0
 8003b30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b32:	f7fd fe81 	bl	8001838 <__aeabi_i2f>
 8003b36:	1c04      	adds	r4, r0, #0
 8003b38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003b3a:	f7fd fe7d 	bl	8001838 <__aeabi_i2f>
 8003b3e:	1c03      	adds	r3, r0, #0
 8003b40:	1c1a      	adds	r2, r3, #0
 8003b42:	1c21      	adds	r1, r4, #0
 8003b44:	1c28      	adds	r0, r5, #0
 8003b46:	f7ff ff5f 	bl	8003a08 <constrain>
 8003b4a:	1c03      	adds	r3, r0, #0
 8003b4c:	1c18      	adds	r0, r3, #0
 8003b4e:	f7fd f801 	bl	8000b54 <__aeabi_f2uiz>
 8003b52:	0003      	movs	r3, r0
}
 8003b54:	0018      	movs	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b006      	add	sp, #24
 8003b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5c:	200000e0 	.word	0x200000e0
 8003b60:	200000e4 	.word	0x200000e4
 8003b64:	200000e8 	.word	0x200000e8

08003b68 <set_pid>:

uint32_t set_pid (uint32_t new_pid) {
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
	if (new_pid < 0 || new_pid > 100) return 0;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <set_pid+0x12>
 8003b76:	2300      	movs	r3, #0
 8003b78:	e021      	b.n	8003bbe <set_pid+0x56>
	pid_param = new_pid;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <set_pid+0x60>)
 8003b80:	701a      	strb	r2, [r3, #0]
	uint16_t mirror = 0;
 8003b82:	240e      	movs	r4, #14
 8003b84:	193b      	adds	r3, r7, r4
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]

	if (mirror < open) {
		if (mirror < open ){ ks = mirror - open; } // ks = ks /2;
		open = mirror;
	}*/
	mirror = map (new_pid, 0, 100, 450, 4000);   // вот тут зависит от АЦП 600 - 3000 олд
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	23e1      	movs	r3, #225	; 0xe1
 8003b8e:	005a      	lsls	r2, r3, #1
 8003b90:	23fa      	movs	r3, #250	; 0xfa
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	0013      	movs	r3, r2
 8003b98:	2264      	movs	r2, #100	; 0x64
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	f7fd ff68 	bl	8001a70 <map>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	193b      	adds	r3, r7, r4
 8003ba4:	801a      	strh	r2, [r3, #0]
	ks = mirror - open;
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	881a      	ldrh	r2, [r3, #0]
 8003baa:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <set_pid+0x64>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	4b07      	ldr	r3, [pc, #28]	; (8003bd0 <set_pid+0x68>)
 8003bb2:	601a      	str	r2, [r3, #0]
	open = mirror;
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	4b04      	ldr	r3, [pc, #16]	; (8003bcc <set_pid+0x64>)
 8003bba:	601a      	str	r2, [r3, #0]
	return new_pid;
 8003bbc:	687b      	ldr	r3, [r7, #4]
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b005      	add	sp, #20
 8003bc4:	bd90      	pop	{r4, r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	2000001c 	.word	0x2000001c
 8003bcc:	20000010 	.word	0x20000010
 8003bd0:	200000e0 	.word	0x200000e0

08003bd4 <setting_pin_rasbery>:

uint32_t setting_pin_rasbery (uint32_t sign) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
	if (sign == 0) {point_flags->change_pin_conf = 0; return 1;}
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <setting_pin_rasbery+0x1e>
 8003be2:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <setting_pin_rasbery+0x40>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	789a      	ldrb	r2, [r3, #2]
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	438a      	bics	r2, r1
 8003bec:	709a      	strb	r2, [r3, #2]
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00b      	b.n	8003c0a <setting_pin_rasbery+0x36>
	if (sign == 1) {point_flags->change_pin_conf = 1; return 1;}
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <setting_pin_rasbery+0x34>
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <setting_pin_rasbery+0x40>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	789a      	ldrb	r2, [r3, #2]
 8003bfe:	2140      	movs	r1, #64	; 0x40
 8003c00:	430a      	orrs	r2, r1
 8003c02:	709a      	strb	r2, [r3, #2]
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <setting_pin_rasbery+0x36>
	return 0;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000000 	.word	0x20000000

08003c18 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003c1c:	46c0      	nop			; (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003c24:	4813      	ldr	r0, [pc, #76]	; (8003c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c26:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8003c28:	4813      	ldr	r0, [pc, #76]	; (8003c78 <LoopForever+0x6>)
    LDR R1, [R0]
 8003c2a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003c2c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003c2e:	4a13      	ldr	r2, [pc, #76]	; (8003c7c <LoopForever+0xa>)
    CMP R1, R2
 8003c30:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003c32:	d105      	bne.n	8003c40 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003c34:	4812      	ldr	r0, [pc, #72]	; (8003c80 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003c36:	4913      	ldr	r1, [pc, #76]	; (8003c84 <LoopForever+0x12>)
    STR R1, [R0]
 8003c38:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003c3a:	4813      	ldr	r0, [pc, #76]	; (8003c88 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003c3c:	4913      	ldr	r1, [pc, #76]	; (8003c8c <LoopForever+0x1a>)
    STR R1, [R0]
 8003c3e:	6001      	str	r1, [r0, #0]

08003c40 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c40:	4813      	ldr	r0, [pc, #76]	; (8003c90 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003c42:	4914      	ldr	r1, [pc, #80]	; (8003c94 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003c44:	4a14      	ldr	r2, [pc, #80]	; (8003c98 <LoopForever+0x26>)
  movs r3, #0
 8003c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c48:	e002      	b.n	8003c50 <LoopCopyDataInit>

08003c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c4e:	3304      	adds	r3, #4

08003c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c54:	d3f9      	bcc.n	8003c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c56:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003c58:	4c11      	ldr	r4, [pc, #68]	; (8003ca0 <LoopForever+0x2e>)
  movs r3, #0
 8003c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c5c:	e001      	b.n	8003c62 <LoopFillZerobss>

08003c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c60:	3204      	adds	r2, #4

08003c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c64:	d3fb      	bcc.n	8003c5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c66:	f7ff ffd7 	bl	8003c18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003c6a:	f000 f81d 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003c6e:	f7ff fd1b 	bl	80036a8 <main>

08003c72 <LoopForever>:

LoopForever:
    b LoopForever
 8003c72:	e7fe      	b.n	8003c72 <LoopForever>
  ldr   r0, =_estack
 8003c74:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003c78:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003c7c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8003c80:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8003c84:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003c88:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003c8c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c94:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003c98:	08003e08 	.word	0x08003e08
  ldr r2, =_sbss
 8003c9c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003ca0:	200000ec 	.word	0x200000ec

08003ca4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ca4:	e7fe      	b.n	8003ca4 <ADC1_IRQHandler>
	...

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	2600      	movs	r6, #0
 8003cac:	4d0c      	ldr	r5, [pc, #48]	; (8003ce0 <__libc_init_array+0x38>)
 8003cae:	4c0d      	ldr	r4, [pc, #52]	; (8003ce4 <__libc_init_array+0x3c>)
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	f000 f819 	bl	8003cf0 <_init>
 8003cbe:	4d0a      	ldr	r5, [pc, #40]	; (8003ce8 <__libc_init_array+0x40>)
 8003cc0:	4c0a      	ldr	r4, [pc, #40]	; (8003cec <__libc_init_array+0x44>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	00b3      	lsls	r3, r6, #2
 8003cce:	58eb      	ldr	r3, [r5, r3]
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	00b3      	lsls	r3, r6, #2
 8003cd8:	58eb      	ldr	r3, [r5, r3]
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	08003e00 	.word	0x08003e00
 8003ce4:	08003e00 	.word	0x08003e00
 8003ce8:	08003e00 	.word	0x08003e00
 8003cec:	08003e04 	.word	0x08003e04

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
