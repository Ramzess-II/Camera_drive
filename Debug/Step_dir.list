
Step_dir.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003800  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b4  080039b4  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080039b4  080039b4  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039b4  080039b4  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080039bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000020  080039dc  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080039dc  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000030b1  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c90  00000000  00000000  000230f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002c0  00000000  00000000  00023d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000248  00000000  00000000  00024050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010bfc  00000000  00000000  00024298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002ffc  00000000  00000000  00034e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000563e5  00000000  00000000  00037e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008e275  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a40  00000000  00000000  0008e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038a8 	.word	0x080038a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	080038a8 	.word	0x080038a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fb6d 	bl	8000adc <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 faf9 	bl	8000a04 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fb5f 	bl	8000adc <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fb55 	bl	8000adc <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fb05 	bl	8000a50 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fafb 	bl	8000a50 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_f2uiz>:
 8000468:	219e      	movs	r1, #158	; 0x9e
 800046a:	b510      	push	{r4, lr}
 800046c:	05c9      	lsls	r1, r1, #23
 800046e:	1c04      	adds	r4, r0, #0
 8000470:	f7ff fff0 	bl	8000454 <__aeabi_fcmpge>
 8000474:	2800      	cmp	r0, #0
 8000476:	d103      	bne.n	8000480 <__aeabi_f2uiz+0x18>
 8000478:	1c20      	adds	r0, r4, #0
 800047a:	f000 fe47 	bl	800110c <__aeabi_f2iz>
 800047e:	bd10      	pop	{r4, pc}
 8000480:	219e      	movs	r1, #158	; 0x9e
 8000482:	1c20      	adds	r0, r4, #0
 8000484:	05c9      	lsls	r1, r1, #23
 8000486:	f000 fc93 	bl	8000db0 <__aeabi_fsub>
 800048a:	f000 fe3f 	bl	800110c <__aeabi_f2iz>
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	061b      	lsls	r3, r3, #24
 8000492:	469c      	mov	ip, r3
 8000494:	4460      	add	r0, ip
 8000496:	e7f2      	b.n	800047e <__aeabi_f2uiz+0x16>

08000498 <__aeabi_fadd>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	46c6      	mov	lr, r8
 800049c:	0243      	lsls	r3, r0, #9
 800049e:	0a5b      	lsrs	r3, r3, #9
 80004a0:	024e      	lsls	r6, r1, #9
 80004a2:	0045      	lsls	r5, r0, #1
 80004a4:	004f      	lsls	r7, r1, #1
 80004a6:	00da      	lsls	r2, r3, #3
 80004a8:	0fc4      	lsrs	r4, r0, #31
 80004aa:	469c      	mov	ip, r3
 80004ac:	0a70      	lsrs	r0, r6, #9
 80004ae:	4690      	mov	r8, r2
 80004b0:	b500      	push	{lr}
 80004b2:	0e2d      	lsrs	r5, r5, #24
 80004b4:	0e3f      	lsrs	r7, r7, #24
 80004b6:	0fc9      	lsrs	r1, r1, #31
 80004b8:	09b6      	lsrs	r6, r6, #6
 80004ba:	428c      	cmp	r4, r1
 80004bc:	d04b      	beq.n	8000556 <__aeabi_fadd+0xbe>
 80004be:	1bea      	subs	r2, r5, r7
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	dd36      	ble.n	8000532 <__aeabi_fadd+0x9a>
 80004c4:	2f00      	cmp	r7, #0
 80004c6:	d061      	beq.n	800058c <__aeabi_fadd+0xf4>
 80004c8:	2dff      	cmp	r5, #255	; 0xff
 80004ca:	d100      	bne.n	80004ce <__aeabi_fadd+0x36>
 80004cc:	e0ad      	b.n	800062a <__aeabi_fadd+0x192>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	04db      	lsls	r3, r3, #19
 80004d2:	431e      	orrs	r6, r3
 80004d4:	2a1b      	cmp	r2, #27
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fadd+0x42>
 80004d8:	e0d3      	b.n	8000682 <__aeabi_fadd+0x1ea>
 80004da:	2001      	movs	r0, #1
 80004dc:	4643      	mov	r3, r8
 80004de:	1a18      	subs	r0, r3, r0
 80004e0:	0143      	lsls	r3, r0, #5
 80004e2:	d400      	bmi.n	80004e6 <__aeabi_fadd+0x4e>
 80004e4:	e08c      	b.n	8000600 <__aeabi_fadd+0x168>
 80004e6:	0180      	lsls	r0, r0, #6
 80004e8:	0987      	lsrs	r7, r0, #6
 80004ea:	0038      	movs	r0, r7
 80004ec:	f000 febe 	bl	800126c <__clzsi2>
 80004f0:	3805      	subs	r0, #5
 80004f2:	4087      	lsls	r7, r0
 80004f4:	4285      	cmp	r5, r0
 80004f6:	dc00      	bgt.n	80004fa <__aeabi_fadd+0x62>
 80004f8:	e0b6      	b.n	8000668 <__aeabi_fadd+0x1d0>
 80004fa:	1a2d      	subs	r5, r5, r0
 80004fc:	48b3      	ldr	r0, [pc, #716]	; (80007cc <__aeabi_fadd+0x334>)
 80004fe:	4038      	ands	r0, r7
 8000500:	0743      	lsls	r3, r0, #29
 8000502:	d004      	beq.n	800050e <__aeabi_fadd+0x76>
 8000504:	230f      	movs	r3, #15
 8000506:	4003      	ands	r3, r0
 8000508:	2b04      	cmp	r3, #4
 800050a:	d000      	beq.n	800050e <__aeabi_fadd+0x76>
 800050c:	3004      	adds	r0, #4
 800050e:	0143      	lsls	r3, r0, #5
 8000510:	d400      	bmi.n	8000514 <__aeabi_fadd+0x7c>
 8000512:	e078      	b.n	8000606 <__aeabi_fadd+0x16e>
 8000514:	1c6a      	adds	r2, r5, #1
 8000516:	2dfe      	cmp	r5, #254	; 0xfe
 8000518:	d065      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 800051a:	0180      	lsls	r0, r0, #6
 800051c:	0a43      	lsrs	r3, r0, #9
 800051e:	469c      	mov	ip, r3
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	4663      	mov	r3, ip
 8000524:	05d0      	lsls	r0, r2, #23
 8000526:	4318      	orrs	r0, r3
 8000528:	07e4      	lsls	r4, r4, #31
 800052a:	4320      	orrs	r0, r4
 800052c:	bc80      	pop	{r7}
 800052e:	46b8      	mov	r8, r7
 8000530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000532:	2a00      	cmp	r2, #0
 8000534:	d035      	beq.n	80005a2 <__aeabi_fadd+0x10a>
 8000536:	1b7a      	subs	r2, r7, r5
 8000538:	2d00      	cmp	r5, #0
 800053a:	d000      	beq.n	800053e <__aeabi_fadd+0xa6>
 800053c:	e0af      	b.n	800069e <__aeabi_fadd+0x206>
 800053e:	4643      	mov	r3, r8
 8000540:	2b00      	cmp	r3, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0xae>
 8000544:	e0a7      	b.n	8000696 <__aeabi_fadd+0x1fe>
 8000546:	1e53      	subs	r3, r2, #1
 8000548:	2a01      	cmp	r2, #1
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0xb6>
 800054c:	e12f      	b.n	80007ae <__aeabi_fadd+0x316>
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d069      	beq.n	8000626 <__aeabi_fadd+0x18e>
 8000552:	001a      	movs	r2, r3
 8000554:	e0aa      	b.n	80006ac <__aeabi_fadd+0x214>
 8000556:	1be9      	subs	r1, r5, r7
 8000558:	2900      	cmp	r1, #0
 800055a:	dd70      	ble.n	800063e <__aeabi_fadd+0x1a6>
 800055c:	2f00      	cmp	r7, #0
 800055e:	d037      	beq.n	80005d0 <__aeabi_fadd+0x138>
 8000560:	2dff      	cmp	r5, #255	; 0xff
 8000562:	d062      	beq.n	800062a <__aeabi_fadd+0x192>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	04db      	lsls	r3, r3, #19
 8000568:	431e      	orrs	r6, r3
 800056a:	291b      	cmp	r1, #27
 800056c:	dc00      	bgt.n	8000570 <__aeabi_fadd+0xd8>
 800056e:	e0b0      	b.n	80006d2 <__aeabi_fadd+0x23a>
 8000570:	2001      	movs	r0, #1
 8000572:	4440      	add	r0, r8
 8000574:	0143      	lsls	r3, r0, #5
 8000576:	d543      	bpl.n	8000600 <__aeabi_fadd+0x168>
 8000578:	3501      	adds	r5, #1
 800057a:	2dff      	cmp	r5, #255	; 0xff
 800057c:	d033      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 800057e:	2301      	movs	r3, #1
 8000580:	4a93      	ldr	r2, [pc, #588]	; (80007d0 <__aeabi_fadd+0x338>)
 8000582:	4003      	ands	r3, r0
 8000584:	0840      	lsrs	r0, r0, #1
 8000586:	4010      	ands	r0, r2
 8000588:	4318      	orrs	r0, r3
 800058a:	e7b9      	b.n	8000500 <__aeabi_fadd+0x68>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0xfa>
 8000590:	e083      	b.n	800069a <__aeabi_fadd+0x202>
 8000592:	1e51      	subs	r1, r2, #1
 8000594:	2a01      	cmp	r2, #1
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x102>
 8000598:	e0d8      	b.n	800074c <__aeabi_fadd+0x2b4>
 800059a:	2aff      	cmp	r2, #255	; 0xff
 800059c:	d045      	beq.n	800062a <__aeabi_fadd+0x192>
 800059e:	000a      	movs	r2, r1
 80005a0:	e798      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005a2:	27fe      	movs	r7, #254	; 0xfe
 80005a4:	1c6a      	adds	r2, r5, #1
 80005a6:	4217      	tst	r7, r2
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x114>
 80005aa:	e086      	b.n	80006ba <__aeabi_fadd+0x222>
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d000      	beq.n	80005b2 <__aeabi_fadd+0x11a>
 80005b0:	e0b7      	b.n	8000722 <__aeabi_fadd+0x28a>
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x122>
 80005b8:	e0f3      	b.n	80007a2 <__aeabi_fadd+0x30a>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d0b0      	beq.n	8000522 <__aeabi_fadd+0x8a>
 80005c0:	1b98      	subs	r0, r3, r6
 80005c2:	0143      	lsls	r3, r0, #5
 80005c4:	d400      	bmi.n	80005c8 <__aeabi_fadd+0x130>
 80005c6:	e0fa      	b.n	80007be <__aeabi_fadd+0x326>
 80005c8:	4643      	mov	r3, r8
 80005ca:	000c      	movs	r4, r1
 80005cc:	1af0      	subs	r0, r6, r3
 80005ce:	e797      	b.n	8000500 <__aeabi_fadd+0x68>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x13e>
 80005d4:	e0c8      	b.n	8000768 <__aeabi_fadd+0x2d0>
 80005d6:	1e4a      	subs	r2, r1, #1
 80005d8:	2901      	cmp	r1, #1
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x146>
 80005dc:	e0ae      	b.n	800073c <__aeabi_fadd+0x2a4>
 80005de:	29ff      	cmp	r1, #255	; 0xff
 80005e0:	d023      	beq.n	800062a <__aeabi_fadd+0x192>
 80005e2:	0011      	movs	r1, r2
 80005e4:	e7c1      	b.n	800056a <__aeabi_fadd+0xd2>
 80005e6:	2300      	movs	r3, #0
 80005e8:	22ff      	movs	r2, #255	; 0xff
 80005ea:	469c      	mov	ip, r3
 80005ec:	e799      	b.n	8000522 <__aeabi_fadd+0x8a>
 80005ee:	21fe      	movs	r1, #254	; 0xfe
 80005f0:	1c6a      	adds	r2, r5, #1
 80005f2:	4211      	tst	r1, r2
 80005f4:	d077      	beq.n	80006e6 <__aeabi_fadd+0x24e>
 80005f6:	2aff      	cmp	r2, #255	; 0xff
 80005f8:	d0f5      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 80005fa:	0015      	movs	r5, r2
 80005fc:	4446      	add	r6, r8
 80005fe:	0870      	lsrs	r0, r6, #1
 8000600:	0743      	lsls	r3, r0, #29
 8000602:	d000      	beq.n	8000606 <__aeabi_fadd+0x16e>
 8000604:	e77e      	b.n	8000504 <__aeabi_fadd+0x6c>
 8000606:	08c3      	lsrs	r3, r0, #3
 8000608:	2dff      	cmp	r5, #255	; 0xff
 800060a:	d00e      	beq.n	800062a <__aeabi_fadd+0x192>
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	469c      	mov	ip, r3
 8000612:	b2ea      	uxtb	r2, r5
 8000614:	e785      	b.n	8000522 <__aeabi_fadd+0x8a>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d007      	beq.n	800062a <__aeabi_fadd+0x192>
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	03d2      	lsls	r2, r2, #15
 800061e:	4213      	tst	r3, r2
 8000620:	d003      	beq.n	800062a <__aeabi_fadd+0x192>
 8000622:	4210      	tst	r0, r2
 8000624:	d101      	bne.n	800062a <__aeabi_fadd+0x192>
 8000626:	000c      	movs	r4, r1
 8000628:	0003      	movs	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0db      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4318      	orrs	r0, r3
 8000634:	0240      	lsls	r0, r0, #9
 8000636:	0a43      	lsrs	r3, r0, #9
 8000638:	469c      	mov	ip, r3
 800063a:	22ff      	movs	r2, #255	; 0xff
 800063c:	e771      	b.n	8000522 <__aeabi_fadd+0x8a>
 800063e:	2900      	cmp	r1, #0
 8000640:	d0d5      	beq.n	80005ee <__aeabi_fadd+0x156>
 8000642:	1b7a      	subs	r2, r7, r5
 8000644:	2d00      	cmp	r5, #0
 8000646:	d160      	bne.n	800070a <__aeabi_fadd+0x272>
 8000648:	4643      	mov	r3, r8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d024      	beq.n	8000698 <__aeabi_fadd+0x200>
 800064e:	1e53      	subs	r3, r2, #1
 8000650:	2a01      	cmp	r2, #1
 8000652:	d073      	beq.n	800073c <__aeabi_fadd+0x2a4>
 8000654:	2aff      	cmp	r2, #255	; 0xff
 8000656:	d0e7      	beq.n	8000628 <__aeabi_fadd+0x190>
 8000658:	001a      	movs	r2, r3
 800065a:	2a1b      	cmp	r2, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0x1c8>
 800065e:	e085      	b.n	800076c <__aeabi_fadd+0x2d4>
 8000660:	2001      	movs	r0, #1
 8000662:	003d      	movs	r5, r7
 8000664:	1980      	adds	r0, r0, r6
 8000666:	e785      	b.n	8000574 <__aeabi_fadd+0xdc>
 8000668:	2320      	movs	r3, #32
 800066a:	003a      	movs	r2, r7
 800066c:	1b45      	subs	r5, r0, r5
 800066e:	0038      	movs	r0, r7
 8000670:	3501      	adds	r5, #1
 8000672:	40ea      	lsrs	r2, r5
 8000674:	1b5d      	subs	r5, r3, r5
 8000676:	40a8      	lsls	r0, r5
 8000678:	1e43      	subs	r3, r0, #1
 800067a:	4198      	sbcs	r0, r3
 800067c:	2500      	movs	r5, #0
 800067e:	4310      	orrs	r0, r2
 8000680:	e73e      	b.n	8000500 <__aeabi_fadd+0x68>
 8000682:	2320      	movs	r3, #32
 8000684:	0030      	movs	r0, r6
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	0031      	movs	r1, r6
 800068a:	4098      	lsls	r0, r3
 800068c:	40d1      	lsrs	r1, r2
 800068e:	1e43      	subs	r3, r0, #1
 8000690:	4198      	sbcs	r0, r3
 8000692:	4308      	orrs	r0, r1
 8000694:	e722      	b.n	80004dc <__aeabi_fadd+0x44>
 8000696:	000c      	movs	r4, r1
 8000698:	0003      	movs	r3, r0
 800069a:	0015      	movs	r5, r2
 800069c:	e7b4      	b.n	8000608 <__aeabi_fadd+0x170>
 800069e:	2fff      	cmp	r7, #255	; 0xff
 80006a0:	d0c1      	beq.n	8000626 <__aeabi_fadd+0x18e>
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	4640      	mov	r0, r8
 80006a6:	04db      	lsls	r3, r3, #19
 80006a8:	4318      	orrs	r0, r3
 80006aa:	4680      	mov	r8, r0
 80006ac:	2a1b      	cmp	r2, #27
 80006ae:	dd51      	ble.n	8000754 <__aeabi_fadd+0x2bc>
 80006b0:	2001      	movs	r0, #1
 80006b2:	000c      	movs	r4, r1
 80006b4:	003d      	movs	r5, r7
 80006b6:	1a30      	subs	r0, r6, r0
 80006b8:	e712      	b.n	80004e0 <__aeabi_fadd+0x48>
 80006ba:	4643      	mov	r3, r8
 80006bc:	1b9f      	subs	r7, r3, r6
 80006be:	017b      	lsls	r3, r7, #5
 80006c0:	d42b      	bmi.n	800071a <__aeabi_fadd+0x282>
 80006c2:	2f00      	cmp	r7, #0
 80006c4:	d000      	beq.n	80006c8 <__aeabi_fadd+0x230>
 80006c6:	e710      	b.n	80004ea <__aeabi_fadd+0x52>
 80006c8:	2300      	movs	r3, #0
 80006ca:	2400      	movs	r4, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	469c      	mov	ip, r3
 80006d0:	e727      	b.n	8000522 <__aeabi_fadd+0x8a>
 80006d2:	2320      	movs	r3, #32
 80006d4:	0032      	movs	r2, r6
 80006d6:	0030      	movs	r0, r6
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	1a59      	subs	r1, r3, r1
 80006dc:	4088      	lsls	r0, r1
 80006de:	1e43      	subs	r3, r0, #1
 80006e0:	4198      	sbcs	r0, r3
 80006e2:	4310      	orrs	r0, r2
 80006e4:	e745      	b.n	8000572 <__aeabi_fadd+0xda>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d14a      	bne.n	8000780 <__aeabi_fadd+0x2e8>
 80006ea:	4643      	mov	r3, r8
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d063      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80006f0:	2200      	movs	r2, #0
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x260>
 80006f6:	e714      	b.n	8000522 <__aeabi_fadd+0x8a>
 80006f8:	0030      	movs	r0, r6
 80006fa:	4440      	add	r0, r8
 80006fc:	0143      	lsls	r3, r0, #5
 80006fe:	d400      	bmi.n	8000702 <__aeabi_fadd+0x26a>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x168>
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <__aeabi_fadd+0x334>)
 8000704:	3501      	adds	r5, #1
 8000706:	4018      	ands	r0, r3
 8000708:	e77a      	b.n	8000600 <__aeabi_fadd+0x168>
 800070a:	2fff      	cmp	r7, #255	; 0xff
 800070c:	d08c      	beq.n	8000628 <__aeabi_fadd+0x190>
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	4641      	mov	r1, r8
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	4319      	orrs	r1, r3
 8000716:	4688      	mov	r8, r1
 8000718:	e79f      	b.n	800065a <__aeabi_fadd+0x1c2>
 800071a:	4643      	mov	r3, r8
 800071c:	000c      	movs	r4, r1
 800071e:	1af7      	subs	r7, r6, r3
 8000720:	e6e3      	b.n	80004ea <__aeabi_fadd+0x52>
 8000722:	4642      	mov	r2, r8
 8000724:	2a00      	cmp	r2, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x292>
 8000728:	e775      	b.n	8000616 <__aeabi_fadd+0x17e>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d000      	beq.n	8000730 <__aeabi_fadd+0x298>
 800072e:	e77a      	b.n	8000626 <__aeabi_fadd+0x18e>
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	03db      	lsls	r3, r3, #15
 8000734:	2400      	movs	r4, #0
 8000736:	469c      	mov	ip, r3
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	e6f2      	b.n	8000522 <__aeabi_fadd+0x8a>
 800073c:	0030      	movs	r0, r6
 800073e:	4440      	add	r0, r8
 8000740:	2501      	movs	r5, #1
 8000742:	0143      	lsls	r3, r0, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fadd+0x2b0>
 8000746:	e75b      	b.n	8000600 <__aeabi_fadd+0x168>
 8000748:	2502      	movs	r5, #2
 800074a:	e718      	b.n	800057e <__aeabi_fadd+0xe6>
 800074c:	4643      	mov	r3, r8
 800074e:	2501      	movs	r5, #1
 8000750:	1b98      	subs	r0, r3, r6
 8000752:	e6c5      	b.n	80004e0 <__aeabi_fadd+0x48>
 8000754:	2320      	movs	r3, #32
 8000756:	4644      	mov	r4, r8
 8000758:	4640      	mov	r0, r8
 800075a:	40d4      	lsrs	r4, r2
 800075c:	1a9a      	subs	r2, r3, r2
 800075e:	4090      	lsls	r0, r2
 8000760:	1e43      	subs	r3, r0, #1
 8000762:	4198      	sbcs	r0, r3
 8000764:	4320      	orrs	r0, r4
 8000766:	e7a4      	b.n	80006b2 <__aeabi_fadd+0x21a>
 8000768:	000d      	movs	r5, r1
 800076a:	e74d      	b.n	8000608 <__aeabi_fadd+0x170>
 800076c:	2320      	movs	r3, #32
 800076e:	4641      	mov	r1, r8
 8000770:	4640      	mov	r0, r8
 8000772:	40d1      	lsrs	r1, r2
 8000774:	1a9a      	subs	r2, r3, r2
 8000776:	4090      	lsls	r0, r2
 8000778:	1e43      	subs	r3, r0, #1
 800077a:	4198      	sbcs	r0, r3
 800077c:	4308      	orrs	r0, r1
 800077e:	e770      	b.n	8000662 <__aeabi_fadd+0x1ca>
 8000780:	4642      	mov	r2, r8
 8000782:	2a00      	cmp	r2, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x2f0>
 8000786:	e74f      	b.n	8000628 <__aeabi_fadd+0x190>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x2f6>
 800078c:	e74d      	b.n	800062a <__aeabi_fadd+0x192>
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	4213      	tst	r3, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x300>
 8000796:	e748      	b.n	800062a <__aeabi_fadd+0x192>
 8000798:	4210      	tst	r0, r2
 800079a:	d000      	beq.n	800079e <__aeabi_fadd+0x306>
 800079c:	e745      	b.n	800062a <__aeabi_fadd+0x192>
 800079e:	0003      	movs	r3, r0
 80007a0:	e743      	b.n	800062a <__aeabi_fadd+0x192>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d090      	beq.n	80006c8 <__aeabi_fadd+0x230>
 80007a6:	000c      	movs	r4, r1
 80007a8:	4684      	mov	ip, r0
 80007aa:	2200      	movs	r2, #0
 80007ac:	e6b9      	b.n	8000522 <__aeabi_fadd+0x8a>
 80007ae:	4643      	mov	r3, r8
 80007b0:	000c      	movs	r4, r1
 80007b2:	1af0      	subs	r0, r6, r3
 80007b4:	3501      	adds	r5, #1
 80007b6:	e693      	b.n	80004e0 <__aeabi_fadd+0x48>
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b1      	b.n	8000522 <__aeabi_fadd+0x8a>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x32c>
 80007c2:	e71d      	b.n	8000600 <__aeabi_fadd+0x168>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	469c      	mov	ip, r3
 80007ca:	e6aa      	b.n	8000522 <__aeabi_fadd+0x8a>
 80007cc:	fbffffff 	.word	0xfbffffff
 80007d0:	7dffffff 	.word	0x7dffffff

080007d4 <__aeabi_fdiv>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	464f      	mov	r7, r9
 80007d8:	4646      	mov	r6, r8
 80007da:	46d6      	mov	lr, sl
 80007dc:	0245      	lsls	r5, r0, #9
 80007de:	b5c0      	push	{r6, r7, lr}
 80007e0:	0047      	lsls	r7, r0, #1
 80007e2:	1c0c      	adds	r4, r1, #0
 80007e4:	0a6d      	lsrs	r5, r5, #9
 80007e6:	0e3f      	lsrs	r7, r7, #24
 80007e8:	0fc6      	lsrs	r6, r0, #31
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fdiv+0x1c>
 80007ee:	e070      	b.n	80008d2 <__aeabi_fdiv+0xfe>
 80007f0:	2fff      	cmp	r7, #255	; 0xff
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fdiv+0x22>
 80007f4:	e075      	b.n	80008e2 <__aeabi_fdiv+0x10e>
 80007f6:	00eb      	lsls	r3, r5, #3
 80007f8:	2580      	movs	r5, #128	; 0x80
 80007fa:	04ed      	lsls	r5, r5, #19
 80007fc:	431d      	orrs	r5, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	4699      	mov	r9, r3
 8000802:	469a      	mov	sl, r3
 8000804:	3f7f      	subs	r7, #127	; 0x7f
 8000806:	0260      	lsls	r0, r4, #9
 8000808:	0a43      	lsrs	r3, r0, #9
 800080a:	4698      	mov	r8, r3
 800080c:	0063      	lsls	r3, r4, #1
 800080e:	0e1b      	lsrs	r3, r3, #24
 8000810:	0fe4      	lsrs	r4, r4, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d04e      	beq.n	80008b4 <__aeabi_fdiv+0xe0>
 8000816:	2bff      	cmp	r3, #255	; 0xff
 8000818:	d046      	beq.n	80008a8 <__aeabi_fdiv+0xd4>
 800081a:	4642      	mov	r2, r8
 800081c:	00d0      	lsls	r0, r2, #3
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	04d2      	lsls	r2, r2, #19
 8000822:	4302      	orrs	r2, r0
 8000824:	4690      	mov	r8, r2
 8000826:	2200      	movs	r2, #0
 8000828:	3b7f      	subs	r3, #127	; 0x7f
 800082a:	0031      	movs	r1, r6
 800082c:	1aff      	subs	r7, r7, r3
 800082e:	464b      	mov	r3, r9
 8000830:	4061      	eors	r1, r4
 8000832:	b2c9      	uxtb	r1, r1
 8000834:	4313      	orrs	r3, r2
 8000836:	2b0f      	cmp	r3, #15
 8000838:	d900      	bls.n	800083c <__aeabi_fdiv+0x68>
 800083a:	e0b5      	b.n	80009a8 <__aeabi_fdiv+0x1d4>
 800083c:	486e      	ldr	r0, [pc, #440]	; (80009f8 <__aeabi_fdiv+0x224>)
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	58c3      	ldr	r3, [r0, r3]
 8000842:	469f      	mov	pc, r3
 8000844:	2300      	movs	r3, #0
 8000846:	4698      	mov	r8, r3
 8000848:	0026      	movs	r6, r4
 800084a:	4645      	mov	r5, r8
 800084c:	4692      	mov	sl, r2
 800084e:	4653      	mov	r3, sl
 8000850:	2b02      	cmp	r3, #2
 8000852:	d100      	bne.n	8000856 <__aeabi_fdiv+0x82>
 8000854:	e089      	b.n	800096a <__aeabi_fdiv+0x196>
 8000856:	2b03      	cmp	r3, #3
 8000858:	d100      	bne.n	800085c <__aeabi_fdiv+0x88>
 800085a:	e09e      	b.n	800099a <__aeabi_fdiv+0x1c6>
 800085c:	2b01      	cmp	r3, #1
 800085e:	d018      	beq.n	8000892 <__aeabi_fdiv+0xbe>
 8000860:	003b      	movs	r3, r7
 8000862:	337f      	adds	r3, #127	; 0x7f
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd69      	ble.n	800093c <__aeabi_fdiv+0x168>
 8000868:	076a      	lsls	r2, r5, #29
 800086a:	d004      	beq.n	8000876 <__aeabi_fdiv+0xa2>
 800086c:	220f      	movs	r2, #15
 800086e:	402a      	ands	r2, r5
 8000870:	2a04      	cmp	r2, #4
 8000872:	d000      	beq.n	8000876 <__aeabi_fdiv+0xa2>
 8000874:	3504      	adds	r5, #4
 8000876:	012a      	lsls	r2, r5, #4
 8000878:	d503      	bpl.n	8000882 <__aeabi_fdiv+0xae>
 800087a:	4b60      	ldr	r3, [pc, #384]	; (80009fc <__aeabi_fdiv+0x228>)
 800087c:	401d      	ands	r5, r3
 800087e:	003b      	movs	r3, r7
 8000880:	3380      	adds	r3, #128	; 0x80
 8000882:	2bfe      	cmp	r3, #254	; 0xfe
 8000884:	dd00      	ble.n	8000888 <__aeabi_fdiv+0xb4>
 8000886:	e070      	b.n	800096a <__aeabi_fdiv+0x196>
 8000888:	01ad      	lsls	r5, r5, #6
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	b2d8      	uxtb	r0, r3
 800088e:	e002      	b.n	8000896 <__aeabi_fdiv+0xc2>
 8000890:	000e      	movs	r6, r1
 8000892:	2000      	movs	r0, #0
 8000894:	2500      	movs	r5, #0
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4328      	orrs	r0, r5
 800089a:	07f6      	lsls	r6, r6, #31
 800089c:	4330      	orrs	r0, r6
 800089e:	bce0      	pop	{r5, r6, r7}
 80008a0:	46ba      	mov	sl, r7
 80008a2:	46b1      	mov	r9, r6
 80008a4:	46a8      	mov	r8, r5
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	4643      	mov	r3, r8
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d13f      	bne.n	800092e <__aeabi_fdiv+0x15a>
 80008ae:	2202      	movs	r2, #2
 80008b0:	3fff      	subs	r7, #255	; 0xff
 80008b2:	e003      	b.n	80008bc <__aeabi_fdiv+0xe8>
 80008b4:	4643      	mov	r3, r8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d12d      	bne.n	8000916 <__aeabi_fdiv+0x142>
 80008ba:	2201      	movs	r2, #1
 80008bc:	0031      	movs	r1, r6
 80008be:	464b      	mov	r3, r9
 80008c0:	4061      	eors	r1, r4
 80008c2:	b2c9      	uxtb	r1, r1
 80008c4:	4313      	orrs	r3, r2
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d834      	bhi.n	8000934 <__aeabi_fdiv+0x160>
 80008ca:	484d      	ldr	r0, [pc, #308]	; (8000a00 <__aeabi_fdiv+0x22c>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58c3      	ldr	r3, [r0, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d113      	bne.n	80008fe <__aeabi_fdiv+0x12a>
 80008d6:	2304      	movs	r3, #4
 80008d8:	4699      	mov	r9, r3
 80008da:	3b03      	subs	r3, #3
 80008dc:	2700      	movs	r7, #0
 80008de:	469a      	mov	sl, r3
 80008e0:	e791      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d105      	bne.n	80008f2 <__aeabi_fdiv+0x11e>
 80008e6:	2308      	movs	r3, #8
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b06      	subs	r3, #6
 80008ec:	27ff      	movs	r7, #255	; 0xff
 80008ee:	469a      	mov	sl, r3
 80008f0:	e789      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008f2:	230c      	movs	r3, #12
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b09      	subs	r3, #9
 80008f8:	27ff      	movs	r7, #255	; 0xff
 80008fa:	469a      	mov	sl, r3
 80008fc:	e783      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008fe:	0028      	movs	r0, r5
 8000900:	f000 fcb4 	bl	800126c <__clzsi2>
 8000904:	2776      	movs	r7, #118	; 0x76
 8000906:	1f43      	subs	r3, r0, #5
 8000908:	409d      	lsls	r5, r3
 800090a:	2300      	movs	r3, #0
 800090c:	427f      	negs	r7, r7
 800090e:	4699      	mov	r9, r3
 8000910:	469a      	mov	sl, r3
 8000912:	1a3f      	subs	r7, r7, r0
 8000914:	e777      	b.n	8000806 <__aeabi_fdiv+0x32>
 8000916:	4640      	mov	r0, r8
 8000918:	f000 fca8 	bl	800126c <__clzsi2>
 800091c:	4642      	mov	r2, r8
 800091e:	1f43      	subs	r3, r0, #5
 8000920:	409a      	lsls	r2, r3
 8000922:	2376      	movs	r3, #118	; 0x76
 8000924:	425b      	negs	r3, r3
 8000926:	4690      	mov	r8, r2
 8000928:	1a1b      	subs	r3, r3, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e77d      	b.n	800082a <__aeabi_fdiv+0x56>
 800092e:	23ff      	movs	r3, #255	; 0xff
 8000930:	2203      	movs	r2, #3
 8000932:	e77a      	b.n	800082a <__aeabi_fdiv+0x56>
 8000934:	000e      	movs	r6, r1
 8000936:	20ff      	movs	r0, #255	; 0xff
 8000938:	2500      	movs	r5, #0
 800093a:	e7ac      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800093c:	2001      	movs	r0, #1
 800093e:	1ac0      	subs	r0, r0, r3
 8000940:	281b      	cmp	r0, #27
 8000942:	dca6      	bgt.n	8000892 <__aeabi_fdiv+0xbe>
 8000944:	379e      	adds	r7, #158	; 0x9e
 8000946:	002a      	movs	r2, r5
 8000948:	40bd      	lsls	r5, r7
 800094a:	40c2      	lsrs	r2, r0
 800094c:	1e6b      	subs	r3, r5, #1
 800094e:	419d      	sbcs	r5, r3
 8000950:	4315      	orrs	r5, r2
 8000952:	076b      	lsls	r3, r5, #29
 8000954:	d004      	beq.n	8000960 <__aeabi_fdiv+0x18c>
 8000956:	230f      	movs	r3, #15
 8000958:	402b      	ands	r3, r5
 800095a:	2b04      	cmp	r3, #4
 800095c:	d000      	beq.n	8000960 <__aeabi_fdiv+0x18c>
 800095e:	3504      	adds	r5, #4
 8000960:	016b      	lsls	r3, r5, #5
 8000962:	d544      	bpl.n	80009ee <__aeabi_fdiv+0x21a>
 8000964:	2001      	movs	r0, #1
 8000966:	2500      	movs	r5, #0
 8000968:	e795      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	2500      	movs	r5, #0
 800096e:	e792      	b.n	8000896 <__aeabi_fdiv+0xc2>
 8000970:	2580      	movs	r5, #128	; 0x80
 8000972:	2600      	movs	r6, #0
 8000974:	20ff      	movs	r0, #255	; 0xff
 8000976:	03ed      	lsls	r5, r5, #15
 8000978:	e78d      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800097a:	2300      	movs	r3, #0
 800097c:	4698      	mov	r8, r3
 800097e:	2080      	movs	r0, #128	; 0x80
 8000980:	03c0      	lsls	r0, r0, #15
 8000982:	4205      	tst	r5, r0
 8000984:	d009      	beq.n	800099a <__aeabi_fdiv+0x1c6>
 8000986:	4643      	mov	r3, r8
 8000988:	4203      	tst	r3, r0
 800098a:	d106      	bne.n	800099a <__aeabi_fdiv+0x1c6>
 800098c:	4645      	mov	r5, r8
 800098e:	4305      	orrs	r5, r0
 8000990:	026d      	lsls	r5, r5, #9
 8000992:	0026      	movs	r6, r4
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	0a6d      	lsrs	r5, r5, #9
 8000998:	e77d      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800099a:	2080      	movs	r0, #128	; 0x80
 800099c:	03c0      	lsls	r0, r0, #15
 800099e:	4305      	orrs	r5, r0
 80009a0:	026d      	lsls	r5, r5, #9
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	0a6d      	lsrs	r5, r5, #9
 80009a6:	e776      	b.n	8000896 <__aeabi_fdiv+0xc2>
 80009a8:	4642      	mov	r2, r8
 80009aa:	016b      	lsls	r3, r5, #5
 80009ac:	0150      	lsls	r0, r2, #5
 80009ae:	4283      	cmp	r3, r0
 80009b0:	d219      	bcs.n	80009e6 <__aeabi_fdiv+0x212>
 80009b2:	221b      	movs	r2, #27
 80009b4:	2500      	movs	r5, #0
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2601      	movs	r6, #1
 80009ba:	001c      	movs	r4, r3
 80009bc:	006d      	lsls	r5, r5, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	db01      	blt.n	80009c8 <__aeabi_fdiv+0x1f4>
 80009c4:	4298      	cmp	r0, r3
 80009c6:	d801      	bhi.n	80009cc <__aeabi_fdiv+0x1f8>
 80009c8:	1a1b      	subs	r3, r3, r0
 80009ca:	4335      	orrs	r5, r6
 80009cc:	3a01      	subs	r2, #1
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d1f3      	bne.n	80009ba <__aeabi_fdiv+0x1e6>
 80009d2:	1e5a      	subs	r2, r3, #1
 80009d4:	4193      	sbcs	r3, r2
 80009d6:	431d      	orrs	r5, r3
 80009d8:	003b      	movs	r3, r7
 80009da:	337f      	adds	r3, #127	; 0x7f
 80009dc:	000e      	movs	r6, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_fdiv+0x210>
 80009e2:	e741      	b.n	8000868 <__aeabi_fdiv+0x94>
 80009e4:	e7aa      	b.n	800093c <__aeabi_fdiv+0x168>
 80009e6:	221a      	movs	r2, #26
 80009e8:	2501      	movs	r5, #1
 80009ea:	1a1b      	subs	r3, r3, r0
 80009ec:	e7e4      	b.n	80009b8 <__aeabi_fdiv+0x1e4>
 80009ee:	01ad      	lsls	r5, r5, #6
 80009f0:	2000      	movs	r0, #0
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e74f      	b.n	8000896 <__aeabi_fdiv+0xc2>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	080038c0 	.word	0x080038c0
 80009fc:	f7ffffff 	.word	0xf7ffffff
 8000a00:	08003900 	.word	0x08003900

08000a04 <__eqsf2>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	0042      	lsls	r2, r0, #1
 8000a08:	0245      	lsls	r5, r0, #9
 8000a0a:	024e      	lsls	r6, r1, #9
 8000a0c:	004c      	lsls	r4, r1, #1
 8000a0e:	0fc3      	lsrs	r3, r0, #31
 8000a10:	0a6d      	lsrs	r5, r5, #9
 8000a12:	2001      	movs	r0, #1
 8000a14:	0e12      	lsrs	r2, r2, #24
 8000a16:	0a76      	lsrs	r6, r6, #9
 8000a18:	0e24      	lsrs	r4, r4, #24
 8000a1a:	0fc9      	lsrs	r1, r1, #31
 8000a1c:	2aff      	cmp	r2, #255	; 0xff
 8000a1e:	d006      	beq.n	8000a2e <__eqsf2+0x2a>
 8000a20:	2cff      	cmp	r4, #255	; 0xff
 8000a22:	d003      	beq.n	8000a2c <__eqsf2+0x28>
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d101      	bne.n	8000a2c <__eqsf2+0x28>
 8000a28:	42b5      	cmp	r5, r6
 8000a2a:	d006      	beq.n	8000a3a <__eqsf2+0x36>
 8000a2c:	bd70      	pop	{r4, r5, r6, pc}
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d1fc      	bne.n	8000a2c <__eqsf2+0x28>
 8000a32:	2cff      	cmp	r4, #255	; 0xff
 8000a34:	d1fa      	bne.n	8000a2c <__eqsf2+0x28>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	d1f8      	bne.n	8000a2c <__eqsf2+0x28>
 8000a3a:	428b      	cmp	r3, r1
 8000a3c:	d006      	beq.n	8000a4c <__eqsf2+0x48>
 8000a3e:	2001      	movs	r0, #1
 8000a40:	2a00      	cmp	r2, #0
 8000a42:	d1f3      	bne.n	8000a2c <__eqsf2+0x28>
 8000a44:	0028      	movs	r0, r5
 8000a46:	1e43      	subs	r3, r0, #1
 8000a48:	4198      	sbcs	r0, r3
 8000a4a:	e7ef      	b.n	8000a2c <__eqsf2+0x28>
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e7ed      	b.n	8000a2c <__eqsf2+0x28>

08000a50 <__gesf2>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	0042      	lsls	r2, r0, #1
 8000a54:	0245      	lsls	r5, r0, #9
 8000a56:	024e      	lsls	r6, r1, #9
 8000a58:	004c      	lsls	r4, r1, #1
 8000a5a:	0fc3      	lsrs	r3, r0, #31
 8000a5c:	0a6d      	lsrs	r5, r5, #9
 8000a5e:	0e12      	lsrs	r2, r2, #24
 8000a60:	0a76      	lsrs	r6, r6, #9
 8000a62:	0e24      	lsrs	r4, r4, #24
 8000a64:	0fc8      	lsrs	r0, r1, #31
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d01b      	beq.n	8000aa2 <__gesf2+0x52>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d00e      	beq.n	8000a8c <__gesf2+0x3c>
 8000a6e:	2a00      	cmp	r2, #0
 8000a70:	d11b      	bne.n	8000aaa <__gesf2+0x5a>
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d101      	bne.n	8000a7a <__gesf2+0x2a>
 8000a76:	2e00      	cmp	r6, #0
 8000a78:	d01c      	beq.n	8000ab4 <__gesf2+0x64>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d00c      	beq.n	8000a98 <__gesf2+0x48>
 8000a7e:	4283      	cmp	r3, r0
 8000a80:	d01c      	beq.n	8000abc <__gesf2+0x6c>
 8000a82:	2102      	movs	r1, #2
 8000a84:	1e58      	subs	r0, r3, #1
 8000a86:	4008      	ands	r0, r1
 8000a88:	3801      	subs	r0, #1
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}
 8000a8c:	2e00      	cmp	r6, #0
 8000a8e:	d122      	bne.n	8000ad6 <__gesf2+0x86>
 8000a90:	2a00      	cmp	r2, #0
 8000a92:	d1f4      	bne.n	8000a7e <__gesf2+0x2e>
 8000a94:	2d00      	cmp	r5, #0
 8000a96:	d1f2      	bne.n	8000a7e <__gesf2+0x2e>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d1f6      	bne.n	8000a8a <__gesf2+0x3a>
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4240      	negs	r0, r0
 8000aa0:	e7f3      	b.n	8000a8a <__gesf2+0x3a>
 8000aa2:	2d00      	cmp	r5, #0
 8000aa4:	d117      	bne.n	8000ad6 <__gesf2+0x86>
 8000aa6:	2cff      	cmp	r4, #255	; 0xff
 8000aa8:	d0f0      	beq.n	8000a8c <__gesf2+0x3c>
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d1e7      	bne.n	8000a7e <__gesf2+0x2e>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d1e5      	bne.n	8000a7e <__gesf2+0x2e>
 8000ab2:	e7e6      	b.n	8000a82 <__gesf2+0x32>
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d0e7      	beq.n	8000a8a <__gesf2+0x3a>
 8000aba:	e7e2      	b.n	8000a82 <__gesf2+0x32>
 8000abc:	42a2      	cmp	r2, r4
 8000abe:	dc05      	bgt.n	8000acc <__gesf2+0x7c>
 8000ac0:	dbea      	blt.n	8000a98 <__gesf2+0x48>
 8000ac2:	42b5      	cmp	r5, r6
 8000ac4:	d802      	bhi.n	8000acc <__gesf2+0x7c>
 8000ac6:	d3e7      	bcc.n	8000a98 <__gesf2+0x48>
 8000ac8:	2000      	movs	r0, #0
 8000aca:	e7de      	b.n	8000a8a <__gesf2+0x3a>
 8000acc:	4243      	negs	r3, r0
 8000ace:	4158      	adcs	r0, r3
 8000ad0:	0040      	lsls	r0, r0, #1
 8000ad2:	3801      	subs	r0, #1
 8000ad4:	e7d9      	b.n	8000a8a <__gesf2+0x3a>
 8000ad6:	2002      	movs	r0, #2
 8000ad8:	4240      	negs	r0, r0
 8000ada:	e7d6      	b.n	8000a8a <__gesf2+0x3a>

08000adc <__lesf2>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	0042      	lsls	r2, r0, #1
 8000ae0:	0245      	lsls	r5, r0, #9
 8000ae2:	024e      	lsls	r6, r1, #9
 8000ae4:	004c      	lsls	r4, r1, #1
 8000ae6:	0fc3      	lsrs	r3, r0, #31
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e12      	lsrs	r2, r2, #24
 8000aec:	0a76      	lsrs	r6, r6, #9
 8000aee:	0e24      	lsrs	r4, r4, #24
 8000af0:	0fc8      	lsrs	r0, r1, #31
 8000af2:	2aff      	cmp	r2, #255	; 0xff
 8000af4:	d00b      	beq.n	8000b0e <__lesf2+0x32>
 8000af6:	2cff      	cmp	r4, #255	; 0xff
 8000af8:	d00d      	beq.n	8000b16 <__lesf2+0x3a>
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	d11f      	bne.n	8000b3e <__lesf2+0x62>
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d116      	bne.n	8000b30 <__lesf2+0x54>
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d114      	bne.n	8000b30 <__lesf2+0x54>
 8000b06:	2000      	movs	r0, #0
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d010      	beq.n	8000b2e <__lesf2+0x52>
 8000b0c:	e009      	b.n	8000b22 <__lesf2+0x46>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d10c      	bne.n	8000b2c <__lesf2+0x50>
 8000b12:	2cff      	cmp	r4, #255	; 0xff
 8000b14:	d113      	bne.n	8000b3e <__lesf2+0x62>
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d108      	bne.n	8000b2c <__lesf2+0x50>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d008      	beq.n	8000b30 <__lesf2+0x54>
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	d012      	beq.n	8000b48 <__lesf2+0x6c>
 8000b22:	2102      	movs	r1, #2
 8000b24:	1e58      	subs	r0, r3, #1
 8000b26:	4008      	ands	r0, r1
 8000b28:	3801      	subs	r0, #1
 8000b2a:	e000      	b.n	8000b2e <__lesf2+0x52>
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	bd70      	pop	{r4, r5, r6, pc}
 8000b30:	2d00      	cmp	r5, #0
 8000b32:	d1f4      	bne.n	8000b1e <__lesf2+0x42>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d1fa      	bne.n	8000b2e <__lesf2+0x52>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	e7f7      	b.n	8000b2e <__lesf2+0x52>
 8000b3e:	2c00      	cmp	r4, #0
 8000b40:	d1ed      	bne.n	8000b1e <__lesf2+0x42>
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d1eb      	bne.n	8000b1e <__lesf2+0x42>
 8000b46:	e7ec      	b.n	8000b22 <__lesf2+0x46>
 8000b48:	42a2      	cmp	r2, r4
 8000b4a:	dc05      	bgt.n	8000b58 <__lesf2+0x7c>
 8000b4c:	dbf2      	blt.n	8000b34 <__lesf2+0x58>
 8000b4e:	42b5      	cmp	r5, r6
 8000b50:	d802      	bhi.n	8000b58 <__lesf2+0x7c>
 8000b52:	d3ef      	bcc.n	8000b34 <__lesf2+0x58>
 8000b54:	2000      	movs	r0, #0
 8000b56:	e7ea      	b.n	8000b2e <__lesf2+0x52>
 8000b58:	4243      	negs	r3, r0
 8000b5a:	4158      	adcs	r0, r3
 8000b5c:	0040      	lsls	r0, r0, #1
 8000b5e:	3801      	subs	r0, #1
 8000b60:	e7e5      	b.n	8000b2e <__lesf2+0x52>
 8000b62:	46c0      	nop			; (mov r8, r8)

08000b64 <__aeabi_fmul>:
 8000b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b66:	464f      	mov	r7, r9
 8000b68:	4646      	mov	r6, r8
 8000b6a:	46d6      	mov	lr, sl
 8000b6c:	0244      	lsls	r4, r0, #9
 8000b6e:	0045      	lsls	r5, r0, #1
 8000b70:	b5c0      	push	{r6, r7, lr}
 8000b72:	0a64      	lsrs	r4, r4, #9
 8000b74:	1c0f      	adds	r7, r1, #0
 8000b76:	0e2d      	lsrs	r5, r5, #24
 8000b78:	0fc6      	lsrs	r6, r0, #31
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_fmul+0x1c>
 8000b7e:	e08d      	b.n	8000c9c <__aeabi_fmul+0x138>
 8000b80:	2dff      	cmp	r5, #255	; 0xff
 8000b82:	d100      	bne.n	8000b86 <__aeabi_fmul+0x22>
 8000b84:	e092      	b.n	8000cac <__aeabi_fmul+0x148>
 8000b86:	2300      	movs	r3, #0
 8000b88:	2080      	movs	r0, #128	; 0x80
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	00e4      	lsls	r4, r4, #3
 8000b90:	04c0      	lsls	r0, r0, #19
 8000b92:	4304      	orrs	r4, r0
 8000b94:	3d7f      	subs	r5, #127	; 0x7f
 8000b96:	0278      	lsls	r0, r7, #9
 8000b98:	0a43      	lsrs	r3, r0, #9
 8000b9a:	4698      	mov	r8, r3
 8000b9c:	007b      	lsls	r3, r7, #1
 8000b9e:	0e1b      	lsrs	r3, r3, #24
 8000ba0:	0fff      	lsrs	r7, r7, #31
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fmul+0x44>
 8000ba6:	e070      	b.n	8000c8a <__aeabi_fmul+0x126>
 8000ba8:	2bff      	cmp	r3, #255	; 0xff
 8000baa:	d100      	bne.n	8000bae <__aeabi_fmul+0x4a>
 8000bac:	e086      	b.n	8000cbc <__aeabi_fmul+0x158>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	00d0      	lsls	r0, r2, #3
 8000bb2:	2280      	movs	r2, #128	; 0x80
 8000bb4:	3b7f      	subs	r3, #127	; 0x7f
 8000bb6:	18ed      	adds	r5, r5, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	04d2      	lsls	r2, r2, #19
 8000bbc:	4302      	orrs	r2, r0
 8000bbe:	4690      	mov	r8, r2
 8000bc0:	469c      	mov	ip, r3
 8000bc2:	0031      	movs	r1, r6
 8000bc4:	464b      	mov	r3, r9
 8000bc6:	4079      	eors	r1, r7
 8000bc8:	1c68      	adds	r0, r5, #1
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d81c      	bhi.n	8000c08 <__aeabi_fmul+0xa4>
 8000bce:	4a76      	ldr	r2, [pc, #472]	; (8000da8 <__aeabi_fmul+0x244>)
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	58d3      	ldr	r3, [r2, r3]
 8000bd4:	469f      	mov	pc, r3
 8000bd6:	0039      	movs	r1, r7
 8000bd8:	4644      	mov	r4, r8
 8000bda:	46e2      	mov	sl, ip
 8000bdc:	4653      	mov	r3, sl
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d00f      	beq.n	8000c02 <__aeabi_fmul+0x9e>
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d100      	bne.n	8000be8 <__aeabi_fmul+0x84>
 8000be6:	e0d7      	b.n	8000d98 <__aeabi_fmul+0x234>
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d137      	bne.n	8000c5c <__aeabi_fmul+0xf8>
 8000bec:	2000      	movs	r0, #0
 8000bee:	2400      	movs	r4, #0
 8000bf0:	05c0      	lsls	r0, r0, #23
 8000bf2:	4320      	orrs	r0, r4
 8000bf4:	07c9      	lsls	r1, r1, #31
 8000bf6:	4308      	orrs	r0, r1
 8000bf8:	bce0      	pop	{r5, r6, r7}
 8000bfa:	46ba      	mov	sl, r7
 8000bfc:	46b1      	mov	r9, r6
 8000bfe:	46a8      	mov	r8, r5
 8000c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c02:	20ff      	movs	r0, #255	; 0xff
 8000c04:	2400      	movs	r4, #0
 8000c06:	e7f3      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000c08:	0c26      	lsrs	r6, r4, #16
 8000c0a:	0424      	lsls	r4, r4, #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	4644      	mov	r4, r8
 8000c10:	0424      	lsls	r4, r4, #16
 8000c12:	0c24      	lsrs	r4, r4, #16
 8000c14:	4643      	mov	r3, r8
 8000c16:	0027      	movs	r7, r4
 8000c18:	0c1b      	lsrs	r3, r3, #16
 8000c1a:	4357      	muls	r7, r2
 8000c1c:	4374      	muls	r4, r6
 8000c1e:	435a      	muls	r2, r3
 8000c20:	435e      	muls	r6, r3
 8000c22:	1912      	adds	r2, r2, r4
 8000c24:	0c3b      	lsrs	r3, r7, #16
 8000c26:	189b      	adds	r3, r3, r2
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	d903      	bls.n	8000c34 <__aeabi_fmul+0xd0>
 8000c2c:	2280      	movs	r2, #128	; 0x80
 8000c2e:	0252      	lsls	r2, r2, #9
 8000c30:	4694      	mov	ip, r2
 8000c32:	4466      	add	r6, ip
 8000c34:	043f      	lsls	r7, r7, #16
 8000c36:	041a      	lsls	r2, r3, #16
 8000c38:	0c3f      	lsrs	r7, r7, #16
 8000c3a:	19d2      	adds	r2, r2, r7
 8000c3c:	0194      	lsls	r4, r2, #6
 8000c3e:	1e67      	subs	r7, r4, #1
 8000c40:	41bc      	sbcs	r4, r7
 8000c42:	0c1b      	lsrs	r3, r3, #16
 8000c44:	0e92      	lsrs	r2, r2, #26
 8000c46:	199b      	adds	r3, r3, r6
 8000c48:	4314      	orrs	r4, r2
 8000c4a:	019b      	lsls	r3, r3, #6
 8000c4c:	431c      	orrs	r4, r3
 8000c4e:	011b      	lsls	r3, r3, #4
 8000c50:	d400      	bmi.n	8000c54 <__aeabi_fmul+0xf0>
 8000c52:	e09b      	b.n	8000d8c <__aeabi_fmul+0x228>
 8000c54:	2301      	movs	r3, #1
 8000c56:	0862      	lsrs	r2, r4, #1
 8000c58:	401c      	ands	r4, r3
 8000c5a:	4314      	orrs	r4, r2
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	327f      	adds	r2, #127	; 0x7f
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	dd64      	ble.n	8000d2e <__aeabi_fmul+0x1ca>
 8000c64:	0763      	lsls	r3, r4, #29
 8000c66:	d004      	beq.n	8000c72 <__aeabi_fmul+0x10e>
 8000c68:	230f      	movs	r3, #15
 8000c6a:	4023      	ands	r3, r4
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	d000      	beq.n	8000c72 <__aeabi_fmul+0x10e>
 8000c70:	3404      	adds	r4, #4
 8000c72:	0123      	lsls	r3, r4, #4
 8000c74:	d503      	bpl.n	8000c7e <__aeabi_fmul+0x11a>
 8000c76:	0002      	movs	r2, r0
 8000c78:	4b4c      	ldr	r3, [pc, #304]	; (8000dac <__aeabi_fmul+0x248>)
 8000c7a:	3280      	adds	r2, #128	; 0x80
 8000c7c:	401c      	ands	r4, r3
 8000c7e:	2afe      	cmp	r2, #254	; 0xfe
 8000c80:	dcbf      	bgt.n	8000c02 <__aeabi_fmul+0x9e>
 8000c82:	01a4      	lsls	r4, r4, #6
 8000c84:	0a64      	lsrs	r4, r4, #9
 8000c86:	b2d0      	uxtb	r0, r2
 8000c88:	e7b2      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000c8a:	4643      	mov	r3, r8
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d13d      	bne.n	8000d0c <__aeabi_fmul+0x1a8>
 8000c90:	464a      	mov	r2, r9
 8000c92:	3301      	adds	r3, #1
 8000c94:	431a      	orrs	r2, r3
 8000c96:	4691      	mov	r9, r2
 8000c98:	469c      	mov	ip, r3
 8000c9a:	e792      	b.n	8000bc2 <__aeabi_fmul+0x5e>
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d129      	bne.n	8000cf4 <__aeabi_fmul+0x190>
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	4699      	mov	r9, r3
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	2500      	movs	r5, #0
 8000ca8:	469a      	mov	sl, r3
 8000caa:	e774      	b.n	8000b96 <__aeabi_fmul+0x32>
 8000cac:	2c00      	cmp	r4, #0
 8000cae:	d11b      	bne.n	8000ce8 <__aeabi_fmul+0x184>
 8000cb0:	2308      	movs	r3, #8
 8000cb2:	4699      	mov	r9, r3
 8000cb4:	3b06      	subs	r3, #6
 8000cb6:	25ff      	movs	r5, #255	; 0xff
 8000cb8:	469a      	mov	sl, r3
 8000cba:	e76c      	b.n	8000b96 <__aeabi_fmul+0x32>
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	35ff      	adds	r5, #255	; 0xff
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d10b      	bne.n	8000cdc <__aeabi_fmul+0x178>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	469c      	mov	ip, r3
 8000cce:	e778      	b.n	8000bc2 <__aeabi_fmul+0x5e>
 8000cd0:	4653      	mov	r3, sl
 8000cd2:	0031      	movs	r1, r6
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d000      	beq.n	8000cda <__aeabi_fmul+0x176>
 8000cd8:	e783      	b.n	8000be2 <__aeabi_fmul+0x7e>
 8000cda:	e792      	b.n	8000c02 <__aeabi_fmul+0x9e>
 8000cdc:	2303      	movs	r3, #3
 8000cde:	464a      	mov	r2, r9
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	4691      	mov	r9, r2
 8000ce4:	469c      	mov	ip, r3
 8000ce6:	e76c      	b.n	8000bc2 <__aeabi_fmul+0x5e>
 8000ce8:	230c      	movs	r3, #12
 8000cea:	4699      	mov	r9, r3
 8000cec:	3b09      	subs	r3, #9
 8000cee:	25ff      	movs	r5, #255	; 0xff
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	e750      	b.n	8000b96 <__aeabi_fmul+0x32>
 8000cf4:	0020      	movs	r0, r4
 8000cf6:	f000 fab9 	bl	800126c <__clzsi2>
 8000cfa:	2576      	movs	r5, #118	; 0x76
 8000cfc:	1f43      	subs	r3, r0, #5
 8000cfe:	409c      	lsls	r4, r3
 8000d00:	2300      	movs	r3, #0
 8000d02:	426d      	negs	r5, r5
 8000d04:	4699      	mov	r9, r3
 8000d06:	469a      	mov	sl, r3
 8000d08:	1a2d      	subs	r5, r5, r0
 8000d0a:	e744      	b.n	8000b96 <__aeabi_fmul+0x32>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	f000 faad 	bl	800126c <__clzsi2>
 8000d12:	4642      	mov	r2, r8
 8000d14:	1f43      	subs	r3, r0, #5
 8000d16:	409a      	lsls	r2, r3
 8000d18:	2300      	movs	r3, #0
 8000d1a:	1a2d      	subs	r5, r5, r0
 8000d1c:	4690      	mov	r8, r2
 8000d1e:	469c      	mov	ip, r3
 8000d20:	3d76      	subs	r5, #118	; 0x76
 8000d22:	e74e      	b.n	8000bc2 <__aeabi_fmul+0x5e>
 8000d24:	2480      	movs	r4, #128	; 0x80
 8000d26:	2100      	movs	r1, #0
 8000d28:	20ff      	movs	r0, #255	; 0xff
 8000d2a:	03e4      	lsls	r4, r4, #15
 8000d2c:	e760      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	2b1b      	cmp	r3, #27
 8000d34:	dd00      	ble.n	8000d38 <__aeabi_fmul+0x1d4>
 8000d36:	e759      	b.n	8000bec <__aeabi_fmul+0x88>
 8000d38:	0022      	movs	r2, r4
 8000d3a:	309e      	adds	r0, #158	; 0x9e
 8000d3c:	40da      	lsrs	r2, r3
 8000d3e:	4084      	lsls	r4, r0
 8000d40:	0013      	movs	r3, r2
 8000d42:	1e62      	subs	r2, r4, #1
 8000d44:	4194      	sbcs	r4, r2
 8000d46:	431c      	orrs	r4, r3
 8000d48:	0763      	lsls	r3, r4, #29
 8000d4a:	d004      	beq.n	8000d56 <__aeabi_fmul+0x1f2>
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	4023      	ands	r3, r4
 8000d50:	2b04      	cmp	r3, #4
 8000d52:	d000      	beq.n	8000d56 <__aeabi_fmul+0x1f2>
 8000d54:	3404      	adds	r4, #4
 8000d56:	0163      	lsls	r3, r4, #5
 8000d58:	d51a      	bpl.n	8000d90 <__aeabi_fmul+0x22c>
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2400      	movs	r4, #0
 8000d5e:	e747      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000d60:	2080      	movs	r0, #128	; 0x80
 8000d62:	03c0      	lsls	r0, r0, #15
 8000d64:	4204      	tst	r4, r0
 8000d66:	d009      	beq.n	8000d7c <__aeabi_fmul+0x218>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	4203      	tst	r3, r0
 8000d6c:	d106      	bne.n	8000d7c <__aeabi_fmul+0x218>
 8000d6e:	4644      	mov	r4, r8
 8000d70:	4304      	orrs	r4, r0
 8000d72:	0264      	lsls	r4, r4, #9
 8000d74:	0039      	movs	r1, r7
 8000d76:	20ff      	movs	r0, #255	; 0xff
 8000d78:	0a64      	lsrs	r4, r4, #9
 8000d7a:	e739      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000d7c:	2080      	movs	r0, #128	; 0x80
 8000d7e:	03c0      	lsls	r0, r0, #15
 8000d80:	4304      	orrs	r4, r0
 8000d82:	0264      	lsls	r4, r4, #9
 8000d84:	0031      	movs	r1, r6
 8000d86:	20ff      	movs	r0, #255	; 0xff
 8000d88:	0a64      	lsrs	r4, r4, #9
 8000d8a:	e731      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000d8c:	0028      	movs	r0, r5
 8000d8e:	e765      	b.n	8000c5c <__aeabi_fmul+0xf8>
 8000d90:	01a4      	lsls	r4, r4, #6
 8000d92:	2000      	movs	r0, #0
 8000d94:	0a64      	lsrs	r4, r4, #9
 8000d96:	e72b      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000d98:	2080      	movs	r0, #128	; 0x80
 8000d9a:	03c0      	lsls	r0, r0, #15
 8000d9c:	4304      	orrs	r4, r0
 8000d9e:	0264      	lsls	r4, r4, #9
 8000da0:	20ff      	movs	r0, #255	; 0xff
 8000da2:	0a64      	lsrs	r4, r4, #9
 8000da4:	e724      	b.n	8000bf0 <__aeabi_fmul+0x8c>
 8000da6:	46c0      	nop			; (mov r8, r8)
 8000da8:	08003940 	.word	0x08003940
 8000dac:	f7ffffff 	.word	0xf7ffffff

08000db0 <__aeabi_fsub>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	46ce      	mov	lr, r9
 8000db4:	4647      	mov	r7, r8
 8000db6:	0243      	lsls	r3, r0, #9
 8000db8:	0a5b      	lsrs	r3, r3, #9
 8000dba:	024e      	lsls	r6, r1, #9
 8000dbc:	00da      	lsls	r2, r3, #3
 8000dbe:	4694      	mov	ip, r2
 8000dc0:	0a72      	lsrs	r2, r6, #9
 8000dc2:	4691      	mov	r9, r2
 8000dc4:	0045      	lsls	r5, r0, #1
 8000dc6:	004a      	lsls	r2, r1, #1
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	0e2d      	lsrs	r5, r5, #24
 8000dcc:	001f      	movs	r7, r3
 8000dce:	0fc4      	lsrs	r4, r0, #31
 8000dd0:	0e12      	lsrs	r2, r2, #24
 8000dd2:	0fc9      	lsrs	r1, r1, #31
 8000dd4:	09b6      	lsrs	r6, r6, #6
 8000dd6:	2aff      	cmp	r2, #255	; 0xff
 8000dd8:	d05b      	beq.n	8000e92 <__aeabi_fsub+0xe2>
 8000dda:	2001      	movs	r0, #1
 8000ddc:	4041      	eors	r1, r0
 8000dde:	428c      	cmp	r4, r1
 8000de0:	d039      	beq.n	8000e56 <__aeabi_fsub+0xa6>
 8000de2:	1aa8      	subs	r0, r5, r2
 8000de4:	2800      	cmp	r0, #0
 8000de6:	dd5a      	ble.n	8000e9e <__aeabi_fsub+0xee>
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	d06a      	beq.n	8000ec2 <__aeabi_fsub+0x112>
 8000dec:	2dff      	cmp	r5, #255	; 0xff
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x42>
 8000df0:	e0d9      	b.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000df2:	2280      	movs	r2, #128	; 0x80
 8000df4:	04d2      	lsls	r2, r2, #19
 8000df6:	4316      	orrs	r6, r2
 8000df8:	281b      	cmp	r0, #27
 8000dfa:	dc00      	bgt.n	8000dfe <__aeabi_fsub+0x4e>
 8000dfc:	e0e9      	b.n	8000fd2 <__aeabi_fsub+0x222>
 8000dfe:	2001      	movs	r0, #1
 8000e00:	4663      	mov	r3, ip
 8000e02:	1a18      	subs	r0, r3, r0
 8000e04:	0143      	lsls	r3, r0, #5
 8000e06:	d400      	bmi.n	8000e0a <__aeabi_fsub+0x5a>
 8000e08:	e0b4      	b.n	8000f74 <__aeabi_fsub+0x1c4>
 8000e0a:	0180      	lsls	r0, r0, #6
 8000e0c:	0987      	lsrs	r7, r0, #6
 8000e0e:	0038      	movs	r0, r7
 8000e10:	f000 fa2c 	bl	800126c <__clzsi2>
 8000e14:	3805      	subs	r0, #5
 8000e16:	4087      	lsls	r7, r0
 8000e18:	4285      	cmp	r5, r0
 8000e1a:	dc00      	bgt.n	8000e1e <__aeabi_fsub+0x6e>
 8000e1c:	e0cc      	b.n	8000fb8 <__aeabi_fsub+0x208>
 8000e1e:	1a2d      	subs	r5, r5, r0
 8000e20:	48b5      	ldr	r0, [pc, #724]	; (80010f8 <__aeabi_fsub+0x348>)
 8000e22:	4038      	ands	r0, r7
 8000e24:	0743      	lsls	r3, r0, #29
 8000e26:	d004      	beq.n	8000e32 <__aeabi_fsub+0x82>
 8000e28:	230f      	movs	r3, #15
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_fsub+0x82>
 8000e30:	3004      	adds	r0, #4
 8000e32:	0143      	lsls	r3, r0, #5
 8000e34:	d400      	bmi.n	8000e38 <__aeabi_fsub+0x88>
 8000e36:	e0a0      	b.n	8000f7a <__aeabi_fsub+0x1ca>
 8000e38:	1c6a      	adds	r2, r5, #1
 8000e3a:	2dfe      	cmp	r5, #254	; 0xfe
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x90>
 8000e3e:	e08d      	b.n	8000f5c <__aeabi_fsub+0x1ac>
 8000e40:	0180      	lsls	r0, r0, #6
 8000e42:	0a47      	lsrs	r7, r0, #9
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	05d0      	lsls	r0, r2, #23
 8000e48:	4338      	orrs	r0, r7
 8000e4a:	07e4      	lsls	r4, r4, #31
 8000e4c:	4320      	orrs	r0, r4
 8000e4e:	bcc0      	pop	{r6, r7}
 8000e50:	46b9      	mov	r9, r7
 8000e52:	46b0      	mov	r8, r6
 8000e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e56:	1aa8      	subs	r0, r5, r2
 8000e58:	4680      	mov	r8, r0
 8000e5a:	2800      	cmp	r0, #0
 8000e5c:	dd45      	ble.n	8000eea <__aeabi_fsub+0x13a>
 8000e5e:	2a00      	cmp	r2, #0
 8000e60:	d070      	beq.n	8000f44 <__aeabi_fsub+0x194>
 8000e62:	2dff      	cmp	r5, #255	; 0xff
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0xb8>
 8000e66:	e09e      	b.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	04db      	lsls	r3, r3, #19
 8000e6c:	431e      	orrs	r6, r3
 8000e6e:	4643      	mov	r3, r8
 8000e70:	2b1b      	cmp	r3, #27
 8000e72:	dc00      	bgt.n	8000e76 <__aeabi_fsub+0xc6>
 8000e74:	e0d2      	b.n	800101c <__aeabi_fsub+0x26c>
 8000e76:	2001      	movs	r0, #1
 8000e78:	4460      	add	r0, ip
 8000e7a:	0143      	lsls	r3, r0, #5
 8000e7c:	d57a      	bpl.n	8000f74 <__aeabi_fsub+0x1c4>
 8000e7e:	3501      	adds	r5, #1
 8000e80:	2dff      	cmp	r5, #255	; 0xff
 8000e82:	d06b      	beq.n	8000f5c <__aeabi_fsub+0x1ac>
 8000e84:	2301      	movs	r3, #1
 8000e86:	4a9d      	ldr	r2, [pc, #628]	; (80010fc <__aeabi_fsub+0x34c>)
 8000e88:	4003      	ands	r3, r0
 8000e8a:	0840      	lsrs	r0, r0, #1
 8000e8c:	4010      	ands	r0, r2
 8000e8e:	4318      	orrs	r0, r3
 8000e90:	e7c8      	b.n	8000e24 <__aeabi_fsub+0x74>
 8000e92:	2e00      	cmp	r6, #0
 8000e94:	d020      	beq.n	8000ed8 <__aeabi_fsub+0x128>
 8000e96:	428c      	cmp	r4, r1
 8000e98:	d023      	beq.n	8000ee2 <__aeabi_fsub+0x132>
 8000e9a:	0028      	movs	r0, r5
 8000e9c:	38ff      	subs	r0, #255	; 0xff
 8000e9e:	2800      	cmp	r0, #0
 8000ea0:	d039      	beq.n	8000f16 <__aeabi_fsub+0x166>
 8000ea2:	1b57      	subs	r7, r2, r5
 8000ea4:	2d00      	cmp	r5, #0
 8000ea6:	d000      	beq.n	8000eaa <__aeabi_fsub+0xfa>
 8000ea8:	e09d      	b.n	8000fe6 <__aeabi_fsub+0x236>
 8000eaa:	4663      	mov	r3, ip
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d100      	bne.n	8000eb2 <__aeabi_fsub+0x102>
 8000eb0:	e0db      	b.n	800106a <__aeabi_fsub+0x2ba>
 8000eb2:	1e7b      	subs	r3, r7, #1
 8000eb4:	2f01      	cmp	r7, #1
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fsub+0x10a>
 8000eb8:	e10d      	b.n	80010d6 <__aeabi_fsub+0x326>
 8000eba:	2fff      	cmp	r7, #255	; 0xff
 8000ebc:	d071      	beq.n	8000fa2 <__aeabi_fsub+0x1f2>
 8000ebe:	001f      	movs	r7, r3
 8000ec0:	e098      	b.n	8000ff4 <__aeabi_fsub+0x244>
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_fsub+0x118>
 8000ec6:	e0a7      	b.n	8001018 <__aeabi_fsub+0x268>
 8000ec8:	1e42      	subs	r2, r0, #1
 8000eca:	2801      	cmp	r0, #1
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x120>
 8000ece:	e0e6      	b.n	800109e <__aeabi_fsub+0x2ee>
 8000ed0:	28ff      	cmp	r0, #255	; 0xff
 8000ed2:	d068      	beq.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000ed4:	0010      	movs	r0, r2
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fsub+0x48>
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4041      	eors	r1, r0
 8000edc:	42a1      	cmp	r1, r4
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_fsub+0x132>
 8000ee0:	e77f      	b.n	8000de2 <__aeabi_fsub+0x32>
 8000ee2:	20ff      	movs	r0, #255	; 0xff
 8000ee4:	4240      	negs	r0, r0
 8000ee6:	4680      	mov	r8, r0
 8000ee8:	44a8      	add	r8, r5
 8000eea:	4640      	mov	r0, r8
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d038      	beq.n	8000f62 <__aeabi_fsub+0x1b2>
 8000ef0:	1b51      	subs	r1, r2, r5
 8000ef2:	2d00      	cmp	r5, #0
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x148>
 8000ef6:	e0ae      	b.n	8001056 <__aeabi_fsub+0x2a6>
 8000ef8:	2aff      	cmp	r2, #255	; 0xff
 8000efa:	d100      	bne.n	8000efe <__aeabi_fsub+0x14e>
 8000efc:	e0df      	b.n	80010be <__aeabi_fsub+0x30e>
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	4660      	mov	r0, ip
 8000f02:	04db      	lsls	r3, r3, #19
 8000f04:	4318      	orrs	r0, r3
 8000f06:	4684      	mov	ip, r0
 8000f08:	291b      	cmp	r1, #27
 8000f0a:	dc00      	bgt.n	8000f0e <__aeabi_fsub+0x15e>
 8000f0c:	e0d9      	b.n	80010c2 <__aeabi_fsub+0x312>
 8000f0e:	2001      	movs	r0, #1
 8000f10:	0015      	movs	r5, r2
 8000f12:	1980      	adds	r0, r0, r6
 8000f14:	e7b1      	b.n	8000e7a <__aeabi_fsub+0xca>
 8000f16:	20fe      	movs	r0, #254	; 0xfe
 8000f18:	1c6a      	adds	r2, r5, #1
 8000f1a:	4210      	tst	r0, r2
 8000f1c:	d171      	bne.n	8001002 <__aeabi_fsub+0x252>
 8000f1e:	2d00      	cmp	r5, #0
 8000f20:	d000      	beq.n	8000f24 <__aeabi_fsub+0x174>
 8000f22:	e0a6      	b.n	8001072 <__aeabi_fsub+0x2c2>
 8000f24:	4663      	mov	r3, ip
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d100      	bne.n	8000f2c <__aeabi_fsub+0x17c>
 8000f2a:	e0d9      	b.n	80010e0 <__aeabi_fsub+0x330>
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2e00      	cmp	r6, #0
 8000f30:	d100      	bne.n	8000f34 <__aeabi_fsub+0x184>
 8000f32:	e788      	b.n	8000e46 <__aeabi_fsub+0x96>
 8000f34:	1b98      	subs	r0, r3, r6
 8000f36:	0143      	lsls	r3, r0, #5
 8000f38:	d400      	bmi.n	8000f3c <__aeabi_fsub+0x18c>
 8000f3a:	e0e1      	b.n	8001100 <__aeabi_fsub+0x350>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	000c      	movs	r4, r1
 8000f40:	1af0      	subs	r0, r6, r3
 8000f42:	e76f      	b.n	8000e24 <__aeabi_fsub+0x74>
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	d100      	bne.n	8000f4a <__aeabi_fsub+0x19a>
 8000f48:	e0b7      	b.n	80010ba <__aeabi_fsub+0x30a>
 8000f4a:	0002      	movs	r2, r0
 8000f4c:	3a01      	subs	r2, #1
 8000f4e:	2801      	cmp	r0, #1
 8000f50:	d100      	bne.n	8000f54 <__aeabi_fsub+0x1a4>
 8000f52:	e09c      	b.n	800108e <__aeabi_fsub+0x2de>
 8000f54:	28ff      	cmp	r0, #255	; 0xff
 8000f56:	d026      	beq.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000f58:	4690      	mov	r8, r2
 8000f5a:	e788      	b.n	8000e6e <__aeabi_fsub+0xbe>
 8000f5c:	22ff      	movs	r2, #255	; 0xff
 8000f5e:	2700      	movs	r7, #0
 8000f60:	e771      	b.n	8000e46 <__aeabi_fsub+0x96>
 8000f62:	20fe      	movs	r0, #254	; 0xfe
 8000f64:	1c6a      	adds	r2, r5, #1
 8000f66:	4210      	tst	r0, r2
 8000f68:	d064      	beq.n	8001034 <__aeabi_fsub+0x284>
 8000f6a:	2aff      	cmp	r2, #255	; 0xff
 8000f6c:	d0f6      	beq.n	8000f5c <__aeabi_fsub+0x1ac>
 8000f6e:	0015      	movs	r5, r2
 8000f70:	4466      	add	r6, ip
 8000f72:	0870      	lsrs	r0, r6, #1
 8000f74:	0743      	lsls	r3, r0, #29
 8000f76:	d000      	beq.n	8000f7a <__aeabi_fsub+0x1ca>
 8000f78:	e756      	b.n	8000e28 <__aeabi_fsub+0x78>
 8000f7a:	08c3      	lsrs	r3, r0, #3
 8000f7c:	2dff      	cmp	r5, #255	; 0xff
 8000f7e:	d012      	beq.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000f80:	025b      	lsls	r3, r3, #9
 8000f82:	0a5f      	lsrs	r7, r3, #9
 8000f84:	b2ea      	uxtb	r2, r5
 8000f86:	e75e      	b.n	8000e46 <__aeabi_fsub+0x96>
 8000f88:	4662      	mov	r2, ip
 8000f8a:	2a00      	cmp	r2, #0
 8000f8c:	d100      	bne.n	8000f90 <__aeabi_fsub+0x1e0>
 8000f8e:	e096      	b.n	80010be <__aeabi_fsub+0x30e>
 8000f90:	2e00      	cmp	r6, #0
 8000f92:	d008      	beq.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	03d2      	lsls	r2, r2, #15
 8000f98:	4213      	tst	r3, r2
 8000f9a:	d004      	beq.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000f9c:	4648      	mov	r0, r9
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d101      	bne.n	8000fa6 <__aeabi_fsub+0x1f6>
 8000fa2:	000c      	movs	r4, r1
 8000fa4:	464b      	mov	r3, r9
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0d8      	beq.n	8000f5c <__aeabi_fsub+0x1ac>
 8000faa:	2780      	movs	r7, #128	; 0x80
 8000fac:	03ff      	lsls	r7, r7, #15
 8000fae:	431f      	orrs	r7, r3
 8000fb0:	027f      	lsls	r7, r7, #9
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	0a7f      	lsrs	r7, r7, #9
 8000fb6:	e746      	b.n	8000e46 <__aeabi_fsub+0x96>
 8000fb8:	2320      	movs	r3, #32
 8000fba:	003a      	movs	r2, r7
 8000fbc:	1b45      	subs	r5, r0, r5
 8000fbe:	0038      	movs	r0, r7
 8000fc0:	3501      	adds	r5, #1
 8000fc2:	40ea      	lsrs	r2, r5
 8000fc4:	1b5d      	subs	r5, r3, r5
 8000fc6:	40a8      	lsls	r0, r5
 8000fc8:	1e43      	subs	r3, r0, #1
 8000fca:	4198      	sbcs	r0, r3
 8000fcc:	2500      	movs	r5, #0
 8000fce:	4310      	orrs	r0, r2
 8000fd0:	e728      	b.n	8000e24 <__aeabi_fsub+0x74>
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	1a1b      	subs	r3, r3, r0
 8000fd6:	0032      	movs	r2, r6
 8000fd8:	409e      	lsls	r6, r3
 8000fda:	40c2      	lsrs	r2, r0
 8000fdc:	0030      	movs	r0, r6
 8000fde:	1e43      	subs	r3, r0, #1
 8000fe0:	4198      	sbcs	r0, r3
 8000fe2:	4310      	orrs	r0, r2
 8000fe4:	e70c      	b.n	8000e00 <__aeabi_fsub+0x50>
 8000fe6:	2aff      	cmp	r2, #255	; 0xff
 8000fe8:	d0db      	beq.n	8000fa2 <__aeabi_fsub+0x1f2>
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	4660      	mov	r0, ip
 8000fee:	04db      	lsls	r3, r3, #19
 8000ff0:	4318      	orrs	r0, r3
 8000ff2:	4684      	mov	ip, r0
 8000ff4:	2f1b      	cmp	r7, #27
 8000ff6:	dd56      	ble.n	80010a6 <__aeabi_fsub+0x2f6>
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	000c      	movs	r4, r1
 8000ffc:	0015      	movs	r5, r2
 8000ffe:	1a30      	subs	r0, r6, r0
 8001000:	e700      	b.n	8000e04 <__aeabi_fsub+0x54>
 8001002:	4663      	mov	r3, ip
 8001004:	1b9f      	subs	r7, r3, r6
 8001006:	017b      	lsls	r3, r7, #5
 8001008:	d43d      	bmi.n	8001086 <__aeabi_fsub+0x2d6>
 800100a:	2f00      	cmp	r7, #0
 800100c:	d000      	beq.n	8001010 <__aeabi_fsub+0x260>
 800100e:	e6fe      	b.n	8000e0e <__aeabi_fsub+0x5e>
 8001010:	2400      	movs	r4, #0
 8001012:	2200      	movs	r2, #0
 8001014:	2700      	movs	r7, #0
 8001016:	e716      	b.n	8000e46 <__aeabi_fsub+0x96>
 8001018:	0005      	movs	r5, r0
 800101a:	e7af      	b.n	8000f7c <__aeabi_fsub+0x1cc>
 800101c:	0032      	movs	r2, r6
 800101e:	4643      	mov	r3, r8
 8001020:	4641      	mov	r1, r8
 8001022:	40da      	lsrs	r2, r3
 8001024:	2320      	movs	r3, #32
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	409e      	lsls	r6, r3
 800102a:	0030      	movs	r0, r6
 800102c:	1e43      	subs	r3, r0, #1
 800102e:	4198      	sbcs	r0, r3
 8001030:	4310      	orrs	r0, r2
 8001032:	e721      	b.n	8000e78 <__aeabi_fsub+0xc8>
 8001034:	2d00      	cmp	r5, #0
 8001036:	d1a7      	bne.n	8000f88 <__aeabi_fsub+0x1d8>
 8001038:	4663      	mov	r3, ip
 800103a:	2b00      	cmp	r3, #0
 800103c:	d059      	beq.n	80010f2 <__aeabi_fsub+0x342>
 800103e:	2200      	movs	r2, #0
 8001040:	2e00      	cmp	r6, #0
 8001042:	d100      	bne.n	8001046 <__aeabi_fsub+0x296>
 8001044:	e6ff      	b.n	8000e46 <__aeabi_fsub+0x96>
 8001046:	0030      	movs	r0, r6
 8001048:	4460      	add	r0, ip
 800104a:	0143      	lsls	r3, r0, #5
 800104c:	d592      	bpl.n	8000f74 <__aeabi_fsub+0x1c4>
 800104e:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <__aeabi_fsub+0x348>)
 8001050:	3501      	adds	r5, #1
 8001052:	4018      	ands	r0, r3
 8001054:	e78e      	b.n	8000f74 <__aeabi_fsub+0x1c4>
 8001056:	4663      	mov	r3, ip
 8001058:	2b00      	cmp	r3, #0
 800105a:	d047      	beq.n	80010ec <__aeabi_fsub+0x33c>
 800105c:	1e4b      	subs	r3, r1, #1
 800105e:	2901      	cmp	r1, #1
 8001060:	d015      	beq.n	800108e <__aeabi_fsub+0x2de>
 8001062:	29ff      	cmp	r1, #255	; 0xff
 8001064:	d02b      	beq.n	80010be <__aeabi_fsub+0x30e>
 8001066:	0019      	movs	r1, r3
 8001068:	e74e      	b.n	8000f08 <__aeabi_fsub+0x158>
 800106a:	000c      	movs	r4, r1
 800106c:	464b      	mov	r3, r9
 800106e:	003d      	movs	r5, r7
 8001070:	e784      	b.n	8000f7c <__aeabi_fsub+0x1cc>
 8001072:	4662      	mov	r2, ip
 8001074:	2a00      	cmp	r2, #0
 8001076:	d18b      	bne.n	8000f90 <__aeabi_fsub+0x1e0>
 8001078:	2e00      	cmp	r6, #0
 800107a:	d192      	bne.n	8000fa2 <__aeabi_fsub+0x1f2>
 800107c:	2780      	movs	r7, #128	; 0x80
 800107e:	2400      	movs	r4, #0
 8001080:	22ff      	movs	r2, #255	; 0xff
 8001082:	03ff      	lsls	r7, r7, #15
 8001084:	e6df      	b.n	8000e46 <__aeabi_fsub+0x96>
 8001086:	4663      	mov	r3, ip
 8001088:	000c      	movs	r4, r1
 800108a:	1af7      	subs	r7, r6, r3
 800108c:	e6bf      	b.n	8000e0e <__aeabi_fsub+0x5e>
 800108e:	0030      	movs	r0, r6
 8001090:	4460      	add	r0, ip
 8001092:	2501      	movs	r5, #1
 8001094:	0143      	lsls	r3, r0, #5
 8001096:	d400      	bmi.n	800109a <__aeabi_fsub+0x2ea>
 8001098:	e76c      	b.n	8000f74 <__aeabi_fsub+0x1c4>
 800109a:	2502      	movs	r5, #2
 800109c:	e6f2      	b.n	8000e84 <__aeabi_fsub+0xd4>
 800109e:	4663      	mov	r3, ip
 80010a0:	2501      	movs	r5, #1
 80010a2:	1b98      	subs	r0, r3, r6
 80010a4:	e6ae      	b.n	8000e04 <__aeabi_fsub+0x54>
 80010a6:	2320      	movs	r3, #32
 80010a8:	4664      	mov	r4, ip
 80010aa:	4660      	mov	r0, ip
 80010ac:	40fc      	lsrs	r4, r7
 80010ae:	1bdf      	subs	r7, r3, r7
 80010b0:	40b8      	lsls	r0, r7
 80010b2:	1e43      	subs	r3, r0, #1
 80010b4:	4198      	sbcs	r0, r3
 80010b6:	4320      	orrs	r0, r4
 80010b8:	e79f      	b.n	8000ffa <__aeabi_fsub+0x24a>
 80010ba:	0005      	movs	r5, r0
 80010bc:	e75e      	b.n	8000f7c <__aeabi_fsub+0x1cc>
 80010be:	464b      	mov	r3, r9
 80010c0:	e771      	b.n	8000fa6 <__aeabi_fsub+0x1f6>
 80010c2:	2320      	movs	r3, #32
 80010c4:	4665      	mov	r5, ip
 80010c6:	4660      	mov	r0, ip
 80010c8:	40cd      	lsrs	r5, r1
 80010ca:	1a59      	subs	r1, r3, r1
 80010cc:	4088      	lsls	r0, r1
 80010ce:	1e43      	subs	r3, r0, #1
 80010d0:	4198      	sbcs	r0, r3
 80010d2:	4328      	orrs	r0, r5
 80010d4:	e71c      	b.n	8000f10 <__aeabi_fsub+0x160>
 80010d6:	4663      	mov	r3, ip
 80010d8:	000c      	movs	r4, r1
 80010da:	2501      	movs	r5, #1
 80010dc:	1af0      	subs	r0, r6, r3
 80010de:	e691      	b.n	8000e04 <__aeabi_fsub+0x54>
 80010e0:	2e00      	cmp	r6, #0
 80010e2:	d095      	beq.n	8001010 <__aeabi_fsub+0x260>
 80010e4:	000c      	movs	r4, r1
 80010e6:	464f      	mov	r7, r9
 80010e8:	2200      	movs	r2, #0
 80010ea:	e6ac      	b.n	8000e46 <__aeabi_fsub+0x96>
 80010ec:	464b      	mov	r3, r9
 80010ee:	000d      	movs	r5, r1
 80010f0:	e744      	b.n	8000f7c <__aeabi_fsub+0x1cc>
 80010f2:	464f      	mov	r7, r9
 80010f4:	2200      	movs	r2, #0
 80010f6:	e6a6      	b.n	8000e46 <__aeabi_fsub+0x96>
 80010f8:	fbffffff 	.word	0xfbffffff
 80010fc:	7dffffff 	.word	0x7dffffff
 8001100:	2800      	cmp	r0, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_fsub+0x356>
 8001104:	e736      	b.n	8000f74 <__aeabi_fsub+0x1c4>
 8001106:	2400      	movs	r4, #0
 8001108:	2700      	movs	r7, #0
 800110a:	e69c      	b.n	8000e46 <__aeabi_fsub+0x96>

0800110c <__aeabi_f2iz>:
 800110c:	0241      	lsls	r1, r0, #9
 800110e:	0042      	lsls	r2, r0, #1
 8001110:	0fc3      	lsrs	r3, r0, #31
 8001112:	0a49      	lsrs	r1, r1, #9
 8001114:	2000      	movs	r0, #0
 8001116:	0e12      	lsrs	r2, r2, #24
 8001118:	2a7e      	cmp	r2, #126	; 0x7e
 800111a:	dd03      	ble.n	8001124 <__aeabi_f2iz+0x18>
 800111c:	2a9d      	cmp	r2, #157	; 0x9d
 800111e:	dd02      	ble.n	8001126 <__aeabi_f2iz+0x1a>
 8001120:	4a09      	ldr	r2, [pc, #36]	; (8001148 <__aeabi_f2iz+0x3c>)
 8001122:	1898      	adds	r0, r3, r2
 8001124:	4770      	bx	lr
 8001126:	2080      	movs	r0, #128	; 0x80
 8001128:	0400      	lsls	r0, r0, #16
 800112a:	4301      	orrs	r1, r0
 800112c:	2a95      	cmp	r2, #149	; 0x95
 800112e:	dc07      	bgt.n	8001140 <__aeabi_f2iz+0x34>
 8001130:	2096      	movs	r0, #150	; 0x96
 8001132:	1a82      	subs	r2, r0, r2
 8001134:	40d1      	lsrs	r1, r2
 8001136:	4248      	negs	r0, r1
 8001138:	2b00      	cmp	r3, #0
 800113a:	d1f3      	bne.n	8001124 <__aeabi_f2iz+0x18>
 800113c:	0008      	movs	r0, r1
 800113e:	e7f1      	b.n	8001124 <__aeabi_f2iz+0x18>
 8001140:	3a96      	subs	r2, #150	; 0x96
 8001142:	4091      	lsls	r1, r2
 8001144:	e7f7      	b.n	8001136 <__aeabi_f2iz+0x2a>
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	7fffffff 	.word	0x7fffffff

0800114c <__aeabi_i2f>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	2800      	cmp	r0, #0
 8001150:	d013      	beq.n	800117a <__aeabi_i2f+0x2e>
 8001152:	17c3      	asrs	r3, r0, #31
 8001154:	18c6      	adds	r6, r0, r3
 8001156:	405e      	eors	r6, r3
 8001158:	0fc4      	lsrs	r4, r0, #31
 800115a:	0030      	movs	r0, r6
 800115c:	f000 f886 	bl	800126c <__clzsi2>
 8001160:	239e      	movs	r3, #158	; 0x9e
 8001162:	0005      	movs	r5, r0
 8001164:	1a1b      	subs	r3, r3, r0
 8001166:	2b96      	cmp	r3, #150	; 0x96
 8001168:	dc0f      	bgt.n	800118a <__aeabi_i2f+0x3e>
 800116a:	2808      	cmp	r0, #8
 800116c:	dd01      	ble.n	8001172 <__aeabi_i2f+0x26>
 800116e:	3d08      	subs	r5, #8
 8001170:	40ae      	lsls	r6, r5
 8001172:	0276      	lsls	r6, r6, #9
 8001174:	0a76      	lsrs	r6, r6, #9
 8001176:	b2d8      	uxtb	r0, r3
 8001178:	e002      	b.n	8001180 <__aeabi_i2f+0x34>
 800117a:	2400      	movs	r4, #0
 800117c:	2000      	movs	r0, #0
 800117e:	2600      	movs	r6, #0
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	4330      	orrs	r0, r6
 8001184:	07e4      	lsls	r4, r4, #31
 8001186:	4320      	orrs	r0, r4
 8001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800118a:	2b99      	cmp	r3, #153	; 0x99
 800118c:	dd0c      	ble.n	80011a8 <__aeabi_i2f+0x5c>
 800118e:	2205      	movs	r2, #5
 8001190:	0031      	movs	r1, r6
 8001192:	1a12      	subs	r2, r2, r0
 8001194:	40d1      	lsrs	r1, r2
 8001196:	000a      	movs	r2, r1
 8001198:	0001      	movs	r1, r0
 800119a:	0030      	movs	r0, r6
 800119c:	311b      	adds	r1, #27
 800119e:	4088      	lsls	r0, r1
 80011a0:	1e41      	subs	r1, r0, #1
 80011a2:	4188      	sbcs	r0, r1
 80011a4:	4302      	orrs	r2, r0
 80011a6:	0016      	movs	r6, r2
 80011a8:	2d05      	cmp	r5, #5
 80011aa:	dc12      	bgt.n	80011d2 <__aeabi_i2f+0x86>
 80011ac:	0031      	movs	r1, r6
 80011ae:	4f0d      	ldr	r7, [pc, #52]	; (80011e4 <__aeabi_i2f+0x98>)
 80011b0:	4039      	ands	r1, r7
 80011b2:	0772      	lsls	r2, r6, #29
 80011b4:	d009      	beq.n	80011ca <__aeabi_i2f+0x7e>
 80011b6:	200f      	movs	r0, #15
 80011b8:	4030      	ands	r0, r6
 80011ba:	2804      	cmp	r0, #4
 80011bc:	d005      	beq.n	80011ca <__aeabi_i2f+0x7e>
 80011be:	3104      	adds	r1, #4
 80011c0:	014a      	lsls	r2, r1, #5
 80011c2:	d502      	bpl.n	80011ca <__aeabi_i2f+0x7e>
 80011c4:	239f      	movs	r3, #159	; 0x9f
 80011c6:	4039      	ands	r1, r7
 80011c8:	1b5b      	subs	r3, r3, r5
 80011ca:	0189      	lsls	r1, r1, #6
 80011cc:	0a4e      	lsrs	r6, r1, #9
 80011ce:	b2d8      	uxtb	r0, r3
 80011d0:	e7d6      	b.n	8001180 <__aeabi_i2f+0x34>
 80011d2:	1f6a      	subs	r2, r5, #5
 80011d4:	4096      	lsls	r6, r2
 80011d6:	0031      	movs	r1, r6
 80011d8:	4f02      	ldr	r7, [pc, #8]	; (80011e4 <__aeabi_i2f+0x98>)
 80011da:	4039      	ands	r1, r7
 80011dc:	0772      	lsls	r2, r6, #29
 80011de:	d0f4      	beq.n	80011ca <__aeabi_i2f+0x7e>
 80011e0:	e7e9      	b.n	80011b6 <__aeabi_i2f+0x6a>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	fbffffff 	.word	0xfbffffff

080011e8 <__aeabi_ui2f>:
 80011e8:	b570      	push	{r4, r5, r6, lr}
 80011ea:	1e05      	subs	r5, r0, #0
 80011ec:	d00e      	beq.n	800120c <__aeabi_ui2f+0x24>
 80011ee:	f000 f83d 	bl	800126c <__clzsi2>
 80011f2:	239e      	movs	r3, #158	; 0x9e
 80011f4:	0004      	movs	r4, r0
 80011f6:	1a1b      	subs	r3, r3, r0
 80011f8:	2b96      	cmp	r3, #150	; 0x96
 80011fa:	dc0c      	bgt.n	8001216 <__aeabi_ui2f+0x2e>
 80011fc:	2808      	cmp	r0, #8
 80011fe:	dd01      	ble.n	8001204 <__aeabi_ui2f+0x1c>
 8001200:	3c08      	subs	r4, #8
 8001202:	40a5      	lsls	r5, r4
 8001204:	026d      	lsls	r5, r5, #9
 8001206:	0a6d      	lsrs	r5, r5, #9
 8001208:	b2d8      	uxtb	r0, r3
 800120a:	e001      	b.n	8001210 <__aeabi_ui2f+0x28>
 800120c:	2000      	movs	r0, #0
 800120e:	2500      	movs	r5, #0
 8001210:	05c0      	lsls	r0, r0, #23
 8001212:	4328      	orrs	r0, r5
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	2b99      	cmp	r3, #153	; 0x99
 8001218:	dd09      	ble.n	800122e <__aeabi_ui2f+0x46>
 800121a:	0002      	movs	r2, r0
 800121c:	0029      	movs	r1, r5
 800121e:	321b      	adds	r2, #27
 8001220:	4091      	lsls	r1, r2
 8001222:	1e4a      	subs	r2, r1, #1
 8001224:	4191      	sbcs	r1, r2
 8001226:	2205      	movs	r2, #5
 8001228:	1a12      	subs	r2, r2, r0
 800122a:	40d5      	lsrs	r5, r2
 800122c:	430d      	orrs	r5, r1
 800122e:	2c05      	cmp	r4, #5
 8001230:	dc12      	bgt.n	8001258 <__aeabi_ui2f+0x70>
 8001232:	0029      	movs	r1, r5
 8001234:	4e0c      	ldr	r6, [pc, #48]	; (8001268 <__aeabi_ui2f+0x80>)
 8001236:	4031      	ands	r1, r6
 8001238:	076a      	lsls	r2, r5, #29
 800123a:	d009      	beq.n	8001250 <__aeabi_ui2f+0x68>
 800123c:	200f      	movs	r0, #15
 800123e:	4028      	ands	r0, r5
 8001240:	2804      	cmp	r0, #4
 8001242:	d005      	beq.n	8001250 <__aeabi_ui2f+0x68>
 8001244:	3104      	adds	r1, #4
 8001246:	014a      	lsls	r2, r1, #5
 8001248:	d502      	bpl.n	8001250 <__aeabi_ui2f+0x68>
 800124a:	239f      	movs	r3, #159	; 0x9f
 800124c:	4031      	ands	r1, r6
 800124e:	1b1b      	subs	r3, r3, r4
 8001250:	0189      	lsls	r1, r1, #6
 8001252:	0a4d      	lsrs	r5, r1, #9
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	e7db      	b.n	8001210 <__aeabi_ui2f+0x28>
 8001258:	1f62      	subs	r2, r4, #5
 800125a:	4095      	lsls	r5, r2
 800125c:	0029      	movs	r1, r5
 800125e:	4e02      	ldr	r6, [pc, #8]	; (8001268 <__aeabi_ui2f+0x80>)
 8001260:	4031      	ands	r1, r6
 8001262:	076a      	lsls	r2, r5, #29
 8001264:	d0f4      	beq.n	8001250 <__aeabi_ui2f+0x68>
 8001266:	e7e9      	b.n	800123c <__aeabi_ui2f+0x54>
 8001268:	fbffffff 	.word	0xfbffffff

0800126c <__clzsi2>:
 800126c:	211c      	movs	r1, #28
 800126e:	2301      	movs	r3, #1
 8001270:	041b      	lsls	r3, r3, #16
 8001272:	4298      	cmp	r0, r3
 8001274:	d301      	bcc.n	800127a <__clzsi2+0xe>
 8001276:	0c00      	lsrs	r0, r0, #16
 8001278:	3910      	subs	r1, #16
 800127a:	0a1b      	lsrs	r3, r3, #8
 800127c:	4298      	cmp	r0, r3
 800127e:	d301      	bcc.n	8001284 <__clzsi2+0x18>
 8001280:	0a00      	lsrs	r0, r0, #8
 8001282:	3908      	subs	r1, #8
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	4298      	cmp	r0, r3
 8001288:	d301      	bcc.n	800128e <__clzsi2+0x22>
 800128a:	0900      	lsrs	r0, r0, #4
 800128c:	3904      	subs	r1, #4
 800128e:	a202      	add	r2, pc, #8	; (adr r2, 8001298 <__clzsi2+0x2c>)
 8001290:	5c10      	ldrb	r0, [r2, r0]
 8001292:	1840      	adds	r0, r0, r1
 8001294:	4770      	bx	lr
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	02020304 	.word	0x02020304
 800129c:	01010101 	.word	0x01010101
	...

080012a8 <ADC_init>:

uint16_t get_adc2 (void) {
	return  adc_dat.adc_2;
}*/

void ADC_init (void){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER4);      // установить аналог мод
 80012ac:	2390      	movs	r3, #144	; 0x90
 80012ae:	05db      	lsls	r3, r3, #23
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2390      	movs	r3, #144	; 0x90
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	21c0      	movs	r1, #192	; 0xc0
 80012b8:	0089      	lsls	r1, r1, #2
 80012ba:	430a      	orrs	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
	//SET_BIT(GPIOA->MODER, GPIO_MODER_MODER5);    // установить аналог мод
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_ADCEN);      // включим тактирование
 80012be:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <ADC_init+0x110>)
 80012c0:	699a      	ldr	r2, [r3, #24]
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <ADC_init+0x110>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0089      	lsls	r1, r1, #2
 80012c8:	430a      	orrs	r2, r1
 80012ca:	619a      	str	r2, [r3, #24]
	SET_BIT(ADC1->SMPR, 0b011 << ADC_SMPR_SMP_Pos);// Количество циклов преобразования
 80012cc:	4b3b      	ldr	r3, [pc, #236]	; (80013bc <ADC_init+0x114>)
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	4b3a      	ldr	r3, [pc, #232]	; (80013bc <ADC_init+0x114>)
 80012d2:	2103      	movs	r1, #3
 80012d4:	430a      	orrs	r2, r1
 80012d6:	615a      	str	r2, [r3, #20]
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL4);      // выбор канала 4
 80012d8:	4b38      	ldr	r3, [pc, #224]	; (80013bc <ADC_init+0x114>)
 80012da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012dc:	4b37      	ldr	r3, [pc, #220]	; (80013bc <ADC_init+0x114>)
 80012de:	2110      	movs	r1, #16
 80012e0:	430a      	orrs	r2, r1
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL5);      // выбор канала 5
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <ADC_init+0x114>)
 80012e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e8:	4b34      	ldr	r3, [pc, #208]	; (80013bc <ADC_init+0x114>)
 80012ea:	2120      	movs	r1, #32
 80012ec:	430a      	orrs	r2, r1
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
//	SET_BIT(ADC1->CHSELR, ADC_CHSELR_CHSEL16);     // выбор канала temperature
//	SET_BIT(ADC->CCR, ADC_CCR_TSEN);               // температурный датчик включить
	SET_BIT(ADC1->CR, ADC_CR_ADCAL);               // Запустим калибровку
 80012f0:	4b32      	ldr	r3, [pc, #200]	; (80013bc <ADC_init+0x114>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4b31      	ldr	r3, [pc, #196]	; (80013bc <ADC_init+0x114>)
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	0609      	lsls	r1, r1, #24
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]
	while (READ_BIT(ADC1->CR, ADC_CR_ADCAL));      // Дождемся поднятия флага о готовности
 80012fe:	46c0      	nop			; (mov r8, r8)
 8001300:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <ADC_init+0x114>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b00      	cmp	r3, #0
 8001306:	dbfb      	blt.n	8001300 <ADC_init+0x58>
	//SET_BIT(ADC1->IER, ADC_IER_EOCIE);           // включить прерывание
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_CONT);          // постоянный режим преобразования
 8001308:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <ADC_init+0x114>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4b2b      	ldr	r3, [pc, #172]	; (80013bc <ADC_init+0x114>)
 800130e:	2180      	movs	r1, #128	; 0x80
 8001310:	0189      	lsls	r1, r1, #6
 8001312:	430a      	orrs	r2, r1
 8001314:	60da      	str	r2, [r3, #12]
	//SET_BIT(ADC1->CFGR1, ADC_CFGR1_ALIGN);       // левое правое выравнивание
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMAEN);         // ДМА ключить
 8001316:	4b29      	ldr	r3, [pc, #164]	; (80013bc <ADC_init+0x114>)
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	4b28      	ldr	r3, [pc, #160]	; (80013bc <ADC_init+0x114>)
 800131c:	2101      	movs	r1, #1
 800131e:	430a      	orrs	r2, r1
 8001320:	60da      	str	r2, [r3, #12]
	SET_BIT(ADC1->CFGR1, ADC_CFGR1_DMACFG);        // ДМА в круговом режиме
 8001322:	4b26      	ldr	r3, [pc, #152]	; (80013bc <ADC_init+0x114>)
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <ADC_init+0x114>)
 8001328:	2102      	movs	r1, #2
 800132a:	430a      	orrs	r2, r1
 800132c:	60da      	str	r2, [r3, #12]
	SET_BIT(ADC1->CR, ADC_CR_ADEN);                // Включим АЦП
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <ADC_init+0x114>)
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <ADC_init+0x114>)
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]
	SET_BIT(ADC1->CR, ADC_CR_ADSTART);             // Запустим преобразование
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <ADC_init+0x114>)
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <ADC_init+0x114>)
 8001340:	2104      	movs	r1, #4
 8001342:	430a      	orrs	r2, r1
 8001344:	609a      	str	r2, [r3, #8]
	//NVIC_EnableIRQ(ADC1_IRQn);
	//NVIC_SetPriority(ADC1_IRQn, 3);              // выставим приоритет

	//----------------------- DMA --------------------------//
	SET_BIT(RCC->AHBENR, RCC_AHBENR_DMAEN);                 // включим тактирование ДМА
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <ADC_init+0x110>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <ADC_init+0x110>)
 800134c:	2101      	movs	r1, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	615a      	str	r2, [r3, #20]
	DMA1_Channel1->CPAR = (uint32_t)&(ADC1->DR);            // адрес для переферии для считывания
 8001352:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <ADC_init+0x118>)
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <ADC_init+0x11c>)
 8001356:	609a      	str	r2, [r3, #8]
	DMA1_Channel1->CMAR = (uint32_t)adc_buf;                // адрес памяти
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <ADC_init+0x118>)
 800135a:	4a1b      	ldr	r2, [pc, #108]	; (80013c8 <ADC_init+0x120>)
 800135c:	60da      	str	r2, [r3, #12]
	DMA1_Channel1->CNDTR = 2;                               // размер буффера приема
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <ADC_init+0x118>)
 8001360:	2202      	movs	r2, #2
 8001362:	605a      	str	r2, [r3, #4]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_PL_1);              // максимальный приоритет
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <ADC_init+0x118>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <ADC_init+0x118>)
 800136a:	2180      	movs	r1, #128	; 0x80
 800136c:	0189      	lsls	r1, r1, #6
 800136e:	430a      	orrs	r2, r1
 8001370:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_CIRC);              // циклический режим
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <ADC_init+0x118>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <ADC_init+0x118>)
 8001378:	2120      	movs	r1, #32
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MSIZE_0);           // Размер памяти 16 бит
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <ADC_init+0x118>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <ADC_init+0x118>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	00c9      	lsls	r1, r1, #3
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_PSIZE_0);           // Размер переферии 16 бит
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <ADC_init+0x118>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <ADC_init+0x118>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0049      	lsls	r1, r1, #1
 8001396:	430a      	orrs	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_MINC);              // инкрементировать память
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <ADC_init+0x118>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <ADC_init+0x118>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
	//SET_BIT(DMA1_Channel1->CCR, DMA_CCR_TCIE);              // прерывание после передачи, а надо?
	//NVIC_EnableIRQ(DMA1_Channel1_IRQn);
	SET_BIT(DMA1_Channel1->CCR, DMA_CCR_EN);                // включить дма
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <ADC_init+0x118>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <ADC_init+0x118>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40012400 	.word	0x40012400
 80013c0:	40020008 	.word	0x40020008
 80013c4:	40012440 	.word	0x40012440
 80013c8:	2000003c 	.word	0x2000003c

080013cc <map>:

#include "main.h"

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
 80013d8:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	69b9      	ldr	r1, [r7, #24]
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	1a8a      	subs	r2, r1, r2
 80013e6:	435a      	muls	r2, r3
 80013e8:	0010      	movs	r0, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	0019      	movs	r1, r3
 80013f2:	f7fe ff13 	bl	800021c <__divsi3>
 80013f6:	0003      	movs	r3, r0
 80013f8:	001a      	movs	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	18d3      	adds	r3, r2, r3
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}

08001406 <new_baud>:

uint32_t new_baud (uint32_t baud){
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
	if (baud == 9600 || baud == 19200 || baud == 38400 || baud == 57600 || baud == 115200) {
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	2396      	movs	r3, #150	; 0x96
 8001412:	019b      	lsls	r3, r3, #6
 8001414:	429a      	cmp	r2, r3
 8001416:	d013      	beq.n	8001440 <new_baud+0x3a>
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	2396      	movs	r3, #150	; 0x96
 800141c:	01db      	lsls	r3, r3, #7
 800141e:	429a      	cmp	r2, r3
 8001420:	d00e      	beq.n	8001440 <new_baud+0x3a>
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	2396      	movs	r3, #150	; 0x96
 8001426:	021b      	lsls	r3, r3, #8
 8001428:	429a      	cmp	r2, r3
 800142a:	d009      	beq.n	8001440 <new_baud+0x3a>
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	23e1      	movs	r3, #225	; 0xe1
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	429a      	cmp	r2, r3
 8001434:	d004      	beq.n	8001440 <new_baud+0x3a>
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	23e1      	movs	r3, #225	; 0xe1
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	429a      	cmp	r2, r3
 800143e:	d101      	bne.n	8001444 <new_baud+0x3e>
		return baud;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	e000      	b.n	8001446 <new_baud+0x40>
	} else return 0x00;
 8001444:	2300      	movs	r3, #0
}
 8001446:	0018      	movs	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	b002      	add	sp, #8
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <new_baud_set>:

void new_baud_set (uint32_t baud){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
		CLEAR_BIT(USART1->CR1, USART_CR1_UE);  // отключим USART
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <new_baud_set+0x34>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b09      	ldr	r3, [pc, #36]	; (8001484 <new_baud_set+0x34>)
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
		set_baud(USART2, baud);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <new_baud_set+0x38>)
 8001468:	0019      	movs	r1, r3
 800146a:	0010      	movs	r0, r2
 800146c:	f001 fa3a 	bl	80028e4 <set_baud>
		SET_BIT(USART1->CR1, USART_CR1_UE);    // включим USART
 8001470:	4b04      	ldr	r3, [pc, #16]	; (8001484 <new_baud_set+0x34>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b03      	ldr	r3, [pc, #12]	; (8001484 <new_baud_set+0x34>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40013800 	.word	0x40013800
 8001488:	40004400 	.word	0x40004400

0800148c <new_speed>:

uint32_t new_speed (uint32_t speed, uint32_t num_motor){     // новая скорость вращения.
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af02      	add	r7, sp, #8
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	if (speed > 1000) return 0;                              // поиграться с этими параметрами
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	23fa      	movs	r3, #250	; 0xfa
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	429a      	cmp	r2, r3
 800149e:	d901      	bls.n	80014a4 <new_speed+0x18>
 80014a0:	2300      	movs	r3, #0
 80014a2:	e020      	b.n	80014e6 <new_speed+0x5a>
	if (num_motor == 0) {
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10c      	bne.n	80014c4 <new_speed+0x38>
		TIM17->ARR = map (speed, 0, 1000, 10000, 100);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4910      	ldr	r1, [pc, #64]	; (80014f0 <new_speed+0x64>)
 80014ae:	23fa      	movs	r3, #250	; 0xfa
 80014b0:	009a      	lsls	r2, r3, #2
 80014b2:	2364      	movs	r3, #100	; 0x64
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	000b      	movs	r3, r1
 80014b8:	2100      	movs	r1, #0
 80014ba:	f7ff ff87 	bl	80013cc <map>
 80014be:	0002      	movs	r2, r0
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <new_speed+0x68>)
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	if (num_motor == 1) {
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d10c      	bne.n	80014e4 <new_speed+0x58>
		TIM16->ARR = map (speed, 0, 1000, 10000, 100);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	4908      	ldr	r1, [pc, #32]	; (80014f0 <new_speed+0x64>)
 80014ce:	23fa      	movs	r3, #250	; 0xfa
 80014d0:	009a      	lsls	r2, r3, #2
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	000b      	movs	r3, r1
 80014d8:	2100      	movs	r1, #0
 80014da:	f7ff ff77 	bl	80013cc <map>
 80014de:	0002      	movs	r2, r0
 80014e0:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <new_speed+0x6c>)
 80014e2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	return speed;
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	00002710 	.word	0x00002710
 80014f4:	40014800 	.word	0x40014800
 80014f8:	40014400 	.word	0x40014400

080014fc <init_flash_data>:
	Delay_ms(2);
	write_to_TMC2300 (3,0x6C, 0x8008001);   //  выберем шаг 1
	Delay_ms(2);
}

void init_flash_data (void) {                                // инициализация параметров из памяти
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	TIM17->ARR = 10000;                     // скорость
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <init_flash_data+0x34>)
 8001502:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <init_flash_data+0x38>)
 8001504:	62da      	str	r2, [r3, #44]	; 0x2c
	write_to_TMC2300 (1,0x6C, 0x3008001);   //  выберем шаг 32
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <init_flash_data+0x3c>)
 8001508:	001a      	movs	r2, r3
 800150a:	216c      	movs	r1, #108	; 0x6c
 800150c:	2001      	movs	r0, #1
 800150e:	f001 fa69 	bl	80029e4 <write_to_TMC2300>
	Delay_ms(2);
 8001512:	2002      	movs	r0, #2
 8001514:	f000 fa26 	bl	8001964 <Delay_ms>
	write_to_TMC2300 (3,0x6C, 0x3008001);   //  выберем шаг 32
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <init_flash_data+0x3c>)
 800151a:	001a      	movs	r2, r3
 800151c:	216c      	movs	r1, #108	; 0x6c
 800151e:	2003      	movs	r0, #3
 8001520:	f001 fa60 	bl	80029e4 <write_to_TMC2300>
	Delay_ms(2);
 8001524:	2002      	movs	r0, #2
 8001526:	f000 fa1d 	bl	8001964 <Delay_ms>

}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40014800 	.word	0x40014800
 8001534:	00002710 	.word	0x00002710
 8001538:	03008001 	.word	0x03008001

0800153c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	0002      	movs	r2, r0
 8001544:	1dfb      	adds	r3, r7, #7
 8001546:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b7f      	cmp	r3, #127	; 0x7f
 800154e:	d809      	bhi.n	8001564 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001550:	1dfb      	adds	r3, r7, #7
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	001a      	movs	r2, r3
 8001556:	231f      	movs	r3, #31
 8001558:	401a      	ands	r2, r3
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <__NVIC_EnableIRQ+0x30>)
 800155c:	2101      	movs	r1, #1
 800155e:	4091      	lsls	r1, r2
 8001560:	000a      	movs	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
  }
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b002      	add	sp, #8
 800156a:	bd80      	pop	{r7, pc}
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	0002      	movs	r2, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800157e:	1dfb      	adds	r3, r7, #7
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b7f      	cmp	r3, #127	; 0x7f
 8001584:	d828      	bhi.n	80015d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <__NVIC_SetPriority+0xd4>)
 8001588:	1dfb      	adds	r3, r7, #7
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	b25b      	sxtb	r3, r3
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	33c0      	adds	r3, #192	; 0xc0
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	589b      	ldr	r3, [r3, r2]
 8001596:	1dfa      	adds	r2, r7, #7
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	0011      	movs	r1, r2
 800159c:	2203      	movs	r2, #3
 800159e:	400a      	ands	r2, r1
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	21ff      	movs	r1, #255	; 0xff
 80015a4:	4091      	lsls	r1, r2
 80015a6:	000a      	movs	r2, r1
 80015a8:	43d2      	mvns	r2, r2
 80015aa:	401a      	ands	r2, r3
 80015ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	019b      	lsls	r3, r3, #6
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	401a      	ands	r2, r3
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	0018      	movs	r0, r3
 80015bc:	2303      	movs	r3, #3
 80015be:	4003      	ands	r3, r0
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015c4:	481f      	ldr	r0, [pc, #124]	; (8001644 <__NVIC_SetPriority+0xd4>)
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	430a      	orrs	r2, r1
 80015d0:	33c0      	adds	r3, #192	; 0xc0
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80015d6:	e031      	b.n	800163c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <__NVIC_SetPriority+0xd8>)
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	0019      	movs	r1, r3
 80015e0:	230f      	movs	r3, #15
 80015e2:	400b      	ands	r3, r1
 80015e4:	3b08      	subs	r3, #8
 80015e6:	089b      	lsrs	r3, r3, #2
 80015e8:	3306      	adds	r3, #6
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	3304      	adds	r3, #4
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1dfa      	adds	r2, r7, #7
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	0011      	movs	r1, r2
 80015f8:	2203      	movs	r2, #3
 80015fa:	400a      	ands	r2, r1
 80015fc:	00d2      	lsls	r2, r2, #3
 80015fe:	21ff      	movs	r1, #255	; 0xff
 8001600:	4091      	lsls	r1, r2
 8001602:	000a      	movs	r2, r1
 8001604:	43d2      	mvns	r2, r2
 8001606:	401a      	ands	r2, r3
 8001608:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	019b      	lsls	r3, r3, #6
 800160e:	22ff      	movs	r2, #255	; 0xff
 8001610:	401a      	ands	r2, r3
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	0018      	movs	r0, r3
 8001618:	2303      	movs	r3, #3
 800161a:	4003      	ands	r3, r0
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <__NVIC_SetPriority+0xd8>)
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	001c      	movs	r4, r3
 8001628:	230f      	movs	r3, #15
 800162a:	4023      	ands	r3, r4
 800162c:	3b08      	subs	r3, #8
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	430a      	orrs	r2, r1
 8001632:	3306      	adds	r3, #6
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	18c3      	adds	r3, r0, r3
 8001638:	3304      	adds	r3, #4
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b003      	add	sp, #12
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <init_rcc>:
volatile uint32_t Delay_counter_ms = 0; //Счетчик для функции Delay_ms
volatile uint32_t counter_ms = 0; //Счетчик для функции pid
volatile uint32_t counter_ms1 = 0; //Счетчик для функции pid
extern struct _flags *point_flags;

void init_rcc(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->CR, RCC_CR_HSEON); //Запустим внешний кварцевый резонатор. Он у нас на 8 MHz.
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <init_rcc+0xd4>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <init_rcc+0xd4>)
 8001656:	2180      	movs	r1, #128	; 0x80
 8001658:	0249      	lsls	r1, r1, #9
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
	while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0); //Дождемся поднятия флага о готовности
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <init_rcc+0xd4>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	029b      	lsls	r3, r3, #10
 8001668:	4013      	ands	r3, r2
 800166a:	d0f9      	beq.n	8001660 <init_rcc+0x14>
	SET_BIT(FLASH->ACR, FLASH_ACR_LATENCY);        // включим тактирование флеша
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <init_rcc+0xd8>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <init_rcc+0xd8>)
 8001672:	2101      	movs	r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
	SET_BIT(FLASH->ACR, FLASH_ACR_PRFTBE);         // включим буфер предварительной выборки ??
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <init_rcc+0xd8>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <init_rcc+0xd8>)
 800167e:	2110      	movs	r1, #16
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLMUL, RCC_CFGR_PLLMUL6); // умножаем на 6 PLLMUL
 8001684:	4b26      	ldr	r3, [pc, #152]	; (8001720 <init_rcc+0xd4>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <init_rcc+0xdc>)
 800168a:	401a      	ands	r2, r3
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <init_rcc+0xd4>)
 800168e:	2180      	movs	r1, #128	; 0x80
 8001690:	0349      	lsls	r1, r1, #13
 8001692:	430a      	orrs	r2, r1
 8001694:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_CFGR_PPRE_DIV1); // APB1 делитель 1
 8001696:	4b22      	ldr	r3, [pc, #136]	; (8001720 <init_rcc+0xd4>)
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <init_rcc+0xd4>)
 800169c:	4923      	ldr	r1, [pc, #140]	; (800172c <init_rcc+0xe0>)
 800169e:	400a      	ands	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_CFGR_HPRE_DIV1); // AHB делитель 1
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <init_rcc+0xd4>)
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <init_rcc+0xd4>)
 80016a8:	21f0      	movs	r1, #240	; 0xf0
 80016aa:	438a      	bics	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC, RCC_CFGR_PLLSRC_HSE_PREDIV); // HSE как входящий для PLL
 80016ae:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <init_rcc+0xd4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <init_rcc+0xe4>)
 80016b4:	401a      	ands	r2, r3
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <init_rcc+0xd4>)
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	0249      	lsls	r1, r1, #9
 80016bc:	430a      	orrs	r2, r1
 80016be:	605a      	str	r2, [r3, #4]
	SET_BIT(RCC->CR, RCC_CR_CSSON); //Включим CSS
 80016c0:	4b17      	ldr	r3, [pc, #92]	; (8001720 <init_rcc+0xd4>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <init_rcc+0xd4>)
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0309      	lsls	r1, r1, #12
 80016ca:	430a      	orrs	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]
	SET_BIT(RCC->CR, RCC_CR_PLLON); //Запустим PLL
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <init_rcc+0xd4>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <init_rcc+0xd4>)
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	0449      	lsls	r1, r1, #17
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]
	while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0); //Дожидемся поднятия флага включения PLL
 80016dc:	46c0      	nop			; (mov r8, r8)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <init_rcc+0xd4>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	049b      	lsls	r3, r3, #18
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f9      	beq.n	80016de <init_rcc+0x92>
	MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_CFGR_SW_PLL); //Выберем PLL в качестве System Clock
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <init_rcc+0xd4>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	4393      	bics	r3, r2
 80016f2:	001a      	movs	r2, r3
 80016f4:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <init_rcc+0xd4>)
 80016f6:	2102      	movs	r1, #2
 80016f8:	430a      	orrs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]

	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOAEN); //Включим тактирование порта А
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <init_rcc+0xd4>)
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <init_rcc+0xd4>)
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0289      	lsls	r1, r1, #10
 8001706:	430a      	orrs	r2, r1
 8001708:	615a      	str	r2, [r3, #20]
	SET_BIT(RCC->AHBENR, RCC_AHBENR_GPIOBEN); //Включим тактирование порта В
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <init_rcc+0xd4>)
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <init_rcc+0xd4>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	02c9      	lsls	r1, r1, #11
 8001714:	430a      	orrs	r2, r1
 8001716:	615a      	str	r2, [r3, #20]

}
 8001718:	46c0      	nop			; (mov r8, r8)
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)
 8001720:	40021000 	.word	0x40021000
 8001724:	40022000 	.word	0x40022000
 8001728:	ffc3ffff 	.word	0xffc3ffff
 800172c:	fffff8ff 	.word	0xfffff8ff
 8001730:	fffe7fff 	.word	0xfffe7fff

08001734 <init_wdt>:

void init_wdt(void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
#ifndef DEBUG_MODE
	WRITE_REG(IWDG->KR, 0x5555);              // разрешим запись в регистры IWDG
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <init_wdt+0x34>)
 800173a:	4a0c      	ldr	r2, [pc, #48]	; (800176c <init_wdt+0x38>)
 800173c:	601a      	str	r2, [r3, #0]
	WRITE_REG(IWDG->PR, 0x111);               // запишем делитель
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <init_wdt+0x34>)
 8001740:	2212      	movs	r2, #18
 8001742:	32ff      	adds	r2, #255	; 0xff
 8001744:	605a      	str	r2, [r3, #4]
	WRITE_REG(IWDG->RLR, 0xFFF);              // запишем время до сброса
 8001746:	4b08      	ldr	r3, [pc, #32]	; (8001768 <init_wdt+0x34>)
 8001748:	4a09      	ldr	r2, [pc, #36]	; (8001770 <init_wdt+0x3c>)
 800174a:	609a      	str	r2, [r3, #8]
	WRITE_REG(IWDG->KR, 0xCCCC);              // запустим ватч дог
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <init_wdt+0x34>)
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <init_wdt+0x40>)
 8001750:	601a      	str	r2, [r3, #0]
	while (IWDG->SR);                         // дождемся установки
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <init_wdt+0x34>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1fb      	bne.n	8001754 <init_wdt+0x20>
	WRITE_REG(IWDG->KR, 0xAAAA);              // сброс ватч дога
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <init_wdt+0x34>)
 800175e:	4a06      	ldr	r2, [pc, #24]	; (8001778 <init_wdt+0x44>)
 8001760:	601a      	str	r2, [r3, #0]
#endif
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40003000 	.word	0x40003000
 800176c:	00005555 	.word	0x00005555
 8001770:	00000fff 	.word	0x00000fff
 8001774:	0000cccc 	.word	0x0000cccc
 8001778:	0000aaaa 	.word	0x0000aaaa

0800177c <iwdt_reset>:

void iwdt_reset(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	WRITE_REG(IWDG->KR, 0xAAAA);              // сброс ватч дога
 8001780:	4b02      	ldr	r3, [pc, #8]	; (800178c <iwdt_reset+0x10>)
 8001782:	4a03      	ldr	r2, [pc, #12]	; (8001790 <iwdt_reset+0x14>)
 8001784:	601a      	str	r2, [r3, #0]
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40003000 	.word	0x40003000
 8001790:	0000aaaa 	.word	0x0000aaaa

08001794 <CMSIS_SysTick_Timer_init>:

void CMSIS_SysTick_Timer_init(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	/* п. 4.5.1 SysTick control and status register (STK_CTRL) (стр. 151)*/
	CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Выключим таймер для проведения настроек.
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 800179e:	2101      	movs	r1, #1
 80017a0:	438a      	bics	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk); //Разрешим прерывания по таймеру
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017aa:	2102      	movs	r1, #2
 80017ac:	430a      	orrs	r2, r1
 80017ae:	601a      	str	r2, [r3, #0]
	SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk); //Выберем без делителя. Будет 48MHz
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017b6:	2104      	movs	r1, #4
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]
	MODIFY_REG(SysTick->LOAD, SysTick_LOAD_RELOAD_Msk,
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	0e1b      	lsrs	r3, r3, #24
 80017c2:	061a      	lsls	r2, r3, #24
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017c6:	490b      	ldr	r1, [pc, #44]	; (80017f4 <CMSIS_SysTick_Timer_init+0x60>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
			47999 << SysTick_LOAD_RELOAD_Pos); //Настроим прерывание на частоту в 1 кГц(т.е. сработка будет каждую мс)
	MODIFY_REG(SysTick->VAL, SysTick_VAL_CURRENT_Msk,
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	0e1b      	lsrs	r3, r3, #24
 80017d2:	061a      	lsls	r2, r3, #24
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017d6:	4907      	ldr	r1, [pc, #28]	; (80017f4 <CMSIS_SysTick_Timer_init+0x60>)
 80017d8:	430a      	orrs	r2, r1
 80017da:	609a      	str	r2, [r3, #8]
			47999 << SysTick_VAL_CURRENT_Pos); //Начнем считать с 47999
	SET_BIT(SysTick->CTRL, SysTick_CTRL_ENABLE_Msk); //Запускаем таймер
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <CMSIS_SysTick_Timer_init+0x5c>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	430a      	orrs	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	e000e010 	.word	0xe000e010
 80017f4:	0000bb7f 	.word	0x0000bb7f

080017f8 <SysTick_Handler>:

void SysTick_Handler(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	SysTimer_ms++;
 80017fc:	4b52      	ldr	r3, [pc, #328]	; (8001948 <SysTick_Handler+0x150>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	1c5a      	adds	r2, r3, #1
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <SysTick_Handler+0x150>)
 8001804:	601a      	str	r2, [r3, #0]
	if (Delay_counter_ms) {
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <SysTick_Handler+0x154>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d004      	beq.n	8001818 <SysTick_Handler+0x20>
		Delay_counter_ms--;
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <SysTick_Handler+0x154>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1e5a      	subs	r2, r3, #1
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <SysTick_Handler+0x154>)
 8001816:	601a      	str	r2, [r3, #0]
	}

	if (counter_ms < 20)
 8001818:	4b4d      	ldr	r3, [pc, #308]	; (8001950 <SysTick_Handler+0x158>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b13      	cmp	r3, #19
 800181e:	d805      	bhi.n	800182c <SysTick_Handler+0x34>
		counter_ms++;
 8001820:	4b4b      	ldr	r3, [pc, #300]	; (8001950 <SysTick_Handler+0x158>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	4b4a      	ldr	r3, [pc, #296]	; (8001950 <SysTick_Handler+0x158>)
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	e008      	b.n	800183e <SysTick_Handler+0x46>
	else {
		point_flags->pid_ok = TRUE;
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <SysTick_Handler+0x15c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	789a      	ldrb	r2, [r3, #2]
 8001832:	2110      	movs	r1, #16
 8001834:	430a      	orrs	r2, r1
 8001836:	709a      	strb	r2, [r3, #2]
		counter_ms = 0;
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <SysTick_Handler+0x158>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
	}

	if (point_flags->iwdt_res) {
 800183e:	4b45      	ldr	r3, [pc, #276]	; (8001954 <SysTick_Handler+0x15c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	2208      	movs	r2, #8
 8001846:	4013      	ands	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <SysTick_Handler+0x5c>
		WRITE_REG(IWDG->KR, 0xAAAA);        // сброс ватч дога
 800184e:	4b42      	ldr	r3, [pc, #264]	; (8001958 <SysTick_Handler+0x160>)
 8001850:	4a42      	ldr	r2, [pc, #264]	; (800195c <SysTick_Handler+0x164>)
 8001852:	601a      	str	r2, [r3, #0]
	}

	if (point_flags->delay > 0) { // тут бы в дальнейшем переделать на другой таймер
 8001854:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <SysTick_Handler+0x15c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	23f0      	movs	r3, #240	; 0xf0
 800185c:	025b      	lsls	r3, r3, #9
 800185e:	4013      	ands	r3, r2
 8001860:	d06f      	beq.n	8001942 <SysTick_Handler+0x14a>
		if (point_flags->delay == 5) {
 8001862:	4b3c      	ldr	r3, [pc, #240]	; (8001954 <SysTick_Handler+0x15c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	23f0      	movs	r3, #240	; 0xf0
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	401a      	ands	r2, r3
 800186e:	23a0      	movs	r3, #160	; 0xa0
 8001870:	021b      	lsls	r3, r3, #8
 8001872:	429a      	cmp	r2, r3
 8001874:	d108      	bne.n	8001888 <SysTick_Handler+0x90>
			STEP3_OFF;
 8001876:	2390      	movs	r3, #144	; 0x90
 8001878:	05db      	lsls	r3, r3, #23
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	2390      	movs	r3, #144	; 0x90
 800187e:	05db      	lsls	r3, r3, #23
 8001880:	2180      	movs	r1, #128	; 0x80
 8001882:	0409      	lsls	r1, r1, #16
 8001884:	430a      	orrs	r2, r1
 8001886:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 4) {
 8001888:	4b32      	ldr	r3, [pc, #200]	; (8001954 <SysTick_Handler+0x15c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	23f0      	movs	r3, #240	; 0xf0
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	401a      	ands	r2, r3
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	429a      	cmp	r2, r3
 800189a:	d107      	bne.n	80018ac <SysTick_Handler+0xb4>
			STEP3_ON;
 800189c:	2390      	movs	r3, #144	; 0x90
 800189e:	05db      	lsls	r3, r3, #23
 80018a0:	699a      	ldr	r2, [r3, #24]
 80018a2:	2390      	movs	r3, #144	; 0x90
 80018a4:	05db      	lsls	r3, r3, #23
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	430a      	orrs	r2, r1
 80018aa:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 3) { // 5 вкл 3 раза, 3 вкл 2 раза, 1 вкл 1 раз
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <SysTick_Handler+0x15c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	23f0      	movs	r3, #240	; 0xf0
 80018b4:	025b      	lsls	r3, r3, #9
 80018b6:	401a      	ands	r2, r3
 80018b8:	23c0      	movs	r3, #192	; 0xc0
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	429a      	cmp	r2, r3
 80018be:	d108      	bne.n	80018d2 <SysTick_Handler+0xda>
			STEP3_OFF;
 80018c0:	2390      	movs	r3, #144	; 0x90
 80018c2:	05db      	lsls	r3, r3, #23
 80018c4:	699a      	ldr	r2, [r3, #24]
 80018c6:	2390      	movs	r3, #144	; 0x90
 80018c8:	05db      	lsls	r3, r3, #23
 80018ca:	2180      	movs	r1, #128	; 0x80
 80018cc:	0409      	lsls	r1, r1, #16
 80018ce:	430a      	orrs	r2, r1
 80018d0:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 2) {
 80018d2:	4b20      	ldr	r3, [pc, #128]	; (8001954 <SysTick_Handler+0x15c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	23f0      	movs	r3, #240	; 0xf0
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	401a      	ands	r2, r3
 80018de:	2380      	movs	r3, #128	; 0x80
 80018e0:	01db      	lsls	r3, r3, #7
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d107      	bne.n	80018f6 <SysTick_Handler+0xfe>
			STEP3_ON;
 80018e6:	2390      	movs	r3, #144	; 0x90
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	699a      	ldr	r2, [r3, #24]
 80018ec:	2390      	movs	r3, #144	; 0x90
 80018ee:	05db      	lsls	r3, r3, #23
 80018f0:	2180      	movs	r1, #128	; 0x80
 80018f2:	430a      	orrs	r2, r1
 80018f4:	619a      	str	r2, [r3, #24]
		}
		if (point_flags->delay == 1) {
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <SysTick_Handler+0x15c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	23f0      	movs	r3, #240	; 0xf0
 80018fe:	025b      	lsls	r3, r3, #9
 8001900:	401a      	ands	r2, r3
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	429a      	cmp	r2, r3
 8001908:	d108      	bne.n	800191c <SysTick_Handler+0x124>
			STEP3_OFF;
 800190a:	2390      	movs	r3, #144	; 0x90
 800190c:	05db      	lsls	r3, r3, #23
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	2390      	movs	r3, #144	; 0x90
 8001912:	05db      	lsls	r3, r3, #23
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0409      	lsls	r1, r1, #16
 8001918:	430a      	orrs	r2, r1
 800191a:	619a      	str	r2, [r3, #24]
		}
		point_flags->delay--;
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <SysTick_Handler+0x15c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	03d2      	lsls	r2, r2, #15
 8001924:	0f12      	lsrs	r2, r2, #28
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	320f      	adds	r2, #15
 800192a:	1c11      	adds	r1, r2, #0
 800192c:	220f      	movs	r2, #15
 800192e:	400a      	ands	r2, r1
 8001930:	b2d2      	uxtb	r2, r2
 8001932:	210f      	movs	r1, #15
 8001934:	400a      	ands	r2, r1
 8001936:	0352      	lsls	r2, r2, #13
 8001938:	6819      	ldr	r1, [r3, #0]
 800193a:	4809      	ldr	r0, [pc, #36]	; (8001960 <SysTick_Handler+0x168>)
 800193c:	4001      	ands	r1, r0
 800193e:	430a      	orrs	r2, r1
 8001940:	601a      	str	r2, [r3, #0]
	}
}
 8001942:	46c0      	nop			; (mov r8, r8)
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000040 	.word	0x20000040
 800194c:	20000044 	.word	0x20000044
 8001950:	20000048 	.word	0x20000048
 8001954:	20000000 	.word	0x20000000
 8001958:	40003000 	.word	0x40003000
 800195c:	0000aaaa 	.word	0x0000aaaa
 8001960:	fffe1fff 	.word	0xfffe1fff

08001964 <Delay_ms>:

void Delay_ms(uint32_t Milliseconds) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	Delay_counter_ms = Milliseconds;
 800196c:	4b06      	ldr	r3, [pc, #24]	; (8001988 <Delay_ms+0x24>)
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
	while (Delay_counter_ms != 0)
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <Delay_ms+0x24>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1fb      	bne.n	8001974 <Delay_ms+0x10>
		;
}
 800197c:	46c0      	nop			; (mov r8, r8)
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b002      	add	sp, #8
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	20000044 	.word	0x20000044

0800198c <init_tim3>:

void init_tim3(void) {
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN);   // включим тактирование
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <init_tim3+0x8c>)
 8001992:	69da      	ldr	r2, [r3, #28]
 8001994:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <init_tim3+0x8c>)
 8001996:	2102      	movs	r1, #2
 8001998:	430a      	orrs	r2, r1
 800199a:	61da      	str	r2, [r3, #28]
	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER6_1);        // альтернативная функция
 800199c:	2390      	movs	r3, #144	; 0x90
 800199e:	05db      	lsls	r3, r3, #23
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	2390      	movs	r3, #144	; 0x90
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	0189      	lsls	r1, r1, #6
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->AFR[0], 1 << GPIO_AFRL_AFRL6_Pos);      // TIM3
 80019ae:	2390      	movs	r3, #144	; 0x90
 80019b0:	05db      	lsls	r3, r3, #23
 80019b2:	6a1a      	ldr	r2, [r3, #32]
 80019b4:	2390      	movs	r3, #144	; 0x90
 80019b6:	05db      	lsls	r3, r3, #23
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	0449      	lsls	r1, r1, #17
 80019bc:	430a      	orrs	r2, r1
 80019be:	621a      	str	r2, [r3, #32]
	TIM3->PSC = 0;
 80019c0:	4b16      	ldr	r3, [pc, #88]	; (8001a1c <init_tim3+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 600;
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <init_tim3+0x90>)
 80019c8:	2296      	movs	r2, #150	; 0x96
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 200;
 80019ce:	4b13      	ldr	r3, [pc, #76]	; (8001a1c <init_tim3+0x90>)
 80019d0:	22c8      	movs	r2, #200	; 0xc8
 80019d2:	635a      	str	r2, [r3, #52]	; 0x34
	SET_BIT(TIM3->CR1, TIM_CR1_ARPE);    // включить автоматическую перезагрузку
 80019d4:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <init_tim3+0x90>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <init_tim3+0x90>)
 80019da:	2180      	movs	r1, #128	; 0x80
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM3->CCMR1, TIM_CCMR1_OC1PE); // загрузка значений в регистр сравнения немедленно
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <init_tim3+0x90>)
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <init_tim3+0x90>)
 80019e6:	2108      	movs	r1, #8
 80019e8:	430a      	orrs	r2, r1
 80019ea:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM3->CCMR1, 0b110 << TIM_CCMR1_OC1M_Pos); // шим режим 1 (счет вперед)
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <init_tim3+0x90>)
 80019ee:	699a      	ldr	r2, [r3, #24]
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <init_tim3+0x90>)
 80019f2:	2160      	movs	r1, #96	; 0x60
 80019f4:	430a      	orrs	r2, r1
 80019f6:	619a      	str	r2, [r3, #24]
	SET_BIT(TIM3->CCER, TIM_CCER_CC1E);           // Сравнение 1 выхода включен.
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <init_tim3+0x90>)
 80019fa:	6a1a      	ldr	r2, [r3, #32]
 80019fc:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <init_tim3+0x90>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	430a      	orrs	r2, r1
 8001a02:	621a      	str	r2, [r3, #32]
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);                       // включить таймер
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <init_tim3+0x90>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <init_tim3+0x90>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
}
 8001a10:	46c0      	nop			; (mov r8, r8)
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40000400 	.word	0x40000400

08001a20 <init_tim17>:

void init_tim17(uint16_t prescaler, uint16_t reload) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	0002      	movs	r2, r0
 8001a28:	1dbb      	adds	r3, r7, #6
 8001a2a:	801a      	strh	r2, [r3, #0]
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	1c0a      	adds	r2, r1, #0
 8001a30:	801a      	strh	r2, [r3, #0]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM17EN);   // включим тактирование
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <init_tim17+0x6c>)
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <init_tim17+0x6c>)
 8001a38:	2180      	movs	r1, #128	; 0x80
 8001a3a:	02c9      	lsls	r1, r1, #11
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	619a      	str	r2, [r3, #24]
	TIM17->PSC = prescaler - 1;
 8001a40:	1dbb      	adds	r3, r7, #6
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	1e5a      	subs	r2, r3, #1
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <init_tim17+0x70>)
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
	TIM17->ARR = reload;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <init_tim17+0x70>)
 8001a4c:	1d3a      	adds	r2, r7, #4
 8001a4e:	8812      	ldrh	r2, [r2, #0]
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM17->CR1, TIM_CR1_ARPE);   // включить автоматическую перезагрузку
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <init_tim17+0x70>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <init_tim17+0x70>)
 8001a58:	2180      	movs	r1, #128	; 0x80
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM17->CR1, TIM_CR1_CEN);             // включить таймер
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <init_tim17+0x70>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <init_tim17+0x70>)
 8001a64:	2101      	movs	r1, #1
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);      // включим прерывание по обновлению
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <init_tim17+0x70>)
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <init_tim17+0x70>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(TIM17_IRQn);
 8001a76:	2016      	movs	r0, #22
 8001a78:	f7ff fd60 	bl	800153c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM17_IRQn, 2); // выставим приоритет
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	2016      	movs	r0, #22
 8001a80:	f7ff fd76 	bl	8001570 <__NVIC_SetPriority>
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40014800 	.word	0x40014800

08001a94 <init_tim16>:

void init_tim16(uint16_t prescaler, uint16_t reload) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	1dbb      	adds	r3, r7, #6
 8001a9e:	801a      	strh	r2, [r3, #0]
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	1c0a      	adds	r2, r1, #0
 8001aa4:	801a      	strh	r2, [r3, #0]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM16EN);   // включим тактирование
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <init_tim16+0x60>)
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <init_tim16+0x60>)
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	0289      	lsls	r1, r1, #10
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	619a      	str	r2, [r3, #24]
	TIM16->PSC = prescaler - 1;
 8001ab4:	1dbb      	adds	r3, r7, #6
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	1e5a      	subs	r2, r3, #1
 8001aba:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <init_tim16+0x64>)
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->ARR = reload;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <init_tim16+0x64>)
 8001ac0:	1d3a      	adds	r2, r7, #4
 8001ac2:	8812      	ldrh	r2, [r2, #0]
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIM16->CR1, TIM_CR1_ARPE);   // включить автоматическую перезагрузку
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <init_tim16+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <init_tim16+0x64>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
	SET_BIT(TIM16->CR1, TIM_CR1_CEN);             // включить таймер
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <init_tim16+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <init_tim16+0x64>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
	//SET_BIT(TIM16->DIER, TIM_DIER_UIE);      // включим прерывание по обновлению

	NVIC_EnableIRQ(TIM16_IRQn);
 8001ade:	2015      	movs	r0, #21
 8001ae0:	f7ff fd2c 	bl	800153c <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM16_IRQn, 2); // выставим приоритет
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	2015      	movs	r0, #21
 8001ae8:	f7ff fd42 	bl	8001570 <__NVIC_SetPriority>
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b002      	add	sp, #8
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40014400 	.word	0x40014400

08001afc <init_pins>:

void init_pins(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER0_0);  // на выход А0
 8001b00:	2390      	movs	r3, #144	; 0x90
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2390      	movs	r3, #144	; 0x90
 8001b08:	05db      	lsls	r3, r3, #23
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR0);     // максимальная скорость
 8001b10:	2390      	movs	r3, #144	; 0x90
 8001b12:	05db      	lsls	r3, r3, #23
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	2390      	movs	r3, #144	; 0x90
 8001b18:	05db      	lsls	r3, r3, #23
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER1_0);  // на выход А1
 8001b20:	2390      	movs	r3, #144	; 0x90
 8001b22:	05db      	lsls	r3, r3, #23
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2390      	movs	r3, #144	; 0x90
 8001b28:	05db      	lsls	r3, r3, #23
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR1);     // максимальная скорость
 8001b30:	2390      	movs	r3, #144	; 0x90
 8001b32:	05db      	lsls	r3, r3, #23
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	2390      	movs	r3, #144	; 0x90
 8001b38:	05db      	lsls	r3, r3, #23
 8001b3a:	210c      	movs	r1, #12
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER7_0);  // на выход А7
 8001b40:	2390      	movs	r3, #144	; 0x90
 8001b42:	05db      	lsls	r3, r3, #23
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2390      	movs	r3, #144	; 0x90
 8001b48:	05db      	lsls	r3, r3, #23
 8001b4a:	2180      	movs	r1, #128	; 0x80
 8001b4c:	01c9      	lsls	r1, r1, #7
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR7);     // максимальная скорость
 8001b52:	2390      	movs	r3, #144	; 0x90
 8001b54:	05db      	lsls	r3, r3, #23
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	2390      	movs	r3, #144	; 0x90
 8001b5a:	05db      	lsls	r3, r3, #23
 8001b5c:	21c0      	movs	r1, #192	; 0xc0
 8001b5e:	0209      	lsls	r1, r1, #8
 8001b60:	430a      	orrs	r2, r1
 8001b62:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER1_0);  // на выход В1
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <init_pins+0xf4>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <init_pins+0xf4>)
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR1);     // максимальная скорость
 8001b70:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <init_pins+0xf4>)
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <init_pins+0xf4>)
 8001b76:	210c      	movs	r1, #12
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER3_0);  // на выход В3
 8001b7c:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <init_pins+0xf4>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <init_pins+0xf4>)
 8001b82:	2140      	movs	r1, #64	; 0x40
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR3);     // максимальная скорость
 8001b88:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <init_pins+0xf4>)
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <init_pins+0xf4>)
 8001b8e:	21c0      	movs	r1, #192	; 0xc0
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER4_0);  // на выход В4
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <init_pins+0xf4>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <init_pins+0xf4>)
 8001b9a:	2180      	movs	r1, #128	; 0x80
 8001b9c:	0049      	lsls	r1, r1, #1
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR4);     // максимальная скорость
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <init_pins+0xf4>)
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <init_pins+0xf4>)
 8001ba8:	21c0      	movs	r1, #192	; 0xc0
 8001baa:	0089      	lsls	r1, r1, #2
 8001bac:	430a      	orrs	r2, r1
 8001bae:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->MODER, GPIO_MODER_MODER5_0);  // на выход В5
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <init_pins+0xf4>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <init_pins+0xf4>)
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	00c9      	lsls	r1, r1, #3
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR5);     // максимальная скорость
 8001bbe:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <init_pins+0xf4>)
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <init_pins+0xf4>)
 8001bc4:	21c0      	movs	r1, #192	; 0xc0
 8001bc6:	0109      	lsls	r1, r1, #4
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	609a      	str	r2, [r3, #8]

	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR6); // на вход В6
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <init_pins+0xf4>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <init_pins+0xf4>)
 8001bd2:	21c0      	movs	r1, #192	; 0xc0
 8001bd4:	0189      	lsls	r1, r1, #6
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOB->OSPEEDR, GPIO_OSPEEDR_OSPEEDR7); // на вход В7
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <init_pins+0xf4>)
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <init_pins+0xf4>)
 8001be0:	21c0      	movs	r1, #192	; 0xc0
 8001be2:	0209      	lsls	r1, r1, #8
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]

}
 8001be8:	46c0      	nop			; (mov r8, r8)
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	48000400 	.word	0x48000400

08001bf4 <init_debug_pin>:

void init_debug_pin(void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER13_Msk, GPIO_MODER_MODER13_0); // на выход А13
 8001bf8:	2390      	movs	r3, #144	; 0x90
 8001bfa:	05db      	lsls	r3, r3, #23
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <init_debug_pin+0x9c>)
 8001c00:	401a      	ands	r2, r3
 8001c02:	2390      	movs	r3, #144	; 0x90
 8001c04:	05db      	lsls	r3, r3, #23
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	04c9      	lsls	r1, r1, #19
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_13);         // push_pull
 8001c0e:	2390      	movs	r3, #144	; 0x90
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2390      	movs	r3, #144	; 0x90
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	491e      	ldr	r1, [pc, #120]	; (8001c94 <init_debug_pin+0xa0>)
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR13_Msk);     // без резисторов
 8001c1e:	2390      	movs	r3, #144	; 0x90
 8001c20:	05db      	lsls	r3, r3, #23
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	2390      	movs	r3, #144	; 0x90
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	4919      	ldr	r1, [pc, #100]	; (8001c90 <init_debug_pin+0x9c>)
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR13);    // максимальная скорость
 8001c2e:	2390      	movs	r3, #144	; 0x90
 8001c30:	05db      	lsls	r3, r3, #23
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	2390      	movs	r3, #144	; 0x90
 8001c36:	05db      	lsls	r3, r3, #23
 8001c38:	21c0      	movs	r1, #192	; 0xc0
 8001c3a:	0509      	lsls	r1, r1, #20
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	609a      	str	r2, [r3, #8]

	MODIFY_REG(GPIOA->MODER, GPIO_MODER_MODER14_Msk, GPIO_MODER_MODER14_0); // на выход А14
 8001c40:	2390      	movs	r3, #144	; 0x90
 8001c42:	05db      	lsls	r3, r3, #23
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <init_debug_pin+0xa4>)
 8001c48:	401a      	ands	r2, r3
 8001c4a:	2390      	movs	r3, #144	; 0x90
 8001c4c:	05db      	lsls	r3, r3, #23
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0549      	lsls	r1, r1, #21
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
	CLEAR_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_14);         // push_pull
 8001c56:	2390      	movs	r3, #144	; 0x90
 8001c58:	05db      	lsls	r3, r3, #23
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	2390      	movs	r3, #144	; 0x90
 8001c5e:	05db      	lsls	r3, r3, #23
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <init_debug_pin+0xa8>)
 8001c62:	400a      	ands	r2, r1
 8001c64:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR14_Msk);     // без резисторов
 8001c66:	2390      	movs	r3, #144	; 0x90
 8001c68:	05db      	lsls	r3, r3, #23
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	2390      	movs	r3, #144	; 0x90
 8001c6e:	05db      	lsls	r3, r3, #23
 8001c70:	4909      	ldr	r1, [pc, #36]	; (8001c98 <init_debug_pin+0xa4>)
 8001c72:	400a      	ands	r2, r1
 8001c74:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDR_OSPEEDR14);    // максимальная скорость
 8001c76:	2390      	movs	r3, #144	; 0x90
 8001c78:	05db      	lsls	r3, r3, #23
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	2390      	movs	r3, #144	; 0x90
 8001c7e:	05db      	lsls	r3, r3, #23
 8001c80:	21c0      	movs	r1, #192	; 0xc0
 8001c82:	0589      	lsls	r1, r1, #22
 8001c84:	430a      	orrs	r2, r1
 8001c86:	609a      	str	r2, [r3, #8]
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	f3ffffff 	.word	0xf3ffffff
 8001c94:	ffffdfff 	.word	0xffffdfff
 8001c98:	cfffffff 	.word	0xcfffffff
 8001c9c:	ffffbfff 	.word	0xffffbfff

08001ca0 <new_data_flag>:
struct stepp stepp_2;

struct _flags flags;
struct _flags *point_flags = &flags;

void new_data_flag (uint32_t flag) {                           // проверяем если биты совпадают то ничего не делаем
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	if (point_flags->ir_filter == 0 && (flag & 0x01)){         // а если не совпадают то переставляем бит и делаем операцию
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <new_data_flag+0x9c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	227f      	movs	r2, #127	; 0x7f
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d11a      	bne.n	8001cee <new_data_flag+0x4e>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d016      	beq.n	8001cee <new_data_flag+0x4e>
		point_flags->ir_filter = 1;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <new_data_flag+0x9c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	2180      	movs	r1, #128	; 0x80
 8001cc8:	4249      	negs	r1, r1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
		STEP3_ON;
 8001cce:	2390      	movs	r3, #144	; 0x90
 8001cd0:	05db      	lsls	r3, r3, #23
 8001cd2:	699a      	ldr	r2, [r3, #24]
 8001cd4:	2390      	movs	r3, #144	; 0x90
 8001cd6:	05db      	lsls	r3, r3, #23
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	619a      	str	r2, [r3, #24]
		flags.delay = 4;
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <new_data_flag+0xa0>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4918      	ldr	r1, [pc, #96]	; (8001d44 <new_data_flag+0xa4>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0209      	lsls	r1, r1, #8
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
	}
	if (point_flags->ir_filter == 1 && !(flag & 0x01)) {
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <new_data_flag+0x9c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	227f      	movs	r2, #127	; 0x7f
 8001cf6:	4393      	bics	r3, r2
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <new_data_flag+0x92>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	4013      	ands	r3, r2
 8001d04:	d115      	bne.n	8001d32 <new_data_flag+0x92>
		point_flags->ir_filter = 0;
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <new_data_flag+0x9c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	217f      	movs	r1, #127	; 0x7f
 8001d0e:	400a      	ands	r2, r1
 8001d10:	701a      	strb	r2, [r3, #0]
		STEP3_ON;
 8001d12:	2390      	movs	r3, #144	; 0x90
 8001d14:	05db      	lsls	r3, r3, #23
 8001d16:	699a      	ldr	r2, [r3, #24]
 8001d18:	2390      	movs	r3, #144	; 0x90
 8001d1a:	05db      	lsls	r3, r3, #23
 8001d1c:	2180      	movs	r1, #128	; 0x80
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	619a      	str	r2, [r3, #24]
		flags.delay = 4;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <new_data_flag+0xa0>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4907      	ldr	r1, [pc, #28]	; (8001d44 <new_data_flag+0xa4>)
 8001d28:	400a      	ands	r2, r1
 8001d2a:	2180      	movs	r1, #128	; 0x80
 8001d2c:	0209      	lsls	r1, r1, #8
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
	}
}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b002      	add	sp, #8
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000000 	.word	0x20000000
 8001d40:	2000006c 	.word	0x2000006c
 8001d44:	fffe1fff 	.word	0xfffe1fff

08001d48 <stop_motor>:

void stop_motor (void){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	stepp_1.curent_steps = stepp_1.last_steps;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <stop_motor+0x1c>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <stop_motor+0x1c>)
 8001d52:	605a      	str	r2, [r3, #4]
	stepp_2.curent_steps = stepp_2.last_steps;
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <stop_motor+0x20>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b03      	ldr	r3, [pc, #12]	; (8001d68 <stop_motor+0x20>)
 8001d5a:	605a      	str	r2, [r3, #4]
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	2000004c 	.word	0x2000004c
 8001d68:	2000005c 	.word	0x2000005c

08001d6c <poz_motor>:

uint32_t poz_motor (uint8_t num_motor){
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	0002      	movs	r2, r0
 8001d74:	1dfb      	adds	r3, r7, #7
 8001d76:	701a      	strb	r2, [r3, #0]
	if (num_motor == 1) {
 8001d78:	1dfb      	adds	r3, r7, #7
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d114      	bne.n	8001daa <poz_motor+0x3e>
		return map (stepp_1.last_steps, (stepp_1.step_down<<4)-PROTECT, (stepp_1.step_up<<4)-PROTECT, RESOLUTION, 0);
 8001d80:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <poz_motor+0x78>)
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	4b17      	ldr	r3, [pc, #92]	; (8001de4 <poz_motor+0x78>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	3b0a      	subs	r3, #10
 8001d8c:	0019      	movs	r1, r3
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <poz_motor+0x78>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	011b      	lsls	r3, r3, #4
 8001d94:	3b0a      	subs	r3, #10
 8001d96:	001c      	movs	r4, r3
 8001d98:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <poz_motor+0x7c>)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	0013      	movs	r3, r2
 8001da0:	0022      	movs	r2, r4
 8001da2:	f7ff fb13 	bl	80013cc <map>
 8001da6:	0003      	movs	r3, r0
 8001da8:	e017      	b.n	8001dda <poz_motor+0x6e>
	}
	if (num_motor == 2) {
 8001daa:	1dfb      	adds	r3, r7, #7
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d112      	bne.n	8001dd8 <poz_motor+0x6c>
		return map (stepp_2.last_steps, (stepp_2.step_down<<4)-PROTECT, (stepp_2.step_up<<4)-PROTECT, 0,RESOLUTION);
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <poz_motor+0x80>)
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <poz_motor+0x80>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	3b0a      	subs	r3, #10
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <poz_motor+0x80>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	011b      	lsls	r3, r3, #4
 8001dc6:	3b0a      	subs	r3, #10
 8001dc8:	001a      	movs	r2, r3
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <poz_motor+0x7c>)
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	f7ff fafc 	bl	80013cc <map>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	e000      	b.n	8001dda <poz_motor+0x6e>
	}
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	0018      	movs	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	b003      	add	sp, #12
 8001de0:	bd90      	pop	{r4, r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	2000004c 	.word	0x2000004c
 8001de8:	00002710 	.word	0x00002710
 8001dec:	2000005c 	.word	0x2000005c

08001df0 <search_zero>:

static inline void search_zero(void) {              // поиск нуля
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	if (!flags.start_zero) {                        // если мы первый раз заходим в прерывание
 8001df4:	4b5a      	ldr	r3, [pc, #360]	; (8001f60 <search_zero+0x170>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d111      	bne.n	8001e26 <search_zero+0x36>
		flags.start_zero = TRUE;                    // сбросим флаг первого раза
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <search_zero+0x170>)
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	2104      	movs	r1, #4
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	701a      	strb	r2, [r3, #0]
		DIR1_ON;                                    // установим дир в нужное положение, чтоб шагать к концевику
 8001e0c:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <search_zero+0x174>)
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	4b54      	ldr	r3, [pc, #336]	; (8001f64 <search_zero+0x174>)
 8001e12:	2120      	movs	r1, #32
 8001e14:	430a      	orrs	r2, r1
 8001e16:	619a      	str	r2, [r3, #24]
		DIR2_ON;                                    // сюда заходим один раз чтоб сначала установить дир, а потом шагать
 8001e18:	4b52      	ldr	r3, [pc, #328]	; (8001f64 <search_zero+0x174>)
 8001e1a:	699a      	ldr	r2, [r3, #24]
 8001e1c:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <search_zero+0x174>)
 8001e1e:	2110      	movs	r1, #16
 8001e20:	430a      	orrs	r2, r1
 8001e22:	619a      	str	r2, [r3, #24]
 8001e24:	e06f      	b.n	8001f06 <search_zero+0x116>
	} else {                                        // если уже не первый раз заходим
		if (READ_LIM1 && !flags.zero_pos1) {        // считаем состояние концевика, если не ноль, шагаем
 8001e26:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <search_zero+0x174>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d024      	beq.n	8001e7a <search_zero+0x8a>
 8001e30:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <search_zero+0x170>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11d      	bne.n	8001e7a <search_zero+0x8a>
			stepp_1.step_down --;                   // считаем переменную количества шагов от конца
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	; (8001f68 <search_zero+0x178>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	1e5a      	subs	r2, r3, #1
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <search_zero+0x178>)
 8001e46:	60da      	str	r2, [r3, #12]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8001e48:	2390      	movs	r3, #144	; 0x90
 8001e4a:	05db      	lsls	r3, r3, #23
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4013      	ands	r3, r2
 8001e52:	d009      	beq.n	8001e68 <search_zero+0x78>
				STEP1_OFF;                          // если 1 то выставим 0
 8001e54:	2390      	movs	r3, #144	; 0x90
 8001e56:	05db      	lsls	r3, r3, #23
 8001e58:	699a      	ldr	r2, [r3, #24]
 8001e5a:	2390      	movs	r3, #144	; 0x90
 8001e5c:	05db      	lsls	r3, r3, #23
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	0249      	lsls	r1, r1, #9
 8001e62:	430a      	orrs	r2, r1
 8001e64:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8001e66:	e016      	b.n	8001e96 <search_zero+0xa6>
			else
				STEP1_ON;                           // если же там 0 то установим 1 на выходе
 8001e68:	2390      	movs	r3, #144	; 0x90
 8001e6a:	05db      	lsls	r3, r3, #23
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	2390      	movs	r3, #144	; 0x90
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	2101      	movs	r1, #1
 8001e74:	430a      	orrs	r2, r1
 8001e76:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8001e78:	e00d      	b.n	8001e96 <search_zero+0xa6>
		} else {
			flags.zero_pos1 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <search_zero+0x170>)
 8001e7c:	781a      	ldrb	r2, [r3, #0]
 8001e7e:	2101      	movs	r1, #1
 8001e80:	430a      	orrs	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]
			STEP1_OFF;                              // и сбрасываем степ в 0
 8001e84:	2390      	movs	r3, #144	; 0x90
 8001e86:	05db      	lsls	r3, r3, #23
 8001e88:	699a      	ldr	r2, [r3, #24]
 8001e8a:	2390      	movs	r3, #144	; 0x90
 8001e8c:	05db      	lsls	r3, r3, #23
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0249      	lsls	r1, r1, #9
 8001e92:	430a      	orrs	r2, r1
 8001e94:	619a      	str	r2, [r3, #24]
		}
		if (READ_LIM2 && !flags.zero_pos2) {        // считаем состояние концевика, если не ноль, шагаем
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <search_zero+0x174>)
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2240      	movs	r2, #64	; 0x40
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d024      	beq.n	8001eea <search_zero+0xfa>
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <search_zero+0x170>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11d      	bne.n	8001eea <search_zero+0xfa>
			stepp_2.step_down --;
 8001eae:	4b2f      	ldr	r3, [pc, #188]	; (8001f6c <search_zero+0x17c>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	1e5a      	subs	r2, r3, #1
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <search_zero+0x17c>)
 8001eb6:	60da      	str	r2, [r3, #12]
			if (GPIOA->IDR & GPIO_IDR_1)
 8001eb8:	2390      	movs	r3, #144	; 0x90
 8001eba:	05db      	lsls	r3, r3, #23
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <search_zero+0xe8>
				STEP2_OFF;                          // считаем что у нас сейчас в регистре выхода, если 1 то выставим 0
 8001ec4:	2390      	movs	r3, #144	; 0x90
 8001ec6:	05db      	lsls	r3, r3, #23
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	2390      	movs	r3, #144	; 0x90
 8001ecc:	05db      	lsls	r3, r3, #23
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0289      	lsls	r1, r1, #10
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 8001ed6:	e016      	b.n	8001f06 <search_zero+0x116>
			else
				STEP2_ON;                           // если же там 0 то установим 1 на выходе
 8001ed8:	2390      	movs	r3, #144	; 0x90
 8001eda:	05db      	lsls	r3, r3, #23
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	2390      	movs	r3, #144	; 0x90
 8001ee0:	05db      	lsls	r3, r3, #23
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 8001ee8:	e00d      	b.n	8001f06 <search_zero+0x116>
		} else {
			flags.zero_pos2 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <search_zero+0x170>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	2102      	movs	r1, #2
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	701a      	strb	r2, [r3, #0]
			STEP2_OFF;
 8001ef4:	2390      	movs	r3, #144	; 0x90
 8001ef6:	05db      	lsls	r3, r3, #23
 8001ef8:	699a      	ldr	r2, [r3, #24]
 8001efa:	2390      	movs	r3, #144	; 0x90
 8001efc:	05db      	lsls	r3, r3, #23
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0289      	lsls	r1, r1, #10
 8001f02:	430a      	orrs	r2, r1
 8001f04:	619a      	str	r2, [r3, #24]
		}
	}

	if (flags.zero_pos1 && flags.zero_pos2) {       // если сработало два флага значит мы в нулях
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <search_zero+0x170>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d022      	beq.n	8001f5a <search_zero+0x16a>
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <search_zero+0x170>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2202      	movs	r2, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01b      	beq.n	8001f5a <search_zero+0x16a>
		flags.zero_ok = TRUE;                       // установим флаг
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <search_zero+0x170>)
 8001f24:	781a      	ldrb	r2, [r3, #0]
 8001f26:	2118      	movs	r1, #24
 8001f28:	438a      	bics	r2, r1
 8001f2a:	1c11      	adds	r1, r2, #0
 8001f2c:	2208      	movs	r2, #8
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
		stepp_1.last_steps = 0;                     // обнулим нафиг все
 8001f32:	4b0d      	ldr	r3, [pc, #52]	; (8001f68 <search_zero+0x178>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
		stepp_2.last_steps = 0;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <search_zero+0x17c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
		stepp_1.curent_steps = stepp_1.last_steps;
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <search_zero+0x178>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b09      	ldr	r3, [pc, #36]	; (8001f68 <search_zero+0x178>)
 8001f44:	605a      	str	r2, [r3, #4]
		stepp_2.curent_steps = stepp_2.last_steps;
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <search_zero+0x17c>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <search_zero+0x17c>)
 8001f4c:	605a      	str	r2, [r3, #4]
		//flags.zero_in_programm = FALSE;             // сбросить флаг обнуления в программе
		//flags.reset_setting = TRUE;                 // установить флаг что нужно перенастроить шаги, скорость
		CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);       // выключим прерывание по обновлению
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <search_zero+0x180>)
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <search_zero+0x180>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	438a      	bics	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]
	}
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000006c 	.word	0x2000006c
 8001f64:	48000400 	.word	0x48000400
 8001f68:	2000004c 	.word	0x2000004c
 8001f6c:	2000005c 	.word	0x2000005c
 8001f70:	40014800 	.word	0x40014800

08001f74 <revers_zero>:

static inline void revers_zero (void){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	if (!flags.start_zero) {                        // если мы первый раз заходим в прерывание
 8001f78:	4b54      	ldr	r3, [pc, #336]	; (80020cc <revers_zero+0x158>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <revers_zero+0x3a>
		flags.start_zero = TRUE;                    // сбросим флаг первого раза
 8001f86:	4b51      	ldr	r3, [pc, #324]	; (80020cc <revers_zero+0x158>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	701a      	strb	r2, [r3, #0]
		DIR1_OFF;                                   // установим дир в нужное положение, чтоб шагать к концевику
 8001f90:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <revers_zero+0x15c>)
 8001f92:	699a      	ldr	r2, [r3, #24]
 8001f94:	4b4e      	ldr	r3, [pc, #312]	; (80020d0 <revers_zero+0x15c>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	0389      	lsls	r1, r1, #14
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	619a      	str	r2, [r3, #24]
		DIR2_OFF;                                   // сюда заходим один раз чтоб сначала установить дир, а потом шагать
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <revers_zero+0x15c>)
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <revers_zero+0x15c>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0349      	lsls	r1, r1, #13
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	619a      	str	r2, [r3, #24]
 8001fac:	e06f      	b.n	800208e <revers_zero+0x11a>
	} else {                                        // если уже не первый раз заходим
		if (!READ_LIM1 && !flags.zero_pos1) {       // считаем состояние концевика, если не ноль, шагаем
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <revers_zero+0x15c>)
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2280      	movs	r2, #128	; 0x80
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d124      	bne.n	8002002 <revers_zero+0x8e>
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <revers_zero+0x158>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d11d      	bne.n	8002002 <revers_zero+0x8e>
			stepp_1.step_up ++;                     // считаем переменную количества шагов от конца
 8001fc6:	4b43      	ldr	r3, [pc, #268]	; (80020d4 <revers_zero+0x160>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	4b41      	ldr	r3, [pc, #260]	; (80020d4 <revers_zero+0x160>)
 8001fce:	609a      	str	r2, [r3, #8]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8001fd0:	2390      	movs	r3, #144	; 0x90
 8001fd2:	05db      	lsls	r3, r3, #23
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <revers_zero+0x7c>
				STEP1_OFF;                          // если 1 то выставим 0
 8001fdc:	2390      	movs	r3, #144	; 0x90
 8001fde:	05db      	lsls	r3, r3, #23
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	2390      	movs	r3, #144	; 0x90
 8001fe4:	05db      	lsls	r3, r3, #23
 8001fe6:	2180      	movs	r1, #128	; 0x80
 8001fe8:	0249      	lsls	r1, r1, #9
 8001fea:	430a      	orrs	r2, r1
 8001fec:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8001fee:	e016      	b.n	800201e <revers_zero+0xaa>
			else
				STEP1_ON;                           // если же там 0 то установим 1 на выходе
 8001ff0:	2390      	movs	r3, #144	; 0x90
 8001ff2:	05db      	lsls	r3, r3, #23
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	2390      	movs	r3, #144	; 0x90
 8001ff8:	05db      	lsls	r3, r3, #23
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_0)            // считаем что у нас сейчас в регистре выхода,
 8002000:	e00d      	b.n	800201e <revers_zero+0xaa>
		} else {
			flags.zero_pos1 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <revers_zero+0x158>)
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	2101      	movs	r1, #1
 8002008:	430a      	orrs	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
			STEP1_OFF;                              // и сбрасываем степ в 0
 800200c:	2390      	movs	r3, #144	; 0x90
 800200e:	05db      	lsls	r3, r3, #23
 8002010:	699a      	ldr	r2, [r3, #24]
 8002012:	2390      	movs	r3, #144	; 0x90
 8002014:	05db      	lsls	r3, r3, #23
 8002016:	2180      	movs	r1, #128	; 0x80
 8002018:	0249      	lsls	r1, r1, #9
 800201a:	430a      	orrs	r2, r1
 800201c:	619a      	str	r2, [r3, #24]
		}
		if (!READ_LIM2 && !flags.zero_pos2) {       // считаем состояние концевика, если не ноль, шагаем
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <revers_zero+0x15c>)
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	4013      	ands	r3, r2
 8002026:	d124      	bne.n	8002072 <revers_zero+0xfe>
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <revers_zero+0x158>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2202      	movs	r2, #2
 800202e:	4013      	ands	r3, r2
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d11d      	bne.n	8002072 <revers_zero+0xfe>
			stepp_2.step_up ++;
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <revers_zero+0x164>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <revers_zero+0x164>)
 800203e:	609a      	str	r2, [r3, #8]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002040:	2390      	movs	r3, #144	; 0x90
 8002042:	05db      	lsls	r3, r3, #23
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2202      	movs	r2, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d009      	beq.n	8002060 <revers_zero+0xec>
				STEP2_OFF;                          // считаем что у нас сейчас в регистре выхода, если 1 то выставим 0
 800204c:	2390      	movs	r3, #144	; 0x90
 800204e:	05db      	lsls	r3, r3, #23
 8002050:	699a      	ldr	r2, [r3, #24]
 8002052:	2390      	movs	r3, #144	; 0x90
 8002054:	05db      	lsls	r3, r3, #23
 8002056:	2180      	movs	r1, #128	; 0x80
 8002058:	0289      	lsls	r1, r1, #10
 800205a:	430a      	orrs	r2, r1
 800205c:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 800205e:	e016      	b.n	800208e <revers_zero+0x11a>
			else
				STEP2_ON;                           // если же там 0 то установим 1 на выходе
 8002060:	2390      	movs	r3, #144	; 0x90
 8002062:	05db      	lsls	r3, r3, #23
 8002064:	699a      	ldr	r2, [r3, #24]
 8002066:	2390      	movs	r3, #144	; 0x90
 8002068:	05db      	lsls	r3, r3, #23
 800206a:	2102      	movs	r1, #2
 800206c:	430a      	orrs	r2, r1
 800206e:	619a      	str	r2, [r3, #24]
			if (GPIOA->IDR & GPIO_IDR_1)
 8002070:	e00d      	b.n	800208e <revers_zero+0x11a>
		} else {
			flags.zero_pos2 = TRUE;                 // если вдруг сработал концевик то ставим флаг
 8002072:	4b16      	ldr	r3, [pc, #88]	; (80020cc <revers_zero+0x158>)
 8002074:	781a      	ldrb	r2, [r3, #0]
 8002076:	2102      	movs	r1, #2
 8002078:	430a      	orrs	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
			STEP2_OFF;
 800207c:	2390      	movs	r3, #144	; 0x90
 800207e:	05db      	lsls	r3, r3, #23
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	2390      	movs	r3, #144	; 0x90
 8002084:	05db      	lsls	r3, r3, #23
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	0289      	lsls	r1, r1, #10
 800208a:	430a      	orrs	r2, r1
 800208c:	619a      	str	r2, [r3, #24]
		}
	}

	if (flags.zero_pos1 && flags.zero_pos2) {       // если сработало два флага значит мы в нулях
 800208e:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <revers_zero+0x158>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2201      	movs	r2, #1
 8002094:	4013      	ands	r3, r2
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d014      	beq.n	80020c6 <revers_zero+0x152>
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <revers_zero+0x158>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00d      	beq.n	80020c6 <revers_zero+0x152>
		flags.zero_ok = TRUE;                       // установим флаг
 80020aa:	4b08      	ldr	r3, [pc, #32]	; (80020cc <revers_zero+0x158>)
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	2118      	movs	r1, #24
 80020b0:	438a      	bics	r2, r1
 80020b2:	1c11      	adds	r1, r2, #0
 80020b4:	2208      	movs	r2, #8
 80020b6:	430a      	orrs	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
		CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);       // выключим прерывание по обновлению
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <revers_zero+0x168>)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <revers_zero+0x168>)
 80020c0:	2101      	movs	r1, #1
 80020c2:	438a      	bics	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
	}
}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000006c 	.word	0x2000006c
 80020d0:	48000400 	.word	0x48000400
 80020d4:	2000004c 	.word	0x2000004c
 80020d8:	2000005c 	.word	0x2000005c
 80020dc:	40014800 	.word	0x40014800

080020e0 <new_step_go1>:

static inline void new_step_go1(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	if (flags.balance_1) {                                   // если новое движение
 80020e4:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <new_step_go1+0xd4>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2220      	movs	r2, #32
 80020ea:	4013      	ands	r3, r2
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <new_step_go1+0x46>
		if (stepp_1.curent_steps > stepp_1.last_steps)       // если у нас движение в одну сторону
 80020f2:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <new_step_go1+0xd8>)
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <new_step_go1+0xd8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dd06      	ble.n	800210c <new_step_go1+0x2c>
			DIR1_ON;                                         // установим единичку на дир
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <new_step_go1+0xdc>)
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <new_step_go1+0xdc>)
 8002104:	2120      	movs	r1, #32
 8002106:	430a      	orrs	r2, r1
 8002108:	619a      	str	r2, [r3, #24]
 800210a:	e006      	b.n	800211a <new_step_go1+0x3a>
		else                                                 // если в другую
			DIR1_OFF;                                        // установим нолик на дир
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <new_step_go1+0xdc>)
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <new_step_go1+0xdc>)
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	0389      	lsls	r1, r1, #14
 8002116:	430a      	orrs	r2, r1
 8002118:	619a      	str	r2, [r3, #24]
		flags.balance_1 = FALSE;                             // сбросим новое движение
 800211a:	4b26      	ldr	r3, [pc, #152]	; (80021b4 <new_step_go1+0xd4>)
 800211c:	781a      	ldrb	r2, [r3, #0]
 800211e:	2120      	movs	r1, #32
 8002120:	438a      	bics	r2, r1
 8002122:	701a      	strb	r2, [r3, #0]
			else
				stepp_1.last_steps ++;
			}
		}
	}
}
 8002124:	e042      	b.n	80021ac <new_step_go1+0xcc>
		if (stepp_1.curent_steps == stepp_1.last_steps) {    // если шаги равны то пропускаем движение
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <new_step_go1+0xd8>)
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <new_step_go1+0xd8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d113      	bne.n	800215a <new_step_go1+0x7a>
			CLEAR_BIT(TIM17->DIER, TIM_DIER_UIE);            // если шагать не нужно выключим прерывания
 8002132:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <new_step_go1+0xe0>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <new_step_go1+0xe0>)
 8002138:	2101      	movs	r1, #1
 800213a:	438a      	bics	r2, r1
 800213c:	60da      	str	r2, [r3, #12]
			stepp_1.last_steps = stepp_1.curent_steps;       // приравняем значения
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <new_step_go1+0xd8>)
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <new_step_go1+0xd8>)
 8002144:	601a      	str	r2, [r3, #0]
			STEP1_OFF;                                       // и сбросим степ
 8002146:	2390      	movs	r3, #144	; 0x90
 8002148:	05db      	lsls	r3, r3, #23
 800214a:	699a      	ldr	r2, [r3, #24]
 800214c:	2390      	movs	r3, #144	; 0x90
 800214e:	05db      	lsls	r3, r3, #23
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0249      	lsls	r1, r1, #9
 8002154:	430a      	orrs	r2, r1
 8002156:	619a      	str	r2, [r3, #24]
}
 8002158:	e028      	b.n	80021ac <new_step_go1+0xcc>
			if (GPIOA->IDR & GPIO_IDR_0) {                   // считаем регистр, если там единичка
 800215a:	2390      	movs	r3, #144	; 0x90
 800215c:	05db      	lsls	r3, r3, #23
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2201      	movs	r2, #1
 8002162:	4013      	ands	r3, r2
 8002164:	d009      	beq.n	800217a <new_step_go1+0x9a>
				STEP1_OFF;                                   // переведем степ в 0
 8002166:	2390      	movs	r3, #144	; 0x90
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	699a      	ldr	r2, [r3, #24]
 800216c:	2390      	movs	r3, #144	; 0x90
 800216e:	05db      	lsls	r3, r3, #23
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0249      	lsls	r1, r1, #9
 8002174:	430a      	orrs	r2, r1
 8002176:	619a      	str	r2, [r3, #24]
}
 8002178:	e018      	b.n	80021ac <new_step_go1+0xcc>
				STEP1_ON;                                    // переведем степ в 1
 800217a:	2390      	movs	r3, #144	; 0x90
 800217c:	05db      	lsls	r3, r3, #23
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	2390      	movs	r3, #144	; 0x90
 8002182:	05db      	lsls	r3, r3, #23
 8002184:	2101      	movs	r1, #1
 8002186:	430a      	orrs	r2, r1
 8002188:	619a      	str	r2, [r3, #24]
			if (stepp_1.curent_steps < stepp_1.last_steps)
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <new_step_go1+0xd8>)
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <new_step_go1+0xd8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	da05      	bge.n	80021a2 <new_step_go1+0xc2>
				stepp_1.last_steps --;                       // а так же изменим текущие шаги
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <new_step_go1+0xd8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <new_step_go1+0xd8>)
 800219e:	601a      	str	r2, [r3, #0]
}
 80021a0:	e004      	b.n	80021ac <new_step_go1+0xcc>
				stepp_1.last_steps ++;
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <new_step_go1+0xd8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <new_step_go1+0xd8>)
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	46c0      	nop			; (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	2000006c 	.word	0x2000006c
 80021b8:	2000004c 	.word	0x2000004c
 80021bc:	48000400 	.word	0x48000400
 80021c0:	40014800 	.word	0x40014800

080021c4 <new_step_go2>:

static inline void new_step_go2(void) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	if (flags.balance_2) {
 80021c8:	4b33      	ldr	r3, [pc, #204]	; (8002298 <new_step_go2+0xd4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2240      	movs	r2, #64	; 0x40
 80021ce:	4013      	ands	r3, r2
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d019      	beq.n	800220a <new_step_go2+0x46>
		if (stepp_2.curent_steps > stepp_2.last_steps)
 80021d6:	4b31      	ldr	r3, [pc, #196]	; (800229c <new_step_go2+0xd8>)
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4b30      	ldr	r3, [pc, #192]	; (800229c <new_step_go2+0xd8>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	dd06      	ble.n	80021f0 <new_step_go2+0x2c>
			DIR2_ON;                                         // установим единичку на дир
 80021e2:	4b2f      	ldr	r3, [pc, #188]	; (80022a0 <new_step_go2+0xdc>)
 80021e4:	699a      	ldr	r2, [r3, #24]
 80021e6:	4b2e      	ldr	r3, [pc, #184]	; (80022a0 <new_step_go2+0xdc>)
 80021e8:	2110      	movs	r1, #16
 80021ea:	430a      	orrs	r2, r1
 80021ec:	619a      	str	r2, [r3, #24]
 80021ee:	e006      	b.n	80021fe <new_step_go2+0x3a>
		else
			DIR2_OFF;                                        // установим нолик на дир
 80021f0:	4b2b      	ldr	r3, [pc, #172]	; (80022a0 <new_step_go2+0xdc>)
 80021f2:	699a      	ldr	r2, [r3, #24]
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <new_step_go2+0xdc>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0349      	lsls	r1, r1, #13
 80021fa:	430a      	orrs	r2, r1
 80021fc:	619a      	str	r2, [r3, #24]
		flags.balance_2 = FALSE;
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <new_step_go2+0xd4>)
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	2140      	movs	r1, #64	; 0x40
 8002204:	438a      	bics	r2, r1
 8002206:	701a      	strb	r2, [r3, #0]
			else
				stepp_2.last_steps ++;
			}
		}
	}
}
 8002208:	e042      	b.n	8002290 <new_step_go2+0xcc>
		if (stepp_2.curent_steps == stepp_2.last_steps) {    // если шаги равны то пропускаем движение
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <new_step_go2+0xd8>)
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <new_step_go2+0xd8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d113      	bne.n	800223e <new_step_go2+0x7a>
			CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);            // если шагать не нужно выключим прерывания
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <new_step_go2+0xe0>)
 8002218:	68da      	ldr	r2, [r3, #12]
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <new_step_go2+0xe0>)
 800221c:	2101      	movs	r1, #1
 800221e:	438a      	bics	r2, r1
 8002220:	60da      	str	r2, [r3, #12]
			stepp_2.last_steps = stepp_2.curent_steps;       // приравняем значения
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <new_step_go2+0xd8>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <new_step_go2+0xd8>)
 8002228:	601a      	str	r2, [r3, #0]
			STEP2_OFF;                                       // и сбросим степ
 800222a:	2390      	movs	r3, #144	; 0x90
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	2390      	movs	r3, #144	; 0x90
 8002232:	05db      	lsls	r3, r3, #23
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0289      	lsls	r1, r1, #10
 8002238:	430a      	orrs	r2, r1
 800223a:	619a      	str	r2, [r3, #24]
}
 800223c:	e028      	b.n	8002290 <new_step_go2+0xcc>
			if (GPIOA->IDR & GPIO_IDR_1) {                   // считаем регистр, если там единичка
 800223e:	2390      	movs	r3, #144	; 0x90
 8002240:	05db      	lsls	r3, r3, #23
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	2202      	movs	r2, #2
 8002246:	4013      	ands	r3, r2
 8002248:	d009      	beq.n	800225e <new_step_go2+0x9a>
				STEP2_OFF;                                   // переведем степ в 0
 800224a:	2390      	movs	r3, #144	; 0x90
 800224c:	05db      	lsls	r3, r3, #23
 800224e:	699a      	ldr	r2, [r3, #24]
 8002250:	2390      	movs	r3, #144	; 0x90
 8002252:	05db      	lsls	r3, r3, #23
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0289      	lsls	r1, r1, #10
 8002258:	430a      	orrs	r2, r1
 800225a:	619a      	str	r2, [r3, #24]
}
 800225c:	e018      	b.n	8002290 <new_step_go2+0xcc>
				STEP2_ON;                                    // переведем степ в 1
 800225e:	2390      	movs	r3, #144	; 0x90
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	2390      	movs	r3, #144	; 0x90
 8002266:	05db      	lsls	r3, r3, #23
 8002268:	2102      	movs	r1, #2
 800226a:	430a      	orrs	r2, r1
 800226c:	619a      	str	r2, [r3, #24]
			if (stepp_2.curent_steps < stepp_2.last_steps)
 800226e:	4b0b      	ldr	r3, [pc, #44]	; (800229c <new_step_go2+0xd8>)
 8002270:	685a      	ldr	r2, [r3, #4]
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <new_step_go2+0xd8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	da05      	bge.n	8002286 <new_step_go2+0xc2>
				stepp_2.last_steps --;                       // а так же изменим текущие шаги
 800227a:	4b08      	ldr	r3, [pc, #32]	; (800229c <new_step_go2+0xd8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	1e5a      	subs	r2, r3, #1
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <new_step_go2+0xd8>)
 8002282:	601a      	str	r2, [r3, #0]
}
 8002284:	e004      	b.n	8002290 <new_step_go2+0xcc>
				stepp_2.last_steps ++;
 8002286:	4b05      	ldr	r3, [pc, #20]	; (800229c <new_step_go2+0xd8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <new_step_go2+0xd8>)
 800228e:	601a      	str	r2, [r3, #0]
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	2000006c 	.word	0x2000006c
 800229c:	2000005c 	.word	0x2000005c
 80022a0:	48000400 	.word	0x48000400
 80022a4:	40014400 	.word	0x40014400

080022a8 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	TIM17->SR &= ~TIM_SR_UIF;                                // сбросим флаг прерывания
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <TIM17_IRQHandler+0x44>)
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <TIM17_IRQHandler+0x44>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	611a      	str	r2, [r3, #16]
	if (flags.zero_ok == 0) {
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <TIM17_IRQHandler+0x48>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2218      	movs	r2, #24
 80022be:	4013      	ands	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d102      	bne.n	80022cc <TIM17_IRQHandler+0x24>
		search_zero();
 80022c6:	f7ff fd93 	bl	8001df0 <search_zero>
	} else if (flags.zero_ok == 1) {
		new_step_go1();
	} else {
		revers_zero ();
	}
}
 80022ca:	e00b      	b.n	80022e4 <TIM17_IRQHandler+0x3c>
	} else if (flags.zero_ok == 1) {
 80022cc:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <TIM17_IRQHandler+0x48>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2218      	movs	r2, #24
 80022d2:	4013      	ands	r3, r2
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d102      	bne.n	80022e0 <TIM17_IRQHandler+0x38>
		new_step_go1();
 80022da:	f7ff ff01 	bl	80020e0 <new_step_go1>
}
 80022de:	e001      	b.n	80022e4 <TIM17_IRQHandler+0x3c>
		revers_zero ();
 80022e0:	f7ff fe48 	bl	8001f74 <revers_zero>
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	40014800 	.word	0x40014800
 80022f0:	2000006c 	.word	0x2000006c

080022f4 <TIM16_IRQHandler>:

void TIM16_IRQHandler(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
	TIM16->SR &= ~TIM_SR_UIF;                                // сбросим флаг прерывания
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <TIM16_IRQHandler+0x1c>)
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <TIM16_IRQHandler+0x1c>)
 80022fe:	2101      	movs	r1, #1
 8002300:	438a      	bics	r2, r1
 8002302:	611a      	str	r2, [r3, #16]
	new_step_go2();
 8002304:	f7ff ff5e 	bl	80021c4 <new_step_go2>
}
 8002308:	46c0      	nop			; (mov r8, r8)
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40014400 	.word	0x40014400

08002314 <stepper>:

uint32_t stepper( int32_t stepper, uint32_t num_motor) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
	if (num_motor > 1) return 0;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d901      	bls.n	8002328 <stepper+0x14>
 8002324:	2300      	movs	r3, #0
 8002326:	e028      	b.n	800237a <stepper+0x66>
	if (num_motor == 0) {
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d110      	bne.n	8002350 <stepper+0x3c>
		stepp_1.curent_steps = stepper;
 800232e:	4b15      	ldr	r3, [pc, #84]	; (8002384 <stepper+0x70>)
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	605a      	str	r2, [r3, #4]
		flags.balance_1 = 1;
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <stepper+0x74>)
 8002336:	781a      	ldrb	r2, [r3, #0]
 8002338:	2120      	movs	r1, #32
 800233a:	430a      	orrs	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <stepper+0x78>)
 8002340:	2200      	movs	r2, #0
 8002342:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <stepper+0x78>)
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <stepper+0x78>)
 800234a:	2101      	movs	r1, #1
 800234c:	430a      	orrs	r2, r1
 800234e:	60da      	str	r2, [r3, #12]
	}
	if (num_motor == 1) {
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d110      	bne.n	8002378 <stepper+0x64>
		stepp_2.curent_steps = stepper;
 8002356:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <stepper+0x7c>)
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]
		flags.balance_2 = 1;
 800235c:	4b0a      	ldr	r3, [pc, #40]	; (8002388 <stepper+0x74>)
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	2140      	movs	r1, #64	; 0x40
 8002362:	430a      	orrs	r2, r1
 8002364:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <stepper+0x80>)
 8002368:	2200      	movs	r2, #0
 800236a:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM16->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 800236c:	4b09      	ldr	r3, [pc, #36]	; (8002394 <stepper+0x80>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4b08      	ldr	r3, [pc, #32]	; (8002394 <stepper+0x80>)
 8002372:	2101      	movs	r1, #1
 8002374:	430a      	orrs	r2, r1
 8002376:	60da      	str	r2, [r3, #12]
	}
	return 1;
 8002378:	2301      	movs	r3, #1
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b002      	add	sp, #8
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	2000004c 	.word	0x2000004c
 8002388:	2000006c 	.word	0x2000006c
 800238c:	40014800 	.word	0x40014800
 8002390:	2000005c 	.word	0x2000005c
 8002394:	40014400 	.word	0x40014400

08002398 <extrn_step>:

uint32_t extrn_step(uint32_t stepper, uint32_t num_motor){
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af02      	add	r7, sp, #8
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	if (num_motor > 1) return 0;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d901      	bls.n	80023ac <extrn_step+0x14>
 80023a8:	2300      	movs	r3, #0
 80023aa:	e04f      	b.n	800244c <extrn_step+0xb4>
	if (stepper > RESOLUTION) return 0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a29      	ldr	r2, [pc, #164]	; (8002454 <extrn_step+0xbc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d901      	bls.n	80023b8 <extrn_step+0x20>
 80023b4:	2300      	movs	r3, #0
 80023b6:	e049      	b.n	800244c <extrn_step+0xb4>
	if (num_motor == 0) {
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d120      	bne.n	8002400 <extrn_step+0x68>
		stepp_1.curent_steps = map (stepper, 0, RESOLUTION, (stepp_1.step_up<<4)-PROTECT, (stepp_1.step_down<<4)-PROTECT); // >>1 для полного шага
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <extrn_step+0xc0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	3b0a      	subs	r3, #10
 80023c8:	0019      	movs	r1, r3
 80023ca:	4b23      	ldr	r3, [pc, #140]	; (8002458 <extrn_step+0xc0>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	3b0a      	subs	r3, #10
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <extrn_step+0xbc>)
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	000b      	movs	r3, r1
 80023d8:	2100      	movs	r1, #0
 80023da:	f7fe fff7 	bl	80013cc <map>
 80023de:	0002      	movs	r2, r0
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <extrn_step+0xc0>)
 80023e2:	605a      	str	r2, [r3, #4]
		flags.balance_1 = 1;
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <extrn_step+0xc4>)
 80023e6:	781a      	ldrb	r2, [r3, #0]
 80023e8:	2120      	movs	r1, #32
 80023ea:	430a      	orrs	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 80023ee:	4b1c      	ldr	r3, [pc, #112]	; (8002460 <extrn_step+0xc8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 80023f4:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <extrn_step+0xc8>)
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <extrn_step+0xc8>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]
	}
	if (num_motor == 1) {
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d121      	bne.n	800244a <extrn_step+0xb2>
		stepp_2.curent_steps = map (stepper, 0,RESOLUTION, (stepp_2.step_down<<4)-PROTECT, (stepp_2.step_up<<4)-PROTECT); // тут умножение на 32 заменено смещением на 4
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <extrn_step+0xcc>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	3b0a      	subs	r3, #10
 8002410:	001a      	movs	r2, r3
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <extrn_step+0xcc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	3b0a      	subs	r3, #10
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <extrn_step+0xbc>)
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	0013      	movs	r3, r2
 8002420:	000a      	movs	r2, r1
 8002422:	2100      	movs	r1, #0
 8002424:	f7fe ffd2 	bl	80013cc <map>
 8002428:	0002      	movs	r2, r0
 800242a:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <extrn_step+0xcc>)
 800242c:	605a      	str	r2, [r3, #4]
		flags.balance_2 = 1;     // но так как у нас переменная считается в прерывании 2 раза то нужно еще и разделит на 2, но можем просто делить на 16
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <extrn_step+0xc4>)
 8002430:	781a      	ldrb	r2, [r3, #0]
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	430a      	orrs	r2, r1
 8002436:	701a      	strb	r2, [r3, #0]
		CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <extrn_step+0xd0>)
 800243a:	2200      	movs	r2, #0
 800243c:	625a      	str	r2, [r3, #36]	; 0x24
	    SET_BIT(TIM16->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <extrn_step+0xd0>)
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <extrn_step+0xd0>)
 8002444:	2101      	movs	r1, #1
 8002446:	430a      	orrs	r2, r1
 8002448:	60da      	str	r2, [r3, #12]
	}
	return 1;
 800244a:	2301      	movs	r3, #1
}
 800244c:	0018      	movs	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	b002      	add	sp, #8
 8002452:	bd80      	pop	{r7, pc}
 8002454:	00002710 	.word	0x00002710
 8002458:	2000004c 	.word	0x2000004c
 800245c:	2000006c 	.word	0x2000006c
 8002460:	40014800 	.word	0x40014800
 8002464:	2000005c 	.word	0x2000005c
 8002468:	40014400 	.word	0x40014400

0800246c <init_struct>:

void init_struct (void){                         // инициализируем ячейки
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	flags.ir_filter = TRUE;
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <init_struct+0x78>)
 8002472:	781a      	ldrb	r2, [r3, #0]
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	4249      	negs	r1, r1
 8002478:	430a      	orrs	r2, r1
 800247a:	701a      	strb	r2, [r3, #0]
	flags.iris_drive = FALSE;
 800247c:	4b19      	ldr	r3, [pc, #100]	; (80024e4 <init_struct+0x78>)
 800247e:	785a      	ldrb	r2, [r3, #1]
 8002480:	2101      	movs	r1, #1
 8002482:	438a      	bics	r2, r1
 8002484:	705a      	strb	r2, [r3, #1]
	flags.zero_ok = TRUE;                        // это первоначальная инициализация чтоб можно было пошагать
 8002486:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <init_struct+0x78>)
 8002488:	781a      	ldrb	r2, [r3, #0]
 800248a:	2118      	movs	r1, #24
 800248c:	438a      	bics	r2, r1
 800248e:	1c11      	adds	r1, r2, #0
 8002490:	2208      	movs	r2, #8
 8002492:	430a      	orrs	r2, r1
 8002494:	701a      	strb	r2, [r3, #0]
	flags.zero_in_programm = FALSE;
 8002496:	4b13      	ldr	r3, [pc, #76]	; (80024e4 <init_struct+0x78>)
 8002498:	789a      	ldrb	r2, [r3, #2]
 800249a:	2102      	movs	r1, #2
 800249c:	438a      	bics	r2, r1
 800249e:	709a      	strb	r2, [r3, #2]
	flags.reset_setting = TRUE;
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <init_struct+0x78>)
 80024a2:	789a      	ldrb	r2, [r3, #2]
 80024a4:	2104      	movs	r1, #4
 80024a6:	430a      	orrs	r2, r1
 80024a8:	709a      	strb	r2, [r3, #2]
	flags.change_pin_conf = FALSE;
 80024aa:	4b0e      	ldr	r3, [pc, #56]	; (80024e4 <init_struct+0x78>)
 80024ac:	789a      	ldrb	r2, [r3, #2]
 80024ae:	2140      	movs	r1, #64	; 0x40
 80024b0:	438a      	bics	r2, r1
 80024b2:	709a      	strb	r2, [r3, #2]
	flags.iwdt_res = FALSE;
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <init_struct+0x78>)
 80024b6:	789a      	ldrb	r2, [r3, #2]
 80024b8:	2108      	movs	r1, #8
 80024ba:	438a      	bics	r2, r1
 80024bc:	709a      	strb	r2, [r3, #2]
	stepp_1.last_steps = 0;                      // это чтоб с самого начала могли пошагать в -8000
 80024be:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <init_struct+0x7c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
	stepp_2.last_steps = 0;
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <init_struct+0x80>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
	STEP3_OFF;                                   // ?
 80024ca:	2390      	movs	r3, #144	; 0x90
 80024cc:	05db      	lsls	r3, r3, #23
 80024ce:	699a      	ldr	r2, [r3, #24]
 80024d0:	2390      	movs	r3, #144	; 0x90
 80024d2:	05db      	lsls	r3, r3, #23
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	0409      	lsls	r1, r1, #16
 80024d8:	430a      	orrs	r2, r1
 80024da:	619a      	str	r2, [r3, #24]
}
 80024dc:	46c0      	nop			; (mov r8, r8)
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	2000006c 	.word	0x2000006c
 80024e8:	2000004c 	.word	0x2000004c
 80024ec:	2000005c 	.word	0x2000005c

080024f0 <zero_position>:

void zero_position(void) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
	CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <zero_position+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);         // а тут выключим прерывания
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <zero_position+0x64>)
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <zero_position+0x64>)
 8002500:	2101      	movs	r1, #1
 8002502:	438a      	bics	r2, r1
 8002504:	60da      	str	r2, [r3, #12]
	flags.zero_ok = FALSE;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <zero_position+0x68>)
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	2118      	movs	r1, #24
 800250c:	438a      	bics	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
	flags.zero_pos1 = FALSE;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <zero_position+0x68>)
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	2101      	movs	r1, #1
 8002516:	438a      	bics	r2, r1
 8002518:	701a      	strb	r2, [r3, #0]
	flags.zero_pos2 = FALSE;
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <zero_position+0x68>)
 800251c:	781a      	ldrb	r2, [r3, #0]
 800251e:	2102      	movs	r1, #2
 8002520:	438a      	bics	r2, r1
 8002522:	701a      	strb	r2, [r3, #0]
	flags.start_zero = FALSE;
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <zero_position+0x68>)
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	2104      	movs	r1, #4
 800252a:	438a      	bics	r2, r1
 800252c:	701a      	strb	r2, [r3, #0]
	stepp_1.step_down = 0;                        // сбросим счетчик шагов "вниз"
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <zero_position+0x6c>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
	stepp_2.step_down = 0;
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <zero_position+0x70>)
 8002536:	2200      	movs	r2, #0
 8002538:	60da      	str	r2, [r3, #12]
	CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <zero_position+0x74>)
 800253c:	2200      	movs	r2, #0
 800253e:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <zero_position+0x74>)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4b07      	ldr	r3, [pc, #28]	; (8002564 <zero_position+0x74>)
 8002546:	2101      	movs	r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	40014400 	.word	0x40014400
 8002558:	2000006c 	.word	0x2000006c
 800255c:	2000004c 	.word	0x2000004c
 8002560:	2000005c 	.word	0x2000005c
 8002564:	40014800 	.word	0x40014800

08002568 <search_steps>:

void search_steps (void) {                        // поиск количества шагов от максимума
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	CLEAR_REG(TIM16->CNT);                        // сбросим счетчик в ноль
 800256c:	4b18      	ldr	r3, [pc, #96]	; (80025d0 <search_steps+0x68>)
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
	CLEAR_BIT(TIM16->DIER, TIM_DIER_UIE);         // а тут выключим прерывания
 8002572:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <search_steps+0x68>)
 8002574:	68da      	ldr	r2, [r3, #12]
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <search_steps+0x68>)
 8002578:	2101      	movs	r1, #1
 800257a:	438a      	bics	r2, r1
 800257c:	60da      	str	r2, [r3, #12]
	stepp_1.step_up = 0;                          // сбросим счетчик шагов "вверх"
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <search_steps+0x6c>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
	stepp_2.step_up = 0;
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <search_steps+0x70>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
	flags.zero_ok = 2;
 800258a:	4b14      	ldr	r3, [pc, #80]	; (80025dc <search_steps+0x74>)
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	2118      	movs	r1, #24
 8002590:	438a      	bics	r2, r1
 8002592:	1c11      	adds	r1, r2, #0
 8002594:	2210      	movs	r2, #16
 8002596:	430a      	orrs	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
	flags.zero_pos1 = FALSE;
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <search_steps+0x74>)
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	2101      	movs	r1, #1
 80025a0:	438a      	bics	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
	flags.zero_pos2 = FALSE;
 80025a4:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <search_steps+0x74>)
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	2102      	movs	r1, #2
 80025aa:	438a      	bics	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
	flags.start_zero = FALSE;                     // это для первичного выбора направления движения
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <search_steps+0x74>)
 80025b0:	781a      	ldrb	r2, [r3, #0]
 80025b2:	2104      	movs	r1, #4
 80025b4:	438a      	bics	r2, r1
 80025b6:	701a      	strb	r2, [r3, #0]
	CLEAR_REG(TIM17->CNT);                        // сбросим счетчик в ноль
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <search_steps+0x78>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
	SET_BIT(TIM17->DIER, TIM_DIER_UIE);           // включим прерывание по обновлению
 80025be:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <search_steps+0x78>)
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <search_steps+0x78>)
 80025c4:	2101      	movs	r1, #1
 80025c6:	430a      	orrs	r2, r1
 80025c8:	60da      	str	r2, [r3, #12]

}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40014400 	.word	0x40014400
 80025d4:	2000004c 	.word	0x2000004c
 80025d8:	2000005c 	.word	0x2000005c
 80025dc:	2000006c 	.word	0x2000006c
 80025e0:	40014800 	.word	0x40014800

080025e4 <__NVIC_EnableIRQ>:
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	0002      	movs	r2, r0
 80025ec:	1dfb      	adds	r3, r7, #7
 80025ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b7f      	cmp	r3, #127	; 0x7f
 80025f6:	d809      	bhi.n	800260c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	001a      	movs	r2, r3
 80025fe:	231f      	movs	r3, #31
 8002600:	401a      	ands	r2, r3
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <__NVIC_EnableIRQ+0x30>)
 8002604:	2101      	movs	r1, #1
 8002606:	4091      	lsls	r1, r2
 8002608:	000a      	movs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b002      	add	sp, #8
 8002612:	bd80      	pop	{r7, pc}
 8002614:	e000e100 	.word	0xe000e100

08002618 <__NVIC_SetPriority>:
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	0002      	movs	r2, r0
 8002620:	6039      	str	r1, [r7, #0]
 8002622:	1dfb      	adds	r3, r7, #7
 8002624:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b7f      	cmp	r3, #127	; 0x7f
 800262c:	d828      	bhi.n	8002680 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800262e:	4a2f      	ldr	r2, [pc, #188]	; (80026ec <__NVIC_SetPriority+0xd4>)
 8002630:	1dfb      	adds	r3, r7, #7
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	b25b      	sxtb	r3, r3
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	33c0      	adds	r3, #192	; 0xc0
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	589b      	ldr	r3, [r3, r2]
 800263e:	1dfa      	adds	r2, r7, #7
 8002640:	7812      	ldrb	r2, [r2, #0]
 8002642:	0011      	movs	r1, r2
 8002644:	2203      	movs	r2, #3
 8002646:	400a      	ands	r2, r1
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	21ff      	movs	r1, #255	; 0xff
 800264c:	4091      	lsls	r1, r2
 800264e:	000a      	movs	r2, r1
 8002650:	43d2      	mvns	r2, r2
 8002652:	401a      	ands	r2, r3
 8002654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	019b      	lsls	r3, r3, #6
 800265a:	22ff      	movs	r2, #255	; 0xff
 800265c:	401a      	ands	r2, r3
 800265e:	1dfb      	adds	r3, r7, #7
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	0018      	movs	r0, r3
 8002664:	2303      	movs	r3, #3
 8002666:	4003      	ands	r3, r0
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800266c:	481f      	ldr	r0, [pc, #124]	; (80026ec <__NVIC_SetPriority+0xd4>)
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	b25b      	sxtb	r3, r3
 8002674:	089b      	lsrs	r3, r3, #2
 8002676:	430a      	orrs	r2, r1
 8002678:	33c0      	adds	r3, #192	; 0xc0
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	501a      	str	r2, [r3, r0]
}
 800267e:	e031      	b.n	80026e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002680:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <__NVIC_SetPriority+0xd8>)
 8002682:	1dfb      	adds	r3, r7, #7
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	0019      	movs	r1, r3
 8002688:	230f      	movs	r3, #15
 800268a:	400b      	ands	r3, r1
 800268c:	3b08      	subs	r3, #8
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3306      	adds	r3, #6
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	18d3      	adds	r3, r2, r3
 8002696:	3304      	adds	r3, #4
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	1dfa      	adds	r2, r7, #7
 800269c:	7812      	ldrb	r2, [r2, #0]
 800269e:	0011      	movs	r1, r2
 80026a0:	2203      	movs	r2, #3
 80026a2:	400a      	ands	r2, r1
 80026a4:	00d2      	lsls	r2, r2, #3
 80026a6:	21ff      	movs	r1, #255	; 0xff
 80026a8:	4091      	lsls	r1, r2
 80026aa:	000a      	movs	r2, r1
 80026ac:	43d2      	mvns	r2, r2
 80026ae:	401a      	ands	r2, r3
 80026b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	019b      	lsls	r3, r3, #6
 80026b6:	22ff      	movs	r2, #255	; 0xff
 80026b8:	401a      	ands	r2, r3
 80026ba:	1dfb      	adds	r3, r7, #7
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	0018      	movs	r0, r3
 80026c0:	2303      	movs	r3, #3
 80026c2:	4003      	ands	r3, r0
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026c8:	4809      	ldr	r0, [pc, #36]	; (80026f0 <__NVIC_SetPriority+0xd8>)
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	001c      	movs	r4, r3
 80026d0:	230f      	movs	r3, #15
 80026d2:	4023      	ands	r3, r4
 80026d4:	3b08      	subs	r3, #8
 80026d6:	089b      	lsrs	r3, r3, #2
 80026d8:	430a      	orrs	r2, r1
 80026da:	3306      	adds	r3, #6
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	18c3      	adds	r3, r0, r3
 80026e0:	3304      	adds	r3, #4
 80026e2:	601a      	str	r2, [r3, #0]
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b003      	add	sp, #12
 80026ea:	bd90      	pop	{r4, r7, pc}
 80026ec:	e000e100 	.word	0xe000e100
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <init_Uart1>:

struct USART_TX_only husart1;
struct USART husart2;
struct data send_data;

void init_Uart1(uint32_t baud) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN);  // включим тактирование
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <init_Uart1+0xc8>)
 80026fe:	699a      	ldr	r2, [r3, #24]
 8002700:	4b2e      	ldr	r3, [pc, #184]	; (80027bc <init_Uart1+0xc8>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	01c9      	lsls	r1, r1, #7
 8002706:	430a      	orrs	r2, r1
 8002708:	619a      	str	r2, [r3, #24]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER9_1); // альтернативную функцию включим
 800270a:	2390      	movs	r3, #144	; 0x90
 800270c:	05db      	lsls	r3, r3, #23
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	2390      	movs	r3, #144	; 0x90
 8002712:	05db      	lsls	r3, r3, #23
 8002714:	2180      	movs	r1, #128	; 0x80
 8002716:	0309      	lsls	r1, r1, #12
 8002718:	430a      	orrs	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR9); // максимальную скорость
 800271c:	2390      	movs	r3, #144	; 0x90
 800271e:	05db      	lsls	r3, r3, #23
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	2390      	movs	r3, #144	; 0x90
 8002724:	05db      	lsls	r3, r3, #23
 8002726:	21c0      	movs	r1, #192	; 0xc0
 8002728:	0309      	lsls	r1, r1, #12
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_9); // открытый колектор
 800272e:	2390      	movs	r3, #144	; 0x90
 8002730:	05db      	lsls	r3, r3, #23
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	2390      	movs	r3, #144	; 0x90
 8002736:	05db      	lsls	r3, r3, #23
 8002738:	2180      	movs	r1, #128	; 0x80
 800273a:	0089      	lsls	r1, r1, #2
 800273c:	430a      	orrs	r2, r1
 800273e:	605a      	str	r2, [r3, #4]
	SET_BIT(GPIOA->AFR[1], 1<<GPIO_AFRH_AFSEL9_Pos); // альтернативную функцию включим см даташит
 8002740:	2390      	movs	r3, #144	; 0x90
 8002742:	05db      	lsls	r3, r3, #23
 8002744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002746:	2390      	movs	r3, #144	; 0x90
 8002748:	05db      	lsls	r3, r3, #23
 800274a:	2110      	movs	r1, #16
 800274c:	430a      	orrs	r2, r1
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

	//SET_BIT(USART1->CR1, USART_CR1_M1);  размер байта 7,8,9
	//SET_BIT(USART1->CR1, USART_CR1_M0);  размер байта 7,8,9
	SET_BIT(USART1->CR1, USART_CR1_OVER8);// делитель на 8
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <init_Uart1+0xcc>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <init_Uart1+0xcc>)
 8002756:	2180      	movs	r1, #128	; 0x80
 8002758:	0209      	lsls	r1, r1, #8
 800275a:	430a      	orrs	r2, r1
 800275c:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART1->CR1, USART_CR1_PCE);  // включить контроль паритета
	//SET_BIT(USART1->CR1, USART_CR1_PS);   // Even or Odd паритет
	//SET_BIT(USART1->CR1, USART_CR1_TXEIE);  // TXE прерывание при передаче нужно включать только после отправки первого байта
	SET_BIT(USART1->CR1, USART_CR1_TE);       // передатчик включить
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <init_Uart1+0xcc>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <init_Uart1+0xcc>)
 8002764:	2108      	movs	r1, #8
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
	SET_BIT(USART1->CR1, USART_CR1_RE);       // приемник включить
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <init_Uart1+0xcc>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <init_Uart1+0xcc>)
 8002770:	2104      	movs	r1, #4
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
	SET_BIT(USART1->CR3, USART_CR3_HDSEL);    // однопроводной режим
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <init_Uart1+0xcc>)
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <init_Uart1+0xcc>)
 800277c:	2108      	movs	r1, #8
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]

	set_baud(USART1, baud);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a0e      	ldr	r2, [pc, #56]	; (80027c0 <init_Uart1+0xcc>)
 8002786:	0019      	movs	r1, r3
 8002788:	0010      	movs	r0, r2
 800278a:	f000 f8ab 	bl	80028e4 <set_baud>

	SET_BIT(USART1->CR1, USART_CR1_RXNEIE);   // прерывание на прием
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <init_Uart1+0xcc>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <init_Uart1+0xcc>)
 8002794:	2120      	movs	r1, #32
 8002796:	430a      	orrs	r2, r1
 8002798:	601a      	str	r2, [r3, #0]
	//SET_BIT(USART1->CR1, USART_CR1_IDLEIE);   // прерывание IDLEIE для надежности обнулим руками
	SET_BIT(USART1->CR1, USART_CR1_UE); // включим USART
 800279a:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <init_Uart1+0xcc>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <init_Uart1+0xcc>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART1_IRQn);        //Включим прерывания по USART
 80027a6:	201b      	movs	r0, #27
 80027a8:	f7ff ff1c 	bl	80025e4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART1_IRQn, 1);   // выставим приоритет
 80027ac:	2101      	movs	r1, #1
 80027ae:	201b      	movs	r0, #27
 80027b0:	f7ff ff32 	bl	8002618 <__NVIC_SetPriority>
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40013800 	.word	0x40013800

080027c4 <init_Uart2>:

void init_Uart2(uint32_t baud) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN);   // включим тактирование юарта
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <init_Uart2+0x118>)
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	4b42      	ldr	r3, [pc, #264]	; (80028dc <init_Uart2+0x118>)
 80027d2:	2180      	movs	r1, #128	; 0x80
 80027d4:	0289      	lsls	r1, r1, #10
 80027d6:	430a      	orrs	r2, r1
 80027d8:	61da      	str	r2, [r3, #28]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER2_1); // альтернативную функцию включим для ножки А2
 80027da:	2390      	movs	r3, #144	; 0x90
 80027dc:	05db      	lsls	r3, r3, #23
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2390      	movs	r3, #144	; 0x90
 80027e2:	05db      	lsls	r3, r3, #23
 80027e4:	2120      	movs	r1, #32
 80027e6:	430a      	orrs	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR2);    // максимальную скорость
 80027ea:	2390      	movs	r3, #144	; 0x90
 80027ec:	05db      	lsls	r3, r3, #23
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	2390      	movs	r3, #144	; 0x90
 80027f2:	05db      	lsls	r3, r3, #23
 80027f4:	2130      	movs	r1, #48	; 0x30
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->OTYPER, GPIO_OTYPER_OT_2);           // открытый колектор
 80027fa:	2390      	movs	r3, #144	; 0x90
 80027fc:	05db      	lsls	r3, r3, #23
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	2390      	movs	r3, #144	; 0x90
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	2104      	movs	r1, #4
 8002806:	430a      	orrs	r2, r1
 8002808:	605a      	str	r2, [r3, #4]
	SET_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR2_0);         // резистор к +
 800280a:	2390      	movs	r3, #144	; 0x90
 800280c:	05db      	lsls	r3, r3, #23
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	2390      	movs	r3, #144	; 0x90
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	2110      	movs	r1, #16
 8002816:	430a      	orrs	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->AFR[0], 1<<GPIO_AFRL_AFSEL2_Pos);    // альтернативную функцию включим см даташит
 800281a:	2390      	movs	r3, #144	; 0x90
 800281c:	05db      	lsls	r3, r3, #23
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	2390      	movs	r3, #144	; 0x90
 8002822:	05db      	lsls	r3, r3, #23
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0049      	lsls	r1, r1, #1
 8002828:	430a      	orrs	r2, r1
 800282a:	621a      	str	r2, [r3, #32]

	SET_BIT(GPIOA->MODER, GPIO_MODER_MODER3_1); // альтернативную функцию включим
 800282c:	2390      	movs	r3, #144	; 0x90
 800282e:	05db      	lsls	r3, r3, #23
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	2390      	movs	r3, #144	; 0x90
 8002834:	05db      	lsls	r3, r3, #23
 8002836:	2180      	movs	r1, #128	; 0x80
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]
	SET_BIT(GPIOA->OSPEEDR, GPIO_OSPEEDER_OSPEEDR3);  // максимальную скорость
 800283c:	2390      	movs	r3, #144	; 0x90
 800283e:	05db      	lsls	r3, r3, #23
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	2390      	movs	r3, #144	; 0x90
 8002844:	05db      	lsls	r3, r3, #23
 8002846:	21c0      	movs	r1, #192	; 0xc0
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
	SET_BIT(GPIOA->PUPDR, GPIO_PUPDR_PUPDR3_0);       // резистор к +
 800284c:	2390      	movs	r3, #144	; 0x90
 800284e:	05db      	lsls	r3, r3, #23
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	2390      	movs	r3, #144	; 0x90
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	2140      	movs	r1, #64	; 0x40
 8002858:	430a      	orrs	r2, r1
 800285a:	60da      	str	r2, [r3, #12]
	SET_BIT(GPIOA->AFR[0], 1<<GPIO_AFRL_AFSEL3_Pos); // альтернативную функцию включим см даташит
 800285c:	2390      	movs	r3, #144	; 0x90
 800285e:	05db      	lsls	r3, r3, #23
 8002860:	6a1a      	ldr	r2, [r3, #32]
 8002862:	2390      	movs	r3, #144	; 0x90
 8002864:	05db      	lsls	r3, r3, #23
 8002866:	2180      	movs	r1, #128	; 0x80
 8002868:	0149      	lsls	r1, r1, #5
 800286a:	430a      	orrs	r2, r1
 800286c:	621a      	str	r2, [r3, #32]

	SET_BIT(USART2->CR1, USART_CR1_OVER8);    // делитель на 8
 800286e:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <init_Uart2+0x11c>)
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <init_Uart2+0x11c>)
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	0209      	lsls	r1, r1, #8
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]
	SET_BIT(USART2->CR1, USART_CR1_TE);       // передатчик включить
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <init_Uart2+0x11c>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b17      	ldr	r3, [pc, #92]	; (80028e0 <init_Uart2+0x11c>)
 8002882:	2108      	movs	r1, #8
 8002884:	430a      	orrs	r2, r1
 8002886:	601a      	str	r2, [r3, #0]
	SET_BIT(USART2->CR1, USART_CR1_RE);       // приемник включить
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <init_Uart2+0x11c>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <init_Uart2+0x11c>)
 800288e:	2104      	movs	r1, #4
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE);   // прерывание на прием
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <init_Uart2+0x11c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <init_Uart2+0x11c>)
 800289a:	2120      	movs	r1, #32
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
	SET_BIT(USART2->CR1, USART_CR1_IDLEIE);   // прерывание IDLEIE
 80028a0:	4b0f      	ldr	r3, [pc, #60]	; (80028e0 <init_Uart2+0x11c>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <init_Uart2+0x11c>)
 80028a6:	2110      	movs	r1, #16
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

	set_baud(USART2, baud);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a0c      	ldr	r2, [pc, #48]	; (80028e0 <init_Uart2+0x11c>)
 80028b0:	0019      	movs	r1, r3
 80028b2:	0010      	movs	r0, r2
 80028b4:	f000 f816 	bl	80028e4 <set_baud>

	SET_BIT(USART2->CR1, USART_CR1_UE);   // включим USART
 80028b8:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <init_Uart2+0x11c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <init_Uart2+0x11c>)
 80028be:	2101      	movs	r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(USART2_IRQn);          //Включим прерывания по USART
 80028c4:	201c      	movs	r0, #28
 80028c6:	f7ff fe8d 	bl	80025e4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(USART2_IRQn, 1);     // выставим приоритет
 80028ca:	2101      	movs	r1, #1
 80028cc:	201c      	movs	r0, #28
 80028ce:	f7ff fea3 	bl	8002618 <__NVIC_SetPriority>
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40004400 	.word	0x40004400

080028e4 <set_baud>:

void set_baud(USART_TypeDef *usart, uint32_t baud) {   //добавить защиту если не один из баудов не совпал пилить на какой то скорости
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
	uint16_t push;
	usart->BRR = (2 * SYS_CLOCK / baud);       // настройка частоты
 80028ee:	6839      	ldr	r1, [r7, #0]
 80028f0:	4813      	ldr	r0, [pc, #76]	; (8002940 <set_baud+0x5c>)
 80028f2:	f7fd fc09 	bl	8000108 <__udivsi3>
 80028f6:	0003      	movs	r3, r0
 80028f8:	001a      	movs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
	push = usart->BRR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	210e      	movs	r1, #14
 8002904:	187b      	adds	r3, r7, r1
 8002906:	801a      	strh	r2, [r3, #0]
	push = push << 12;
 8002908:	187b      	adds	r3, r7, r1
 800290a:	187a      	adds	r2, r7, r1
 800290c:	8812      	ldrh	r2, [r2, #0]
 800290e:	0312      	lsls	r2, r2, #12
 8002910:	801a      	strh	r2, [r3, #0]
	push = push >> 13;
 8002912:	187b      	adds	r3, r7, r1
 8002914:	187a      	adds	r2, r7, r1
 8002916:	8812      	ldrh	r2, [r2, #0]
 8002918:	0b52      	lsrs	r2, r2, #13
 800291a:	801a      	strh	r2, [r3, #0]
	usart->BRR &= ~0xF;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	220f      	movs	r2, #15
 8002922:	4393      	bics	r3, r2
 8002924:	001a      	movs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	60da      	str	r2, [r3, #12]
	usart->BRR |= push;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	187b      	adds	r3, r7, r1
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b004      	add	sp, #16
 800293e:	bd80      	pop	{r7, pc}
 8002940:	05b8d800 	.word	0x05b8d800

08002944 <UART1_transmit>:

void UART1_transmit(uint8_t lenght, uint8_t *data) {
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	0002      	movs	r2, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	701a      	strb	r2, [r3, #0]
	while (husart1.tx_counter)
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <UART1_transmit+0x44>)
 8002956:	7e5b      	ldrb	r3, [r3, #25]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1fb      	bne.n	8002954 <UART1_transmit+0x10>
		;   //Ждем, пока линия не освободится
	USART1->TDR = *data;          //Кидаем данные
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	781a      	ldrb	r2, [r3, #0]
 8002960:	4b0a      	ldr	r3, [pc, #40]	; (800298c <UART1_transmit+0x48>)
 8002962:	b292      	uxth	r2, r2
 8002964:	851a      	strh	r2, [r3, #40]	; 0x28
	husart1.tx_size = lenght;
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <UART1_transmit+0x44>)
 8002968:	1dfa      	adds	r2, r7, #7
 800296a:	7812      	ldrb	r2, [r2, #0]
 800296c:	76da      	strb	r2, [r3, #27]
	husart1.tx_counter = 1;         // увеличиваем счетчик
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <UART1_transmit+0x44>)
 8002970:	2201      	movs	r2, #1
 8002972:	765a      	strb	r2, [r3, #25]
	USART1->CR1 |= USART_CR1_TXEIE; // включим прерывание
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <UART1_transmit+0x48>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <UART1_transmit+0x48>)
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	430a      	orrs	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	b002      	add	sp, #8
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000070 	.word	0x20000070
 800298c:	40013800 	.word	0x40013800

08002990 <UART2_transmit>:

void UART2_transmit(uint8_t lenght, uint8_t *data) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	0002      	movs	r2, r0
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	701a      	strb	r2, [r3, #0]
	while (husart2.tx_counter)
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <UART2_transmit+0x4c>)
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	5c9b      	ldrb	r3, [r3, r2]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1fa      	bne.n	80029a0 <UART2_transmit+0x10>
		;   //Ждем, пока линия не освободится
	USART2->TDR = *data;          //Кидаем данные
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	781a      	ldrb	r2, [r3, #0]
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <UART2_transmit+0x50>)
 80029b0:	b292      	uxth	r2, r2
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
	husart2.tx_size = lenght;
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <UART2_transmit+0x4c>)
 80029b6:	1dfa      	adds	r2, r7, #7
 80029b8:	2142      	movs	r1, #66	; 0x42
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	545a      	strb	r2, [r3, r1]
	husart2.tx_counter = 1;
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <UART2_transmit+0x4c>)
 80029c0:	2240      	movs	r2, #64	; 0x40
 80029c2:	2101      	movs	r1, #1
 80029c4:	5499      	strb	r1, [r3, r2]
	USART2->CR1 |= USART_CR1_TXEIE; // включим прерывание
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <UART2_transmit+0x50>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <UART2_transmit+0x50>)
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	20000090 	.word	0x20000090
 80029e0:	40004400 	.word	0x40004400

080029e4 <write_to_TMC2300>:

void write_to_TMC2300(uint8_t adr, uint8_t reg, uint32_t data) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	603a      	str	r2, [r7, #0]
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	1c02      	adds	r2, r0, #0
 80029f0:	701a      	strb	r2, [r3, #0]
 80029f2:	1dbb      	adds	r3, r7, #6
 80029f4:	1c0a      	adds	r2, r1, #0
 80029f6:	701a      	strb	r2, [r3, #0]
	husart1.tx_buffer[0] = 0x55; // это синхронизация
 80029f8:	4b19      	ldr	r3, [pc, #100]	; (8002a60 <write_to_TMC2300+0x7c>)
 80029fa:	2255      	movs	r2, #85	; 0x55
 80029fc:	701a      	strb	r2, [r3, #0]
	husart1.tx_buffer[1] = adr; // адрес модуля
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a00:	1dfa      	adds	r2, r7, #7
 8002a02:	7812      	ldrb	r2, [r2, #0]
 8002a04:	705a      	strb	r2, [r3, #1]
	husart1.tx_buffer[2] = 0x80; // устновим бит записи
 8002a06:	4b16      	ldr	r3, [pc, #88]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a08:	2280      	movs	r2, #128	; 0x80
 8002a0a:	709a      	strb	r2, [r3, #2]
	husart1.tx_buffer[2] |= reg; // регистр в который пишем + бит записи
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a0e:	789a      	ldrb	r2, [r3, #2]
 8002a10:	1dbb      	adds	r3, r7, #6
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a1a:	709a      	strb	r2, [r3, #2]
	husart1.tx_buffer[3] = data >> 24;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	0e1b      	lsrs	r3, r3, #24
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b0f      	ldr	r3, [pc, #60]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a24:	70da      	strb	r2, [r3, #3]
	husart1.tx_buffer[4] = data >> 16;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a2e:	711a      	strb	r2, [r3, #4]
	husart1.tx_buffer[5] = data >> 8;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a38:	715a      	strb	r2, [r3, #5]
	husart1.tx_buffer[6] = data;
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a40:	719a      	strb	r2, [r3, #6]
	swuart_calcCRC(husart1.tx_buffer, 8);
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a44:	2108      	movs	r1, #8
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 fa8a 	bl	8002f60 <swuart_calcCRC>
	UART1_transmit(8, husart1.tx_buffer);
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <write_to_TMC2300+0x7c>)
 8002a4e:	0019      	movs	r1, r3
 8002a50:	2008      	movs	r0, #8
 8002a52:	f7ff ff77 	bl	8002944 <UART1_transmit>
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	20000070 	.word	0x20000070

08002a64 <read_TMC2300>:

void read_TMC2300(uint8_t adr, uint8_t reg) {  //0x6A считать
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	1dfb      	adds	r3, r7, #7
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	1dbb      	adds	r3, r7, #6
 8002a72:	1c0a      	adds	r2, r1, #0
 8002a74:	701a      	strb	r2, [r3, #0]
 husart1.tx_buffer[0] = 0x55; // это синхронизация
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <read_TMC2300+0x44>)
 8002a78:	2255      	movs	r2, #85	; 0x55
 8002a7a:	701a      	strb	r2, [r3, #0]
 husart1.tx_buffer[1] = adr; // адрес модуля
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <read_TMC2300+0x44>)
 8002a7e:	1dfa      	adds	r2, r7, #7
 8002a80:	7812      	ldrb	r2, [r2, #0]
 8002a82:	705a      	strb	r2, [r3, #1]
 husart1.tx_buffer[2] = reg; // регистр в который пишем + бит записи
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <read_TMC2300+0x44>)
 8002a86:	1dba      	adds	r2, r7, #6
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	709a      	strb	r2, [r3, #2]
 swuart_calcCRC (husart1.tx_buffer, 4);
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <read_TMC2300+0x44>)
 8002a8e:	2104      	movs	r1, #4
 8002a90:	0018      	movs	r0, r3
 8002a92:	f000 fa65 	bl	8002f60 <swuart_calcCRC>
 UART1_transmit(4, husart1.tx_buffer);
 8002a96:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <read_TMC2300+0x44>)
 8002a98:	0019      	movs	r1, r3
 8002a9a:	2004      	movs	r0, #4
 8002a9c:	f7ff ff52 	bl	8002944 <UART1_transmit>
 }
 8002aa0:	46c0      	nop			; (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	20000070 	.word	0x20000070

08002aac <setting_TMC230>:

void setting_TMC230(void) {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	write_to_TMC2300(0, 0x6C, 0x8008001);        // включим, выберем шаг STEP3 // 8
 8002ab0:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <setting_TMC230+0x54>)
 8002ab2:	001a      	movs	r2, r3
 8002ab4:	216c      	movs	r1, #108	; 0x6c
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff ff94 	bl	80029e4 <write_to_TMC2300>
	Delay_ms(2);
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7fe ff51 	bl	8001964 <Delay_ms>
	write_to_TMC2300(0, 0x10, 0x10208);          // выберем ток STEP3
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <setting_TMC230+0x58>)
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	2110      	movs	r1, #16
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7ff ff8b 	bl	80029e4 <write_to_TMC2300>
	Delay_ms(2);
 8002ace:	2002      	movs	r0, #2
 8002ad0:	f7fe ff48 	bl	8001964 <Delay_ms>
	write_to_TMC2300(1, 0x6C, 0x8008001);        // включим, полный шаг STEP1
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <setting_TMC230+0x54>)
 8002ad6:	001a      	movs	r2, r3
 8002ad8:	216c      	movs	r1, #108	; 0x6c
 8002ada:	2001      	movs	r0, #1
 8002adc:	f7ff ff82 	bl	80029e4 <write_to_TMC2300>
	Delay_ms(2);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f7fe ff3f 	bl	8001964 <Delay_ms>
	write_to_TMC2300(3, 0x6C, 0x8008001);        // включим, полный шаг STEP2
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <setting_TMC230+0x54>)
 8002ae8:	001a      	movs	r2, r3
 8002aea:	216c      	movs	r1, #108	; 0x6c
 8002aec:	2003      	movs	r0, #3
 8002aee:	f7ff ff79 	bl	80029e4 <write_to_TMC2300>
	Delay_ms(2);
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7fe ff36 	bl	8001964 <Delay_ms>
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	08008001 	.word	0x08008001
 8002b04:	00010208 	.word	0x00010208

08002b08 <parsing_data>:

void parsing_data(void) {  // парсим данные
 8002b08:	b590      	push	{r4, r7, lr}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
	uint32_t bdt = 0;      // для запоминания скорости перед установкой
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
	if (husart2.rx_ok) {   // если флаг ок, сбросим его
 8002b12:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <parsing_data+0x204>)
 8002b14:	2243      	movs	r2, #67	; 0x43
 8002b16:	5c9b      	ldrb	r3, [r3, r2]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d100      	bne.n	8002b1e <parsing_data+0x16>
 8002b1c:	e0f1      	b.n	8002d02 <parsing_data+0x1fa>
		husart2.rx_ok = 0;
 8002b1e:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <parsing_data+0x204>)
 8002b20:	2243      	movs	r2, #67	; 0x43
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]
		if (husart2.rx_buffer[0] == 0x02) { // если совпадает начало посылки  умножение на 4 заменим смещением на 2
 8002b26:	4b79      	ldr	r3, [pc, #484]	; (8002d0c <parsing_data+0x204>)
 8002b28:	2220      	movs	r2, #32
 8002b2a:	5c9b      	ldrb	r3, [r3, r2]
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d000      	beq.n	8002b32 <parsing_data+0x2a>
 8002b30:	e0e7      	b.n	8002d02 <parsing_data+0x1fa>
			if (calcCRC(((husart2.rx_buffer[1] << 2) + 3), husart2.rx_buffer)
 8002b32:	4b76      	ldr	r3, [pc, #472]	; (8002d0c <parsing_data+0x204>)
 8002b34:	2221      	movs	r2, #33	; 0x21
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	3303      	adds	r3, #3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4a73      	ldr	r2, [pc, #460]	; (8002d10 <parsing_data+0x208>)
 8002b42:	0011      	movs	r1, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f000 fa5f 	bl	8003008 <calcCRC>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	0018      	movs	r0, r3
					== husart2.rx_buffer[((husart2.rx_buffer[1] << 2) + 3)]) { // проверим срс
 8002b4e:	4b6f      	ldr	r3, [pc, #444]	; (8002d0c <parsing_data+0x204>)
 8002b50:	2221      	movs	r2, #33	; 0x21
 8002b52:	5c9b      	ldrb	r3, [r3, r2]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	3303      	adds	r3, #3
 8002b58:	4a6c      	ldr	r2, [pc, #432]	; (8002d0c <parsing_data+0x204>)
 8002b5a:	2120      	movs	r1, #32
 8002b5c:	18d3      	adds	r3, r2, r3
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	781b      	ldrb	r3, [r3, #0]
			if (calcCRC(((husart2.rx_buffer[1] << 2) + 3), husart2.rx_buffer)
 8002b62:	4298      	cmp	r0, r3
 8002b64:	d000      	beq.n	8002b68 <parsing_data+0x60>
 8002b66:	e0be      	b.n	8002ce6 <parsing_data+0x1de>
				switch (husart2.rx_buffer[2]) { // в зависимости от типа посылки выполняем операции
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <parsing_data+0x204>)
 8002b6a:	2222      	movs	r2, #34	; 0x22
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d900      	bls.n	8002b74 <parsing_data+0x6c>
 8002b72:	e0c6      	b.n	8002d02 <parsing_data+0x1fa>
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <parsing_data+0x20c>)
 8002b78:	18d3      	adds	r3, r2, r3
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	469f      	mov	pc, r3
				case 1:
					send_data.one = 0x01; // запишем что нужно передать в первую переменную структуры
 8002b7e:	4b66      	ldr	r3, [pc, #408]	; (8002d18 <parsing_data+0x210>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	601a      	str	r2, [r3, #0]
					form_send_byte(PING, 1); // отправим ответ на пинг (тип посылки, одна переменная)
 8002b84:	2101      	movs	r1, #1
 8002b86:	2001      	movs	r0, #1
 8002b88:	f000 f914 	bl	8002db4 <form_send_byte>
					break;
 8002b8c:	e0b9      	b.n	8002d02 <parsing_data+0x1fa>
				case 2:
					new_data_flag(make_32bit(husart2.rx_buffer + 3)); // соберем из переданного буфера переменную с 3 элемента
 8002b8e:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <parsing_data+0x214>)
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f98d 	bl	8002eb0 <make_32bit>
 8002b96:	0003      	movs	r3, r0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff f881 	bl	8001ca0 <new_data_flag>
					send_data.one = read_flag();
 8002b9e:	f000 f8c1 	bl	8002d24 <read_flag>
 8002ba2:	0002      	movs	r2, r0
 8002ba4:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <parsing_data+0x210>)
 8002ba6:	601a      	str	r2, [r3, #0]
					form_send_byte(SET_PARAM, 1);
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f000 f902 	bl	8002db4 <form_send_byte>
					break;
 8002bb0:	e0a7      	b.n	8002d02 <parsing_data+0x1fa>
				case 3:
					send_data.one = poz_motor(1); // записать текущую позицию мотора
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff f8da 	bl	8001d6c <poz_motor>
 8002bb8:	0002      	movs	r2, r0
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <parsing_data+0x210>)
 8002bbc:	601a      	str	r2, [r3, #0]
					send_data.two = poz_motor(2);
 8002bbe:	2002      	movs	r0, #2
 8002bc0:	f7ff f8d4 	bl	8001d6c <poz_motor>
 8002bc4:	0002      	movs	r2, r0
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <parsing_data+0x210>)
 8002bc8:	605a      	str	r2, [r3, #4]
					send_data.three = read_flag(); // и флаг (доделать движение моторов)
 8002bca:	f000 f8ab 	bl	8002d24 <read_flag>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <parsing_data+0x210>)
 8002bd2:	609a      	str	r2, [r3, #8]
					form_send_byte(MOTOR_POS, 3);
 8002bd4:	2103      	movs	r1, #3
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f000 f8ec 	bl	8002db4 <form_send_byte>
					break;
 8002bdc:	e091      	b.n	8002d02 <parsing_data+0x1fa>
				case 4:
					send_data.one = new_baud(make_32bit(husart2.rx_buffer + 3)); // установить новую скорость, перенастроить
 8002bde:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <parsing_data+0x214>)
 8002be0:	0018      	movs	r0, r3
 8002be2:	f000 f965 	bl	8002eb0 <make_32bit>
 8002be6:	0003      	movs	r3, r0
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fe fc0c 	bl	8001406 <new_baud>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <parsing_data+0x210>)
 8002bf2:	601a      	str	r2, [r3, #0]
					bdt = send_data.one;
 8002bf4:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <parsing_data+0x210>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	607b      	str	r3, [r7, #4]
					form_send_byte(SET_BAUD, 1);  // ответить скоростью
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	2004      	movs	r0, #4
 8002bfe:	f000 f8d9 	bl	8002db4 <form_send_byte>
					Delay_ms(5);
 8002c02:	2005      	movs	r0, #5
 8002c04:	f7fe feae 	bl	8001964 <Delay_ms>
					if (bdt) new_baud_set (bdt);  // если бауд правильный то установить его
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d100      	bne.n	8002c10 <parsing_data+0x108>
 8002c0e:	e077      	b.n	8002d00 <parsing_data+0x1f8>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7fe fc1c 	bl	8001450 <new_baud_set>
					break;
 8002c18:	e072      	b.n	8002d00 <parsing_data+0x1f8>
				case 5:
					send_data.one = extrn_step(make_32bit(husart2.rx_buffer + 3),
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <parsing_data+0x214>)
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	f000 f947 	bl	8002eb0 <make_32bit>
 8002c22:	0004      	movs	r4, r0
 8002c24:	4b3e      	ldr	r3, [pc, #248]	; (8002d20 <parsing_data+0x218>)
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 f942 	bl	8002eb0 <make_32bit>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	0019      	movs	r1, r3
 8002c30:	0020      	movs	r0, r4
 8002c32:	f7ff fbb1 	bl	8002398 <extrn_step>
 8002c36:	0002      	movs	r2, r0
 8002c38:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <parsing_data+0x210>)
 8002c3a:	601a      	str	r2, [r3, #0]
							make_32bit(husart2.rx_buffer + 7)); // установить поз моторов
					form_send_byte(NEW_POS, 1);
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	2005      	movs	r0, #5
 8002c40:	f000 f8b8 	bl	8002db4 <form_send_byte>
					break;
 8002c44:	e05d      	b.n	8002d02 <parsing_data+0x1fa>
				case 6:
					send_data.one = setting_pin_rasbery (make_32bit(husart2.rx_buffer + 3));
 8002c46:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <parsing_data+0x214>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f931 	bl	8002eb0 <make_32bit>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 fd9b 	bl	800378c <setting_pin_rasbery>
 8002c56:	0002      	movs	r2, r0
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <parsing_data+0x210>)
 8002c5a:	601a      	str	r2, [r3, #0]
					form_send_byte(SIGN, 1);
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	2006      	movs	r0, #6
 8002c60:	f000 f8a8 	bl	8002db4 <form_send_byte>
					break;
 8002c64:	e04d      	b.n	8002d02 <parsing_data+0x1fa>
				case 7:
					send_data.one = new_speed(make_32bit(husart2.rx_buffer + 3),make_32bit(husart2.rx_buffer + 7));
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <parsing_data+0x214>)
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f921 	bl	8002eb0 <make_32bit>
 8002c6e:	0004      	movs	r4, r0
 8002c70:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <parsing_data+0x218>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 f91c 	bl	8002eb0 <make_32bit>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	0020      	movs	r0, r4
 8002c7e:	f7fe fc05 	bl	800148c <new_speed>
 8002c82:	0002      	movs	r2, r0
 8002c84:	4b24      	ldr	r3, [pc, #144]	; (8002d18 <parsing_data+0x210>)
 8002c86:	601a      	str	r2, [r3, #0]
					form_send_byte(NEW_SPEED, 1);
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f000 f892 	bl	8002db4 <form_send_byte>
					break;
 8002c90:	e037      	b.n	8002d02 <parsing_data+0x1fa>
				case 8:
					break;
				case 9:
					send_data.one = 0x01;   // отправить ок
 8002c92:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <parsing_data+0x210>)
 8002c94:	2201      	movs	r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
					form_send_byte(STOP_MOTOR, 1);
 8002c98:	2101      	movs	r1, #1
 8002c9a:	2009      	movs	r0, #9
 8002c9c:	f000 f88a 	bl	8002db4 <form_send_byte>
					stop_motor();           // остановить моторы
 8002ca0:	f7ff f852 	bl	8001d48 <stop_motor>
					break;
 8002ca4:	e02d      	b.n	8002d02 <parsing_data+0x1fa>
				case 10:
					send_data.one = VERSIONS; // отправить версию
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <parsing_data+0x210>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
					form_send_byte(VERSION, 1);
 8002cac:	2101      	movs	r1, #1
 8002cae:	200a      	movs	r0, #10
 8002cb0:	f000 f880 	bl	8002db4 <form_send_byte>
					break;
 8002cb4:	e025      	b.n	8002d02 <parsing_data+0x1fa>
				case 11:
					send_data.one = set_pid(make_32bit(husart2.rx_buffer + 3));
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <parsing_data+0x214>)
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 f8f9 	bl	8002eb0 <make_32bit>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fd07 	bl	80036d4 <set_pid>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <parsing_data+0x210>)
 8002cca:	601a      	str	r2, [r3, #0]
					form_send_byte(NEW_PID, 1);
 8002ccc:	2101      	movs	r1, #1
 8002cce:	200b      	movs	r0, #11
 8002cd0:	f000 f870 	bl	8002db4 <form_send_byte>
					break;
 8002cd4:	e015      	b.n	8002d02 <parsing_data+0x1fa>
				case 12:
					send_data.one = 0x01;
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <parsing_data+0x210>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
					form_send_byte(RESTARTS, 1);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	200c      	movs	r0, #12
 8002ce0:	f000 f868 	bl	8002db4 <form_send_byte>
					while (1);
 8002ce4:	e7fe      	b.n	8002ce4 <parsing_data+0x1dc>
					break;
				}
			} else {                                       // если не совпал срс
				send_data.one = 0x00;   // отправить не ок
 8002ce6:	4b0c      	ldr	r3, [pc, #48]	; (8002d18 <parsing_data+0x210>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
				form_send_byte(husart2.rx_buffer[2], 0);
 8002cec:	4b07      	ldr	r3, [pc, #28]	; (8002d0c <parsing_data+0x204>)
 8002cee:	2222      	movs	r2, #34	; 0x22
 8002cf0:	5c9b      	ldrb	r3, [r3, r2]
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f85d 	bl	8002db4 <form_send_byte>
			}
		}
	}
}
 8002cfa:	e002      	b.n	8002d02 <parsing_data+0x1fa>
					break;
 8002cfc:	46c0      	nop			; (mov r8, r8)
 8002cfe:	e000      	b.n	8002d02 <parsing_data+0x1fa>
					break;
 8002d00:	46c0      	nop			; (mov r8, r8)
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b003      	add	sp, #12
 8002d08:	bd90      	pop	{r4, r7, pc}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	20000090 	.word	0x20000090
 8002d10:	200000b0 	.word	0x200000b0
 8002d14:	08003980 	.word	0x08003980
 8002d18:	200000d4 	.word	0x200000d4
 8002d1c:	200000b3 	.word	0x200000b3
 8002d20:	200000b7 	.word	0x200000b7

08002d24 <read_flag>:

uint32_t read_flag(void) {           // считем отдельные флаги в одну переменную
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
	uint32_t data = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
	data = point_flags->ir_filter;
 8002d2e:	4b1f      	ldr	r3, [pc, #124]	; (8002dac <read_flag+0x88>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	0fdb      	lsrs	r3, r3, #31
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	607b      	str	r3, [r7, #4]
	data |= point_flags->iris_drive << 1;
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	; (8002dac <read_flag+0x88>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	785b      	ldrb	r3, [r3, #1]
 8002d42:	07db      	lsls	r3, r3, #31
 8002d44:	0fdb      	lsrs	r3, r3, #31
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	607b      	str	r3, [r7, #4]
	data |= point_flags->set_led << 2;        //??
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <read_flag+0x88>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	079b      	lsls	r3, r3, #30
 8002d5a:	0fdb      	lsrs	r3, r3, #31
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	001a      	movs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	607b      	str	r3, [r7, #4]
	if (READ_MOTOR1)
 8002d68:	2390      	movs	r3, #144	; 0x90
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	4013      	ands	r3, r2
 8002d74:	d003      	beq.n	8002d7e <read_flag+0x5a>
		data |= 1 << 3;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	607b      	str	r3, [r7, #4]
	if (READ_MOTOR2)
 8002d7e:	2390      	movs	r3, #144	; 0x90
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	01db      	lsls	r3, r3, #7
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <read_flag+0x70>
		data |= 1 << 4;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2210      	movs	r2, #16
 8002d90:	4313      	orrs	r3, r2
 8002d92:	607b      	str	r3, [r7, #4]
	data |= pid_param << 5;
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <read_flag+0x8c>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	015b      	lsls	r3, r3, #5
 8002d9a:	001a      	movs	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	607b      	str	r3, [r7, #4]
	return data;
 8002da2:	687b      	ldr	r3, [r7, #4]
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	20000000 	.word	0x20000000
 8002db0:	2000001c 	.word	0x2000001c

08002db4 <form_send_byte>:

void form_send_byte(uint8_t number_send, uint8_t num_byte) { // функция для формирования ответа. указываем количество 32байтных данных для отправки
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	0002      	movs	r2, r0
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	701a      	strb	r2, [r3, #0]
 8002dc0:	1dbb      	adds	r3, r7, #6
 8002dc2:	1c0a      	adds	r2, r1, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[0] = 0x02;        // начало посылки
 8002dc6:	4b38      	ldr	r3, [pc, #224]	; (8002ea8 <form_send_byte+0xf4>)
 8002dc8:	2202      	movs	r2, #2
 8002dca:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[1] = num_byte;    // сколько полезных данных
 8002dcc:	4b36      	ldr	r3, [pc, #216]	; (8002ea8 <form_send_byte+0xf4>)
 8002dce:	1dba      	adds	r2, r7, #6
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	705a      	strb	r2, [r3, #1]
	husart2.tx_buffer[2] = number_send; // номер посылки (ее смысл)
 8002dd4:	4b34      	ldr	r3, [pc, #208]	; (8002ea8 <form_send_byte+0xf4>)
 8002dd6:	1dfa      	adds	r2, r7, #7
 8002dd8:	7812      	ldrb	r2, [r2, #0]
 8002dda:	709a      	strb	r2, [r3, #2]
	divide_32bit(send_data.one, 3);    // раскладываем переменную в буфер
 8002ddc:	4b33      	ldr	r3, [pc, #204]	; (8002eac <form_send_byte+0xf8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2103      	movs	r1, #3
 8002de2:	0018      	movs	r0, r3
 8002de4:	f000 f890 	bl	8002f08 <divide_32bit>
	switch (num_byte) {
 8002de8:	1dbb      	adds	r3, r7, #6
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d03b      	beq.n	8002e68 <form_send_byte+0xb4>
 8002df0:	dc55      	bgt.n	8002e9e <form_send_byte+0xea>
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d023      	beq.n	8002e3e <form_send_byte+0x8a>
 8002df6:	dc52      	bgt.n	8002e9e <form_send_byte+0xea>
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <form_send_byte+0x4e>
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d00f      	beq.n	8002e20 <form_send_byte+0x6c>
		divide_32bit(send_data.three, 11);
		husart2.tx_buffer[15] = calcCRC(15, husart2.tx_buffer);
		UART2_transmit(16, husart2.tx_buffer);
		break;
	}
}
 8002e00:	e04d      	b.n	8002e9e <form_send_byte+0xea>
		husart2.tx_buffer[3] = calcCRC(3, husart2.tx_buffer);
 8002e02:	4b29      	ldr	r3, [pc, #164]	; (8002ea8 <form_send_byte+0xf4>)
 8002e04:	0019      	movs	r1, r3
 8002e06:	2003      	movs	r0, #3
 8002e08:	f000 f8fe 	bl	8003008 <calcCRC>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	001a      	movs	r2, r3
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <form_send_byte+0xf4>)
 8002e12:	70da      	strb	r2, [r3, #3]
		UART2_transmit(4, husart2.tx_buffer);
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <form_send_byte+0xf4>)
 8002e16:	0019      	movs	r1, r3
 8002e18:	2004      	movs	r0, #4
 8002e1a:	f7ff fdb9 	bl	8002990 <UART2_transmit>
		break;
 8002e1e:	e03e      	b.n	8002e9e <form_send_byte+0xea>
		husart2.tx_buffer[7] = calcCRC(7, husart2.tx_buffer);
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <form_send_byte+0xf4>)
 8002e22:	0019      	movs	r1, r3
 8002e24:	2007      	movs	r0, #7
 8002e26:	f000 f8ef 	bl	8003008 <calcCRC>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <form_send_byte+0xf4>)
 8002e30:	71da      	strb	r2, [r3, #7]
		UART2_transmit(8, husart2.tx_buffer);
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <form_send_byte+0xf4>)
 8002e34:	0019      	movs	r1, r3
 8002e36:	2008      	movs	r0, #8
 8002e38:	f7ff fdaa 	bl	8002990 <UART2_transmit>
		break;
 8002e3c:	e02f      	b.n	8002e9e <form_send_byte+0xea>
		divide_32bit(send_data.two, 7);
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <form_send_byte+0xf8>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2107      	movs	r1, #7
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 f85f 	bl	8002f08 <divide_32bit>
		husart2.tx_buffer[11] = calcCRC(11, husart2.tx_buffer);
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <form_send_byte+0xf4>)
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	200b      	movs	r0, #11
 8002e50:	f000 f8da 	bl	8003008 <calcCRC>
 8002e54:	0003      	movs	r3, r0
 8002e56:	001a      	movs	r2, r3
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <form_send_byte+0xf4>)
 8002e5a:	72da      	strb	r2, [r3, #11]
		UART2_transmit(12, husart2.tx_buffer);
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <form_send_byte+0xf4>)
 8002e5e:	0019      	movs	r1, r3
 8002e60:	200c      	movs	r0, #12
 8002e62:	f7ff fd95 	bl	8002990 <UART2_transmit>
		break;
 8002e66:	e01a      	b.n	8002e9e <form_send_byte+0xea>
		divide_32bit(send_data.two, 7);
 8002e68:	4b10      	ldr	r3, [pc, #64]	; (8002eac <form_send_byte+0xf8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2107      	movs	r1, #7
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f000 f84a 	bl	8002f08 <divide_32bit>
		divide_32bit(send_data.three, 11);
 8002e74:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <form_send_byte+0xf8>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	210b      	movs	r1, #11
 8002e7a:	0018      	movs	r0, r3
 8002e7c:	f000 f844 	bl	8002f08 <divide_32bit>
		husart2.tx_buffer[15] = calcCRC(15, husart2.tx_buffer);
 8002e80:	4b09      	ldr	r3, [pc, #36]	; (8002ea8 <form_send_byte+0xf4>)
 8002e82:	0019      	movs	r1, r3
 8002e84:	200f      	movs	r0, #15
 8002e86:	f000 f8bf 	bl	8003008 <calcCRC>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <form_send_byte+0xf4>)
 8002e90:	73da      	strb	r2, [r3, #15]
		UART2_transmit(16, husart2.tx_buffer);
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <form_send_byte+0xf4>)
 8002e94:	0019      	movs	r1, r3
 8002e96:	2010      	movs	r0, #16
 8002e98:	f7ff fd7a 	bl	8002990 <UART2_transmit>
		break;
 8002e9c:	46c0      	nop			; (mov r8, r8)
}
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b002      	add	sp, #8
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	20000090 	.word	0x20000090
 8002eac:	200000d4 	.word	0x200000d4

08002eb0 <make_32bit>:

uint32_t make_32bit(uint8_t *start_num) { // собрать 32битную переменную из буфера
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	uint32_t data = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]
	data = *start_num << 24;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	60fb      	str	r3, [r7, #12]
	start_num++;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	607b      	str	r3, [r7, #4]
	data |= *start_num << 16;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	041b      	lsls	r3, r3, #16
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
	start_num++;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3301      	adds	r3, #1
 8002edc:	607b      	str	r3, [r7, #4]
	data |= *start_num << 8;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	001a      	movs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	60fb      	str	r3, [r7, #12]
	start_num++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	607b      	str	r3, [r7, #4]
	data |= *start_num;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]
	return data;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	0018      	movs	r0, r3
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b004      	add	sp, #16
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <divide_32bit>:

void divide_32bit(uint32_t data, uint8_t start_num) { // разложить 32битную переменную в буфер
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	000a      	movs	r2, r1
 8002f12:	1cfb      	adds	r3, r7, #3
 8002f14:	701a      	strb	r2, [r3, #0]
	husart2.tx_buffer[start_num] = data >> 24;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	0e1a      	lsrs	r2, r3, #24
 8002f1a:	1cfb      	adds	r3, r7, #3
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2d1      	uxtb	r1, r2
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <divide_32bit+0x54>)
 8002f22:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 1] = data >> 16;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	0c1a      	lsrs	r2, r3, #16
 8002f28:	1cfb      	adds	r3, r7, #3
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	b2d1      	uxtb	r1, r2
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <divide_32bit+0x54>)
 8002f32:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 2] = data >> 8;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	0a1a      	lsrs	r2, r3, #8
 8002f38:	1cfb      	adds	r3, r7, #3
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	b2d1      	uxtb	r1, r2
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <divide_32bit+0x54>)
 8002f42:	54d1      	strb	r1, [r2, r3]
	husart2.tx_buffer[start_num + 3] = data;
 8002f44:	1cfb      	adds	r3, r7, #3
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3303      	adds	r3, #3
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	b2d1      	uxtb	r1, r2
 8002f4e:	4a03      	ldr	r2, [pc, #12]	; (8002f5c <divide_32bit+0x54>)
 8002f50:	54d1      	strb	r1, [r2, r3]
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	b002      	add	sp, #8
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	20000090 	.word	0x20000090

08002f60 <swuart_calcCRC>:

void swuart_calcCRC(uint8_t *datagram, uint8_t datagramLength) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	000a      	movs	r2, r1
 8002f6a:	1cfb      	adds	r3, r7, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
	int i, j;
	uint8_t *crc = datagram + (datagramLength - 1); // CRC located in last byte of message
 8002f6e:	1cfb      	adds	r3, r7, #3
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	18d3      	adds	r3, r2, r3
 8002f78:	60bb      	str	r3, [r7, #8]
	uint8_t currentByte;
	*crc = 0;
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (datagramLength - 1); i++) { // Execute for all bytes of a message
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e035      	b.n	8002ff2 <swuart_calcCRC+0x92>
		currentByte = datagram[i]; // Retrieve a byte to be sent from Array
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	230f      	movs	r3, #15
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	7812      	ldrb	r2, [r2, #0]
 8002f92:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8002f94:	2300      	movs	r3, #0
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	e025      	b.n	8002fe6 <swuart_calcCRC+0x86>
			if ((*crc >> 7) ^ (currentByte & 0x01)) // update CRC based result of XOR operation
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	09db      	lsrs	r3, r3, #7
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	230f      	movs	r3, #15
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2201      	movs	r2, #1
 8002fac:	4013      	ands	r3, r2
 8002fae:	4299      	cmp	r1, r3
 8002fb0:	d00a      	beq.n	8002fc8 <swuart_calcCRC+0x68>
					{
				*crc = (*crc << 1) ^ 0x07;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	2207      	movs	r2, #7
 8002fbc:	4053      	eors	r3, r2
 8002fbe:	b25b      	sxtb	r3, r3
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e005      	b.n	8002fd4 <swuart_calcCRC+0x74>
			} else {
				*crc = (*crc << 1);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	18db      	adds	r3, r3, r3
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	701a      	strb	r2, [r3, #0]
			}
			currentByte = currentByte >> 1;
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	18bb      	adds	r3, r7, r2
 8002fd8:	18ba      	adds	r2, r7, r2
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	0852      	lsrs	r2, r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; j++) {
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	2b07      	cmp	r3, #7
 8002fea:	ddd6      	ble.n	8002f9a <swuart_calcCRC+0x3a>
	for (i = 0; i < (datagramLength - 1); i++) { // Execute for all bytes of a message
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	1cfb      	adds	r3, r7, #3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	dbc3      	blt.n	8002f86 <swuart_calcCRC+0x26>
		} // for CRC bit
	} // for message byte
}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	46c0      	nop			; (mov r8, r8)
 8003002:	46bd      	mov	sp, r7
 8003004:	b006      	add	sp, #24
 8003006:	bd80      	pop	{r7, pc}

08003008 <calcCRC>:

uint8_t calcCRC(uint8_t len, uint8_t *buf) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	0002      	movs	r2, r0
 8003010:	6039      	str	r1, [r7, #0]
 8003012:	1dfb      	adds	r3, r7, #7
 8003014:	701a      	strb	r2, [r3, #0]
	uint8_t r = 0;
 8003016:	230f      	movs	r3, #15
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 800301e:	2300      	movs	r3, #0
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	e00c      	b.n	800303e <calcCRC+0x36>
		r -= buf[i];
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	781a      	ldrb	r2, [r3, #0]
 800302c:	210f      	movs	r1, #15
 800302e:	187b      	adds	r3, r7, r1
 8003030:	1879      	adds	r1, r7, r1
 8003032:	7809      	ldrb	r1, [r1, #0]
 8003034:	1a8a      	subs	r2, r1, r2
 8003036:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++) {
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	1dfb      	adds	r3, r7, #7
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	dbed      	blt.n	8003024 <calcCRC+0x1c>
	}
	r &= 0x7F;
 8003048:	200f      	movs	r0, #15
 800304a:	183b      	adds	r3, r7, r0
 800304c:	183a      	adds	r2, r7, r0
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	217f      	movs	r1, #127	; 0x7f
 8003052:	400a      	ands	r2, r1
 8003054:	701a      	strb	r2, [r3, #0]
	if (r < 0x21) {
 8003056:	183b      	adds	r3, r7, r0
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b20      	cmp	r3, #32
 800305c:	d804      	bhi.n	8003068 <calcCRC+0x60>
		r += 0x21;
 800305e:	183b      	adds	r3, r7, r0
 8003060:	183a      	adds	r2, r7, r0
 8003062:	7812      	ldrb	r2, [r2, #0]
 8003064:	3221      	adds	r2, #33	; 0x21
 8003066:	701a      	strb	r2, [r3, #0]
	}
#ifdef DEBUG_MODE
     return 1;
#endif
	return r;
 8003068:	230f      	movs	r3, #15
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	781b      	ldrb	r3, [r3, #0]
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	b004      	add	sp, #16
 8003074:	bd80      	pop	{r7, pc}
	...

08003078 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
	if (READ_BIT(USART1->ISR, USART_ISR_TXE)) {
 800307c:	4b27      	ldr	r3, [pc, #156]	; (800311c <USART1_IRQHandler+0xa4>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2280      	movs	r2, #128	; 0x80
 8003082:	4013      	ands	r3, r2
 8003084:	d020      	beq.n	80030c8 <USART1_IRQHandler+0x50>
		if (husart1.tx_size > husart1.tx_counter) {
 8003086:	4b26      	ldr	r3, [pc, #152]	; (8003120 <USART1_IRQHandler+0xa8>)
 8003088:	7eda      	ldrb	r2, [r3, #27]
 800308a:	4b25      	ldr	r3, [pc, #148]	; (8003120 <USART1_IRQHandler+0xa8>)
 800308c:	7e5b      	ldrb	r3, [r3, #25]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90e      	bls.n	80030b0 <USART1_IRQHandler+0x38>
			USART1->TDR = husart1.tx_buffer[husart1.tx_counter];
 8003092:	4b23      	ldr	r3, [pc, #140]	; (8003120 <USART1_IRQHandler+0xa8>)
 8003094:	7e5b      	ldrb	r3, [r3, #25]
 8003096:	001a      	movs	r2, r3
 8003098:	4b21      	ldr	r3, [pc, #132]	; (8003120 <USART1_IRQHandler+0xa8>)
 800309a:	5c9a      	ldrb	r2, [r3, r2]
 800309c:	4b1f      	ldr	r3, [pc, #124]	; (800311c <USART1_IRQHandler+0xa4>)
 800309e:	b292      	uxth	r2, r2
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
			husart1.tx_counter++;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030a4:	7e5b      	ldrb	r3, [r3, #25]
 80030a6:	3301      	adds	r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030ac:	765a      	strb	r2, [r3, #25]
 80030ae:	e00b      	b.n	80030c8 <USART1_IRQHandler+0x50>
		} else {
			CLEAR_BIT(USART1->CR1, USART_CR1_TXEIE);
 80030b0:	4b1a      	ldr	r3, [pc, #104]	; (800311c <USART1_IRQHandler+0xa4>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <USART1_IRQHandler+0xa4>)
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	438a      	bics	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
			husart1.tx_counter = 0;
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	765a      	strb	r2, [r3, #25]
			husart1.tx_size = 0;
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	76da      	strb	r2, [r3, #27]
		}
	}

	if (READ_BIT(USART1->ISR, USART_ISR_RXNE)) {   //Если пришли данные по USART
 80030c8:	4b14      	ldr	r3, [pc, #80]	; (800311c <USART1_IRQHandler+0xa4>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	2220      	movs	r2, #32
 80030ce:	4013      	ands	r3, r2
 80030d0:	d016      	beq.n	8003100 <USART1_IRQHandler+0x88>
		husart1.rx_buffer[husart1.rx_counter] = USART1->RDR; //Считаем данные в соответствующую ячейку в rx_buffer
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <USART1_IRQHandler+0xa4>)
 80030d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030da:	7e9b      	ldrb	r3, [r3, #26]
 80030dc:	0019      	movs	r1, r3
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	4b0f      	ldr	r3, [pc, #60]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030e2:	185b      	adds	r3, r3, r1
 80030e4:	729a      	strb	r2, [r3, #10]
		husart1.rx_counter++;              //Увеличим счетчик принятых байт на 1
 80030e6:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030e8:	7e9b      	ldrb	r3, [r3, #26]
 80030ea:	3301      	adds	r3, #1
 80030ec:	b2da      	uxtb	r2, r3
 80030ee:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030f0:	769a      	strb	r2, [r3, #26]
		if (husart1.rx_counter > 14)
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030f4:	7e9b      	ldrb	r3, [r3, #26]
 80030f6:	2b0e      	cmp	r3, #14
 80030f8:	d902      	bls.n	8003100 <USART1_IRQHandler+0x88>
			husart1.rx_counter = 0;
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <USART1_IRQHandler+0xa8>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	769a      	strb	r2, [r3, #26]
	}
	if (READ_BIT(USART1->ISR, USART_ISR_ORE)) {       //Если прилетел флаг OVRN
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <USART1_IRQHandler+0xa4>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	2208      	movs	r2, #8
 8003106:	4013      	ands	r3, r2
 8003108:	d005      	beq.n	8003116 <USART1_IRQHandler+0x9e>
		SET_BIT(USART1->ICR, USART_ICR_ORECF);              //Сбросим флаг OVRN
 800310a:	4b04      	ldr	r3, [pc, #16]	; (800311c <USART1_IRQHandler+0xa4>)
 800310c:	6a1a      	ldr	r2, [r3, #32]
 800310e:	4b03      	ldr	r3, [pc, #12]	; (800311c <USART1_IRQHandler+0xa4>)
 8003110:	2108      	movs	r1, #8
 8003112:	430a      	orrs	r2, r1
 8003114:	621a      	str	r2, [r3, #32]
	/*if (READ_BIT(USART1->ISR, USART_ISR_IDLE)) {       //Если прилетел флаг IDLE
		SET_BIT(USART1->ICR, USART_ICR_IDLECF);              //Сбросим флаг IDLE
		husart1.rx_ok = 1;
		husart1.rx_counter = 0;              //сбросим счетчик приходящих данных
	}*/
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40013800 	.word	0x40013800
 8003120:	20000070 	.word	0x20000070

08003124 <USART2_IRQHandler>:

void USART2_IRQHandler(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
	if (READ_BIT(USART2->ISR, USART_ISR_TXE)) {
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <USART2_IRQHandler+0xe8>)
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	4013      	ands	r3, r2
 8003130:	d027      	beq.n	8003182 <USART2_IRQHandler+0x5e>
		if (husart2.tx_size > husart2.tx_counter) {
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <USART2_IRQHandler+0xec>)
 8003134:	2242      	movs	r2, #66	; 0x42
 8003136:	5c9a      	ldrb	r2, [r3, r2]
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <USART2_IRQHandler+0xec>)
 800313a:	2140      	movs	r1, #64	; 0x40
 800313c:	5c5b      	ldrb	r3, [r3, r1]
 800313e:	429a      	cmp	r2, r3
 8003140:	d911      	bls.n	8003166 <USART2_IRQHandler+0x42>
			USART2->TDR = husart2.tx_buffer[husart2.tx_counter];
 8003142:	4b33      	ldr	r3, [pc, #204]	; (8003210 <USART2_IRQHandler+0xec>)
 8003144:	2240      	movs	r2, #64	; 0x40
 8003146:	5c9b      	ldrb	r3, [r3, r2]
 8003148:	001a      	movs	r2, r3
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <USART2_IRQHandler+0xec>)
 800314c:	5c9a      	ldrb	r2, [r3, r2]
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <USART2_IRQHandler+0xe8>)
 8003150:	b292      	uxth	r2, r2
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
			husart2.tx_counter++;
 8003154:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <USART2_IRQHandler+0xec>)
 8003156:	2240      	movs	r2, #64	; 0x40
 8003158:	5c9b      	ldrb	r3, [r3, r2]
 800315a:	3301      	adds	r3, #1
 800315c:	b2d9      	uxtb	r1, r3
 800315e:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <USART2_IRQHandler+0xec>)
 8003160:	2240      	movs	r2, #64	; 0x40
 8003162:	5499      	strb	r1, [r3, r2]
 8003164:	e00d      	b.n	8003182 <USART2_IRQHandler+0x5e>
		} else {
			USART2->CR1 &= ~USART_CR1_TXEIE;      // сбросим прерывание
 8003166:	4b29      	ldr	r3, [pc, #164]	; (800320c <USART2_IRQHandler+0xe8>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b28      	ldr	r3, [pc, #160]	; (800320c <USART2_IRQHandler+0xe8>)
 800316c:	2180      	movs	r1, #128	; 0x80
 800316e:	438a      	bics	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
			husart2.tx_counter = 0;
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <USART2_IRQHandler+0xec>)
 8003174:	2240      	movs	r2, #64	; 0x40
 8003176:	2100      	movs	r1, #0
 8003178:	5499      	strb	r1, [r3, r2]
			husart2.tx_size = 0;
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <USART2_IRQHandler+0xec>)
 800317c:	2242      	movs	r2, #66	; 0x42
 800317e:	2100      	movs	r1, #0
 8003180:	5499      	strb	r1, [r3, r2]
		}
	}
	if (READ_BIT(USART2->ISR, USART_ISR_RXNE)) {   //Если пришли данные по USART
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <USART2_IRQHandler+0xe8>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	2220      	movs	r2, #32
 8003188:	4013      	ands	r3, r2
 800318a:	d01e      	beq.n	80031ca <USART2_IRQHandler+0xa6>
		husart2.rx_buffer[husart2.rx_counter] = USART2->RDR; //Считаем данные в соответствующую ячейку в rx_buffer
 800318c:	4b1f      	ldr	r3, [pc, #124]	; (800320c <USART2_IRQHandler+0xe8>)
 800318e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003190:	b299      	uxth	r1, r3
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <USART2_IRQHandler+0xec>)
 8003194:	2241      	movs	r2, #65	; 0x41
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	0018      	movs	r0, r3
 800319a:	b2c9      	uxtb	r1, r1
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <USART2_IRQHandler+0xec>)
 800319e:	2220      	movs	r2, #32
 80031a0:	181b      	adds	r3, r3, r0
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	1c0a      	adds	r2, r1, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		husart2.rx_counter++;              //Увеличим счетчик принятых байт на 1
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <USART2_IRQHandler+0xec>)
 80031aa:	2241      	movs	r2, #65	; 0x41
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	3301      	adds	r3, #1
 80031b0:	b2d9      	uxtb	r1, r3
 80031b2:	4b17      	ldr	r3, [pc, #92]	; (8003210 <USART2_IRQHandler+0xec>)
 80031b4:	2241      	movs	r2, #65	; 0x41
 80031b6:	5499      	strb	r1, [r3, r2]
		if (husart2.rx_counter > 31)
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <USART2_IRQHandler+0xec>)
 80031ba:	2241      	movs	r2, #65	; 0x41
 80031bc:	5c9b      	ldrb	r3, [r3, r2]
 80031be:	2b1f      	cmp	r3, #31
 80031c0:	d903      	bls.n	80031ca <USART2_IRQHandler+0xa6>
			husart2.rx_counter = 0;
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <USART2_IRQHandler+0xec>)
 80031c4:	2241      	movs	r2, #65	; 0x41
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]
	}
	if (READ_BIT(USART2->ISR, USART_ISR_IDLE)) {       //Если прилетел флаг IDLE
 80031ca:	4b10      	ldr	r3, [pc, #64]	; (800320c <USART2_IRQHandler+0xe8>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	2210      	movs	r2, #16
 80031d0:	4013      	ands	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <USART2_IRQHandler+0xcc>
		SET_BIT(USART2->ICR, USART_ICR_IDLECF);              //Сбросим флаг IDLE
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <USART2_IRQHandler+0xe8>)
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <USART2_IRQHandler+0xe8>)
 80031da:	2110      	movs	r1, #16
 80031dc:	430a      	orrs	r2, r1
 80031de:	621a      	str	r2, [r3, #32]
		husart2.rx_ok = 1;
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <USART2_IRQHandler+0xec>)
 80031e2:	2243      	movs	r2, #67	; 0x43
 80031e4:	2101      	movs	r1, #1
 80031e6:	5499      	strb	r1, [r3, r2]
		husart2.rx_counter = 0;              //сбросим счетчик приходящих данных
 80031e8:	4b09      	ldr	r3, [pc, #36]	; (8003210 <USART2_IRQHandler+0xec>)
 80031ea:	2241      	movs	r2, #65	; 0x41
 80031ec:	2100      	movs	r1, #0
 80031ee:	5499      	strb	r1, [r3, r2]
	}
	if (READ_BIT(USART2->ISR, USART_ISR_ORE)) {       //Если прилетел флаг OVRN
 80031f0:	4b06      	ldr	r3, [pc, #24]	; (800320c <USART2_IRQHandler+0xe8>)
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	2208      	movs	r2, #8
 80031f6:	4013      	ands	r3, r2
 80031f8:	d005      	beq.n	8003206 <USART2_IRQHandler+0xe2>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);              //Сбросим флаг OVRN
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <USART2_IRQHandler+0xe8>)
 80031fc:	6a1a      	ldr	r2, [r3, #32]
 80031fe:	4b03      	ldr	r3, [pc, #12]	; (800320c <USART2_IRQHandler+0xe8>)
 8003200:	2108      	movs	r1, #8
 8003202:	430a      	orrs	r2, r1
 8003204:	621a      	str	r2, [r3, #32]
	}
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40004400 	.word	0x40004400
 8003210:	20000090 	.word	0x20000090

08003214 <main>:


volatile uint32_t count = 0;
uint8_t flg = 0;

int main(void) {
 8003214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	af04      	add	r7, sp, #16
	init_rcc();                              // 48Мгц
 800321a:	f7fe fa17 	bl	800164c <init_rcc>
	CMSIS_SysTick_Timer_init();              // систик
 800321e:	f7fe fab9 	bl	8001794 <CMSIS_SysTick_Timer_init>
	init_pins();                             // пины
 8003222:	f7fe fc6b 	bl	8001afc <init_pins>
	init_tim17(3, 10000);                    // настройка таймера делитель + счетчик
 8003226:	4b5e      	ldr	r3, [pc, #376]	; (80033a0 <main+0x18c>)
 8003228:	0019      	movs	r1, r3
 800322a:	2003      	movs	r0, #3
 800322c:	f7fe fbf8 	bl	8001a20 <init_tim17>
	init_tim16(3, 10000);                    // настройка таймера делитель + счетчик
 8003230:	4b5b      	ldr	r3, [pc, #364]	; (80033a0 <main+0x18c>)
 8003232:	0019      	movs	r1, r3
 8003234:	2003      	movs	r0, #3
 8003236:	f7fe fc2d 	bl	8001a94 <init_tim16>
	init_Uart1 (115200);                     // юарт ТМС
 800323a:	23e1      	movs	r3, #225	; 0xe1
 800323c:	025b      	lsls	r3, r3, #9
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff fa58 	bl	80026f4 <init_Uart1>
	ADC_init();                              // АЦП + ДМА
 8003244:	f7fe f830 	bl	80012a8 <ADC_init>
	EN_ON;                                   // включить разрешить работу драйверов
 8003248:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <main+0x190>)
 800324a:	699a      	ldr	r2, [r3, #24]
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <main+0x190>)
 800324e:	2102      	movs	r1, #2
 8003250:	430a      	orrs	r2, r1
 8003252:	619a      	str	r2, [r3, #24]
#ifndef DEBUG_MODE
    Delay_ms(4000);                          // это чтоб можно было ножки программирования схватить
 8003254:	23fa      	movs	r3, #250	; 0xfa
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	0018      	movs	r0, r3
 800325a:	f7fe fb83 	bl	8001964 <Delay_ms>
    init_debug_pin ();                       // настроить пины программирования на выход
 800325e:	f7fe fcc9 	bl	8001bf4 <init_debug_pin>
#endif
    Delay_ms(300);
 8003262:	2396      	movs	r3, #150	; 0x96
 8003264:	005b      	lsls	r3, r3, #1
 8003266:	0018      	movs	r0, r3
 8003268:	f7fe fb7c 	bl	8001964 <Delay_ms>
    setting_TMC230();                        // отправим настройки ТМС
 800326c:	f7ff fc1e 	bl	8002aac <setting_TMC230>
    init_struct();                           // инициализация данных в структуре, чтоб правильно шагать
 8003270:	f7ff f8fc 	bl	800246c <init_struct>
    stepper (9000, 0);                       // улетим в крайнюю точку чтоб от нее искать 0
 8003274:	4b4c      	ldr	r3, [pc, #304]	; (80033a8 <main+0x194>)
 8003276:	2100      	movs	r1, #0
 8003278:	0018      	movs	r0, r3
 800327a:	f7ff f84b 	bl	8002314 <stepper>
    stepper (9000, 1);                       // улетим в крайнюю точку чтоб от нее искать 0
 800327e:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <main+0x194>)
 8003280:	2101      	movs	r1, #1
 8003282:	0018      	movs	r0, r3
 8003284:	f7ff f846 	bl	8002314 <stepper>
    Delay_ms(4000);
 8003288:	23fa      	movs	r3, #250	; 0xfa
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	0018      	movs	r0, r3
 800328e:	f7fe fb69 	bl	8001964 <Delay_ms>
    search_steps ();                         // поиск от крайней точки до отключения концевика
 8003292:	f7ff f969 	bl	8002568 <search_steps>
    Delay_ms(6000);
 8003296:	4b45      	ldr	r3, [pc, #276]	; (80033ac <main+0x198>)
 8003298:	0018      	movs	r0, r3
 800329a:	f7fe fb63 	bl	8001964 <Delay_ms>
    stepper (-5000, 0);                      // улетим в крайнюю точку чтоб от нее искать 0
 800329e:	4b44      	ldr	r3, [pc, #272]	; (80033b0 <main+0x19c>)
 80032a0:	2100      	movs	r1, #0
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff f836 	bl	8002314 <stepper>
    stepper (-5000, 1);                      // улетим в крайнюю точку чтоб от нее искать 0
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <main+0x19c>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff f831 	bl	8002314 <stepper>
    Delay_ms(4000);                          // ждем пока едет
 80032b2:	23fa      	movs	r3, #250	; 0xfa
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fe fb54 	bl	8001964 <Delay_ms>
    zero_position();                         // ищем ноль
 80032bc:	f7ff f918 	bl	80024f0 <zero_position>
    Delay_ms(4000);                          // ждем, это для того чтоб с той же скоростью искало 0
 80032c0:	23fa      	movs	r3, #250	; 0xfa
 80032c2:	011b      	lsls	r3, r3, #4
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7fe fb4d 	bl	8001964 <Delay_ms>
    init_flash_data() ;                      // запишем все переменные из флеша в используемые ячейки (скорость, шаг)
 80032ca:	f7fe f917 	bl	80014fc <init_flash_data>
    init_tim3 ();                            // инит таймера 3 для шима
 80032ce:	f7fe fb5d 	bl	800198c <init_tim3>
	husart1.rx_counter = 0;                  // сбросим счетчик чтоб точно началось с 0 байта запись
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <main+0x1a0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	769a      	strb	r2, [r3, #26]
	read_TMC2300 (0, 0x6A);                  // чтоб понять в каком положении был двигатель и инициализировать его
 80032d8:	216a      	movs	r1, #106	; 0x6a
 80032da:	2000      	movs	r0, #0
 80032dc:	f7ff fbc2 	bl	8002a64 <read_TMC2300>
    Delay_ms(4);
 80032e0:	2004      	movs	r0, #4
 80032e2:	f7fe fb3f 	bl	8001964 <Delay_ms>
    check_iris (husart1.rx_buffer[9]);       // проверить в какой позиции сейчас шторка
 80032e6:	4b33      	ldr	r3, [pc, #204]	; (80033b4 <main+0x1a0>)
 80032e8:	7cdb      	ldrb	r3, [r3, #19]
 80032ea:	0018      	movs	r0, r3
 80032ec:	f000 f8f0 	bl	80034d0 <check_iris>
    init_wdt ();                             // инициализация вач дога
 80032f0:	f7fe fa20 	bl	8001734 <init_wdt>
    init_Uart2 (57600);                      // юарт Малинка
 80032f4:	23e1      	movs	r3, #225	; 0xe1
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fa63 	bl	80027c4 <init_Uart2>

   //const	 uint16_t  FLASH_SIZE = (*((uint16_t*)FLASHSIZE_BASE)) << 10;   // размер памяти узнать

	for(;;){
		iwdt_reset();                          // сбросить ватч дог
 80032fe:	f7fe fa3d 	bl	800177c <iwdt_reset>
		/*if (point_flags->dma_ok){            // если сработало ДМА то можно фильтровать значения
			point_flags->dma_ok = FALSE;
			filtr_adc ();
		}*/
		if (!point_flags->zero_in_programm) parsing_data();    // обработать данные с юарта только когда не обнуляемся
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <main+0x1a4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	789b      	ldrb	r3, [r3, #2]
 8003308:	2202      	movs	r2, #2
 800330a:	4013      	ands	r3, r2
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <main+0x102>
 8003312:	f7ff fbf9 	bl	8002b08 <parsing_data>
		if (point_flags->reset_setting) {                      // вернуть в исходное положение настройки скорости и шага после обнуления
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <main+0x1a4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	789b      	ldrb	r3, [r3, #2]
 800331c:	2204      	movs	r2, #4
 800331e:	4013      	ands	r3, r2
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <main+0x122>
			point_flags->reset_setting = FALSE;
 8003326:	4b24      	ldr	r3, [pc, #144]	; (80033b8 <main+0x1a4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	789a      	ldrb	r2, [r3, #2]
 800332c:	2104      	movs	r1, #4
 800332e:	438a      	bics	r2, r1
 8003330:	709a      	strb	r2, [r3, #2]
			init_flash_data ();                                // вернуть настройку скорости
 8003332:	f7fe f8e3 	bl	80014fc <init_flash_data>
		}
		if (point_flags->pid_ok) {                             // если сработал флаг ПИД
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <main+0x1a4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	789b      	ldrb	r3, [r3, #2]
 800333c:	2210      	movs	r2, #16
 800333e:	4013      	ands	r3, r2
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d029      	beq.n	800339a <main+0x186>
			point_flags->pid_ok = FALSE;
 8003346:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <main+0x1a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	789a      	ldrb	r2, [r3, #2]
 800334c:	2110      	movs	r1, #16
 800334e:	438a      	bics	r2, r1
 8003350:	709a      	strb	r2, [r3, #2]
			TIM3->CCR1 = computePID (adc_buf[1], open, kp, ki, kd, 0.02, min, max);
 8003352:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <main+0x1a8>)
 8003354:	885b      	ldrh	r3, [r3, #2]
 8003356:	0018      	movs	r0, r3
 8003358:	f7fd ff46 	bl	80011e8 <__aeabi_ui2f>
 800335c:	1c06      	adds	r6, r0, #0
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <main+0x1ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	0018      	movs	r0, r3
 8003364:	f7fd fef2 	bl	800114c <__aeabi_i2f>
 8003368:	4684      	mov	ip, r0
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <main+0x1b0>)
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	4b16      	ldr	r3, [pc, #88]	; (80033c8 <main+0x1b4>)
 8003370:	681d      	ldr	r5, [r3, #0]
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <main+0x1b8>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <main+0x1bc>)
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	4b16      	ldr	r3, [pc, #88]	; (80033d4 <main+0x1c0>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4c16      	ldr	r4, [pc, #88]	; (80033d8 <main+0x1c4>)
 8003380:	9303      	str	r3, [sp, #12]
 8003382:	9102      	str	r1, [sp, #8]
 8003384:	4b15      	ldr	r3, [pc, #84]	; (80033dc <main+0x1c8>)
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	9200      	str	r2, [sp, #0]
 800338a:	1c2b      	adds	r3, r5, #0
 800338c:	1c02      	adds	r2, r0, #0
 800338e:	4661      	mov	r1, ip
 8003390:	1c30      	adds	r0, r6, #0
 8003392:	f000 f90b 	bl	80035ac <computePID>
 8003396:	0003      	movs	r3, r0
 8003398:	6363      	str	r3, [r4, #52]	; 0x34
		}
		check_mov ();
 800339a:	f000 f821 	bl	80033e0 <check_mov>
		iwdt_reset();                          // сбросить ватч дог
 800339e:	e7ae      	b.n	80032fe <main+0xea>
 80033a0:	00002710 	.word	0x00002710
 80033a4:	48000400 	.word	0x48000400
 80033a8:	00002328 	.word	0x00002328
 80033ac:	00001770 	.word	0x00001770
 80033b0:	ffffec78 	.word	0xffffec78
 80033b4:	20000070 	.word	0x20000070
 80033b8:	20000000 	.word	0x20000000
 80033bc:	2000003c 	.word	0x2000003c
 80033c0:	20000010 	.word	0x20000010
 80033c4:	20000004 	.word	0x20000004
 80033c8:	20000008 	.word	0x20000008
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	20000014 	.word	0x20000014
 80033d4:	20000018 	.word	0x20000018
 80033d8:	40000400 	.word	0x40000400
 80033dc:	3ca3d70a 	.word	0x3ca3d70a

080033e0 <check_mov>:
	}
}

static inline void check_mov (void) {           // проверим есть у нас движение или нет
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
	if (point_flags->change_pin_conf == 0) {
 80033e4:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <check_mov+0xe4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	789b      	ldrb	r3, [r3, #2]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	4013      	ands	r3, r2
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d131      	bne.n	8003458 <check_mov+0x78>
		if (stepp_1.curent_steps != stepp_1.last_steps && stepp_2.curent_steps != stepp_2.last_steps) {
 80033f4:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <check_mov+0xe8>)
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4b33      	ldr	r3, [pc, #204]	; (80034c8 <check_mov+0xe8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d018      	beq.n	8003432 <check_mov+0x52>
 8003400:	4b32      	ldr	r3, [pc, #200]	; (80034cc <check_mov+0xec>)
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <check_mov+0xec>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d012      	beq.n	8003432 <check_mov+0x52>
			MOTOR_MOV_ON;                           // вывод на малинку
 800340c:	2390      	movs	r3, #144	; 0x90
 800340e:	05db      	lsls	r3, r3, #23
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	2390      	movs	r3, #144	; 0x90
 8003414:	05db      	lsls	r3, r3, #23
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	0189      	lsls	r1, r1, #6
 800341a:	430a      	orrs	r2, r1
 800341c:	619a      	str	r2, [r3, #24]
			MOTOR_STP_OFF;
 800341e:	2390      	movs	r3, #144	; 0x90
 8003420:	05db      	lsls	r3, r3, #23
 8003422:	699a      	ldr	r2, [r3, #24]
 8003424:	2390      	movs	r3, #144	; 0x90
 8003426:	05db      	lsls	r3, r3, #23
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	05c9      	lsls	r1, r1, #23
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]
		if (stepp_1.curent_steps != stepp_1.last_steps) MOTOR_MOV_ON;
				else MOTOR_MOV_OFF;
		if (stepp_2.curent_steps != stepp_2.last_steps) MOTOR_STP_ON;
				else MOTOR_STP_OFF;
	}
}
 8003430:	e044      	b.n	80034bc <check_mov+0xdc>
			MOTOR_MOV_OFF;
 8003432:	2390      	movs	r3, #144	; 0x90
 8003434:	05db      	lsls	r3, r3, #23
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	2390      	movs	r3, #144	; 0x90
 800343a:	05db      	lsls	r3, r3, #23
 800343c:	2180      	movs	r1, #128	; 0x80
 800343e:	0589      	lsls	r1, r1, #22
 8003440:	430a      	orrs	r2, r1
 8003442:	619a      	str	r2, [r3, #24]
			MOTOR_STP_ON;                           // вывод на малинку
 8003444:	2390      	movs	r3, #144	; 0x90
 8003446:	05db      	lsls	r3, r3, #23
 8003448:	699a      	ldr	r2, [r3, #24]
 800344a:	2390      	movs	r3, #144	; 0x90
 800344c:	05db      	lsls	r3, r3, #23
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	01c9      	lsls	r1, r1, #7
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
}
 8003456:	e031      	b.n	80034bc <check_mov+0xdc>
		if (stepp_1.curent_steps != stepp_1.last_steps) MOTOR_MOV_ON;
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <check_mov+0xe8>)
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <check_mov+0xe8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d009      	beq.n	8003478 <check_mov+0x98>
 8003464:	2390      	movs	r3, #144	; 0x90
 8003466:	05db      	lsls	r3, r3, #23
 8003468:	699a      	ldr	r2, [r3, #24]
 800346a:	2390      	movs	r3, #144	; 0x90
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	0189      	lsls	r1, r1, #6
 8003472:	430a      	orrs	r2, r1
 8003474:	619a      	str	r2, [r3, #24]
 8003476:	e008      	b.n	800348a <check_mov+0xaa>
				else MOTOR_MOV_OFF;
 8003478:	2390      	movs	r3, #144	; 0x90
 800347a:	05db      	lsls	r3, r3, #23
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	2390      	movs	r3, #144	; 0x90
 8003480:	05db      	lsls	r3, r3, #23
 8003482:	2180      	movs	r1, #128	; 0x80
 8003484:	0589      	lsls	r1, r1, #22
 8003486:	430a      	orrs	r2, r1
 8003488:	619a      	str	r2, [r3, #24]
		if (stepp_2.curent_steps != stepp_2.last_steps) MOTOR_STP_ON;
 800348a:	4b10      	ldr	r3, [pc, #64]	; (80034cc <check_mov+0xec>)
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <check_mov+0xec>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d009      	beq.n	80034aa <check_mov+0xca>
 8003496:	2390      	movs	r3, #144	; 0x90
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	699a      	ldr	r2, [r3, #24]
 800349c:	2390      	movs	r3, #144	; 0x90
 800349e:	05db      	lsls	r3, r3, #23
 80034a0:	2180      	movs	r1, #128	; 0x80
 80034a2:	01c9      	lsls	r1, r1, #7
 80034a4:	430a      	orrs	r2, r1
 80034a6:	619a      	str	r2, [r3, #24]
}
 80034a8:	e008      	b.n	80034bc <check_mov+0xdc>
				else MOTOR_STP_OFF;
 80034aa:	2390      	movs	r3, #144	; 0x90
 80034ac:	05db      	lsls	r3, r3, #23
 80034ae:	699a      	ldr	r2, [r3, #24]
 80034b0:	2390      	movs	r3, #144	; 0x90
 80034b2:	05db      	lsls	r3, r3, #23
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	05c9      	lsls	r1, r1, #23
 80034b8:	430a      	orrs	r2, r1
 80034ba:	619a      	str	r2, [r3, #24]
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	20000000 	.word	0x20000000
 80034c8:	2000004c 	.word	0x2000004c
 80034cc:	2000005c 	.word	0x2000005c

080034d0 <check_iris>:

static inline void check_iris (uint8_t poz) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	0002      	movs	r2, r0
 80034d8:	1dfb      	adds	r3, r7, #7
 80034da:	701a      	strb	r2, [r3, #0]
	switch (poz) {
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	d03e      	beq.n	8003562 <check_iris+0x92>
 80034e4:	dc3e      	bgt.n	8003564 <check_iris+0x94>
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d029      	beq.n	800353e <check_iris+0x6e>
 80034ea:	dc3b      	bgt.n	8003564 <check_iris+0x94>
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <check_iris+0x26>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d012      	beq.n	800351a <check_iris+0x4a>
    	point_flags->delay = 2;
		break;
	case 3:
		break;
	}
}
 80034f4:	e036      	b.n	8003564 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 80034f6:	2390      	movs	r3, #144	; 0x90
 80034f8:	05db      	lsls	r3, r3, #23
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	2390      	movs	r3, #144	; 0x90
 80034fe:	05db      	lsls	r3, r3, #23
 8003500:	2180      	movs	r1, #128	; 0x80
 8003502:	430a      	orrs	r2, r1
 8003504:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 6;
 8003506:	4b19      	ldr	r3, [pc, #100]	; (800356c <check_iris+0x9c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4918      	ldr	r1, [pc, #96]	; (8003570 <check_iris+0xa0>)
 800350e:	400a      	ands	r2, r1
 8003510:	21c0      	movs	r1, #192	; 0xc0
 8003512:	0209      	lsls	r1, r1, #8
 8003514:	430a      	orrs	r2, r1
 8003516:	601a      	str	r2, [r3, #0]
		break;
 8003518:	e024      	b.n	8003564 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 800351a:	2390      	movs	r3, #144	; 0x90
 800351c:	05db      	lsls	r3, r3, #23
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	2390      	movs	r3, #144	; 0x90
 8003522:	05db      	lsls	r3, r3, #23
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	430a      	orrs	r2, r1
 8003528:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 4;
 800352a:	4b10      	ldr	r3, [pc, #64]	; (800356c <check_iris+0x9c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	490f      	ldr	r1, [pc, #60]	; (8003570 <check_iris+0xa0>)
 8003532:	400a      	ands	r2, r1
 8003534:	2180      	movs	r1, #128	; 0x80
 8003536:	0209      	lsls	r1, r1, #8
 8003538:	430a      	orrs	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
		break;
 800353c:	e012      	b.n	8003564 <check_iris+0x94>
    	STEP3_ON;                            // выключим его
 800353e:	2390      	movs	r3, #144	; 0x90
 8003540:	05db      	lsls	r3, r3, #23
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	2390      	movs	r3, #144	; 0x90
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	2180      	movs	r1, #128	; 0x80
 800354a:	430a      	orrs	r2, r1
 800354c:	619a      	str	r2, [r3, #24]
    	point_flags->delay = 2;
 800354e:	4b07      	ldr	r3, [pc, #28]	; (800356c <check_iris+0x9c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	4906      	ldr	r1, [pc, #24]	; (8003570 <check_iris+0xa0>)
 8003556:	400a      	ands	r2, r1
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	01c9      	lsls	r1, r1, #7
 800355c:	430a      	orrs	r2, r1
 800355e:	601a      	str	r2, [r3, #0]
		break;
 8003560:	e000      	b.n	8003564 <check_iris+0x94>
		break;
 8003562:	46c0      	nop			; (mov r8, r8)
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000000 	.word	0x20000000
 8003570:	fffe1fff 	.word	0xfffe1fff

08003574 <constrain>:

float constrain(float x, float a, float b) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
    if(x < a) {
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7fc ff48 	bl	8000418 <__aeabi_fcmplt>
 8003588:	1e03      	subs	r3, r0, #0
 800358a:	d001      	beq.n	8003590 <constrain+0x1c>
        return a;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	e008      	b.n	80035a2 <constrain+0x2e>
    }
    else if(b < x) {
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fc ff40 	bl	8000418 <__aeabi_fcmplt>
 8003598:	1e03      	subs	r3, r0, #0
 800359a:	d001      	beq.n	80035a0 <constrain+0x2c>
        return b;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	e000      	b.n	80035a2 <constrain+0x2e>
    }
    else
        return x;
 80035a0:	68fb      	ldr	r3, [r7, #12]
}
 80035a2:	1c18      	adds	r0, r3, #0
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <computePID>:

// (вход, установка, п, и, д, период в секундах, мин.выход, макс. выход)
uint32_t computePID(float input, float setpoint, float kp, float ki, float kd, float dt, int minOut, int maxOut) {
 80035ac:	b5b0      	push	{r4, r5, r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  float err = (setpoint- ks) - input  ;
 80035ba:	4b43      	ldr	r3, [pc, #268]	; (80036c8 <computePID+0x11c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0018      	movs	r0, r3
 80035c0:	f7fd fdc4 	bl	800114c <__aeabi_i2f>
 80035c4:	1c03      	adds	r3, r0, #0
 80035c6:	1c19      	adds	r1, r3, #0
 80035c8:	68b8      	ldr	r0, [r7, #8]
 80035ca:	f7fd fbf1 	bl	8000db0 <__aeabi_fsub>
 80035ce:	1c03      	adds	r3, r0, #0
 80035d0:	68f9      	ldr	r1, [r7, #12]
 80035d2:	1c18      	adds	r0, r3, #0
 80035d4:	f7fd fbec 	bl	8000db0 <__aeabi_fsub>
 80035d8:	1c03      	adds	r3, r0, #0
 80035da:	617b      	str	r3, [r7, #20]
  if (ks > 0) ks -= 15;                                           // для замедления реакции
 80035dc:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <computePID+0x11c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	dd05      	ble.n	80035f0 <computePID+0x44>
 80035e4:	4b38      	ldr	r3, [pc, #224]	; (80036c8 <computePID+0x11c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3b0f      	subs	r3, #15
 80035ea:	001a      	movs	r2, r3
 80035ec:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <computePID+0x11c>)
 80035ee:	601a      	str	r2, [r3, #0]
  if (ks < 0) ks += 15;
 80035f0:	4b35      	ldr	r3, [pc, #212]	; (80036c8 <computePID+0x11c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	da05      	bge.n	8003604 <computePID+0x58>
 80035f8:	4b33      	ldr	r3, [pc, #204]	; (80036c8 <computePID+0x11c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330f      	adds	r3, #15
 80035fe:	001a      	movs	r2, r3
 8003600:	4b31      	ldr	r3, [pc, #196]	; (80036c8 <computePID+0x11c>)
 8003602:	601a      	str	r2, [r3, #0]
  static float integral = 0, prevErr = 0;
  integral = constrain(integral + err * dt * ki, minOut, maxOut);
 8003604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003606:	6978      	ldr	r0, [r7, #20]
 8003608:	f7fd faac 	bl	8000b64 <__aeabi_fmul>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	1c18      	adds	r0, r3, #0
 8003612:	f7fd faa7 	bl	8000b64 <__aeabi_fmul>
 8003616:	1c03      	adds	r3, r0, #0
 8003618:	1c1a      	adds	r2, r3, #0
 800361a:	4b2c      	ldr	r3, [pc, #176]	; (80036cc <computePID+0x120>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	1c19      	adds	r1, r3, #0
 8003620:	1c10      	adds	r0, r2, #0
 8003622:	f7fc ff39 	bl	8000498 <__aeabi_fadd>
 8003626:	1c03      	adds	r3, r0, #0
 8003628:	1c1d      	adds	r5, r3, #0
 800362a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362c:	f7fd fd8e 	bl	800114c <__aeabi_i2f>
 8003630:	1c04      	adds	r4, r0, #0
 8003632:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003634:	f7fd fd8a 	bl	800114c <__aeabi_i2f>
 8003638:	1c03      	adds	r3, r0, #0
 800363a:	1c1a      	adds	r2, r3, #0
 800363c:	1c21      	adds	r1, r4, #0
 800363e:	1c28      	adds	r0, r5, #0
 8003640:	f7ff ff98 	bl	8003574 <constrain>
 8003644:	1c02      	adds	r2, r0, #0
 8003646:	4b21      	ldr	r3, [pc, #132]	; (80036cc <computePID+0x120>)
 8003648:	601a      	str	r2, [r3, #0]
  float D = (err - prevErr) / dt;
 800364a:	4b21      	ldr	r3, [pc, #132]	; (80036d0 <computePID+0x124>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1c19      	adds	r1, r3, #0
 8003650:	6978      	ldr	r0, [r7, #20]
 8003652:	f7fd fbad 	bl	8000db0 <__aeabi_fsub>
 8003656:	1c03      	adds	r3, r0, #0
 8003658:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800365a:	1c18      	adds	r0, r3, #0
 800365c:	f7fd f8ba 	bl	80007d4 <__aeabi_fdiv>
 8003660:	1c03      	adds	r3, r0, #0
 8003662:	613b      	str	r3, [r7, #16]
  prevErr = err;
 8003664:	4b1a      	ldr	r3, [pc, #104]	; (80036d0 <computePID+0x124>)
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	601a      	str	r2, [r3, #0]
  return constrain(err * kp + integral + D * kd, minOut, maxOut);
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	6978      	ldr	r0, [r7, #20]
 800366e:	f7fd fa79 	bl	8000b64 <__aeabi_fmul>
 8003672:	1c03      	adds	r3, r0, #0
 8003674:	1c1a      	adds	r2, r3, #0
 8003676:	4b15      	ldr	r3, [pc, #84]	; (80036cc <computePID+0x120>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1c19      	adds	r1, r3, #0
 800367c:	1c10      	adds	r0, r2, #0
 800367e:	f7fc ff0b 	bl	8000498 <__aeabi_fadd>
 8003682:	1c03      	adds	r3, r0, #0
 8003684:	1c1c      	adds	r4, r3, #0
 8003686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003688:	6938      	ldr	r0, [r7, #16]
 800368a:	f7fd fa6b 	bl	8000b64 <__aeabi_fmul>
 800368e:	1c03      	adds	r3, r0, #0
 8003690:	1c19      	adds	r1, r3, #0
 8003692:	1c20      	adds	r0, r4, #0
 8003694:	f7fc ff00 	bl	8000498 <__aeabi_fadd>
 8003698:	1c03      	adds	r3, r0, #0
 800369a:	1c1d      	adds	r5, r3, #0
 800369c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800369e:	f7fd fd55 	bl	800114c <__aeabi_i2f>
 80036a2:	1c04      	adds	r4, r0, #0
 80036a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036a6:	f7fd fd51 	bl	800114c <__aeabi_i2f>
 80036aa:	1c03      	adds	r3, r0, #0
 80036ac:	1c1a      	adds	r2, r3, #0
 80036ae:	1c21      	adds	r1, r4, #0
 80036b0:	1c28      	adds	r0, r5, #0
 80036b2:	f7ff ff5f 	bl	8003574 <constrain>
 80036b6:	1c03      	adds	r3, r0, #0
 80036b8:	1c18      	adds	r0, r3, #0
 80036ba:	f7fc fed5 	bl	8000468 <__aeabi_f2uiz>
 80036be:	0003      	movs	r3, r0
}
 80036c0:	0018      	movs	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b006      	add	sp, #24
 80036c6:	bdb0      	pop	{r4, r5, r7, pc}
 80036c8:	200000e0 	.word	0x200000e0
 80036cc:	200000e4 	.word	0x200000e4
 80036d0:	200000e8 	.word	0x200000e8

080036d4 <set_pid>:

uint32_t set_pid (uint32_t new_pid) {
 80036d4:	b590      	push	{r4, r7, lr}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af02      	add	r7, sp, #8
 80036da:	6078      	str	r0, [r7, #4]
	if (new_pid < 0 || new_pid > 100) return 0;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b64      	cmp	r3, #100	; 0x64
 80036e0:	d901      	bls.n	80036e6 <set_pid+0x12>
 80036e2:	2300      	movs	r3, #0
 80036e4:	e045      	b.n	8003772 <set_pid+0x9e>
	pid_param = new_pid;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <set_pid+0xa8>)
 80036ec:	701a      	strb	r2, [r3, #0]
	uint16_t mirror = 0;
 80036ee:	240e      	movs	r4, #14
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	2200      	movs	r2, #0
 80036f4:	801a      	strh	r2, [r3, #0]
	mirror = map (new_pid, 0, 100, 600, 3000);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	2396      	movs	r3, #150	; 0x96
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4a20      	ldr	r2, [pc, #128]	; (8003780 <set_pid+0xac>)
 80036fe:	9200      	str	r2, [sp, #0]
 8003700:	2264      	movs	r2, #100	; 0x64
 8003702:	2100      	movs	r1, #0
 8003704:	f7fd fe62 	bl	80013cc <map>
 8003708:	0002      	movs	r2, r0
 800370a:	193b      	adds	r3, r7, r4
 800370c:	801a      	strh	r2, [r3, #0]
	if (mirror > open){
 800370e:	193b      	adds	r3, r7, r4
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	4b1c      	ldr	r3, [pc, #112]	; (8003784 <set_pid+0xb0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	dd11      	ble.n	800373e <set_pid+0x6a>
		if (mirror > open ){ ks = mirror - open; } //ks = ks /2;
 800371a:	193b      	adds	r3, r7, r4
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	4b19      	ldr	r3, [pc, #100]	; (8003784 <set_pid+0xb0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	dd06      	ble.n	8003734 <set_pid+0x60>
 8003726:	193b      	adds	r3, r7, r4
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <set_pid+0xb0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1ad2      	subs	r2, r2, r3
 8003730:	4b15      	ldr	r3, [pc, #84]	; (8003788 <set_pid+0xb4>)
 8003732:	601a      	str	r2, [r3, #0]
		open = mirror;
 8003734:	230e      	movs	r3, #14
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	4b12      	ldr	r3, [pc, #72]	; (8003784 <set_pid+0xb0>)
 800373c:	601a      	str	r2, [r3, #0]
	}

	if (mirror < open) {
 800373e:	210e      	movs	r1, #14
 8003740:	187b      	adds	r3, r7, r1
 8003742:	881a      	ldrh	r2, [r3, #0]
 8003744:	4b0f      	ldr	r3, [pc, #60]	; (8003784 <set_pid+0xb0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	429a      	cmp	r2, r3
 800374a:	da11      	bge.n	8003770 <set_pid+0x9c>
		if (mirror < open ){ ks = mirror - open; } // ks = ks /2;
 800374c:	187b      	adds	r3, r7, r1
 800374e:	881a      	ldrh	r2, [r3, #0]
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <set_pid+0xb0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	da06      	bge.n	8003766 <set_pid+0x92>
 8003758:	187b      	adds	r3, r7, r1
 800375a:	881a      	ldrh	r2, [r3, #0]
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <set_pid+0xb0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	1ad2      	subs	r2, r2, r3
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <set_pid+0xb4>)
 8003764:	601a      	str	r2, [r3, #0]
		open = mirror;
 8003766:	230e      	movs	r3, #14
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <set_pid+0xb0>)
 800376e:	601a      	str	r2, [r3, #0]
	}
	return new_pid;
 8003770:	687b      	ldr	r3, [r7, #4]
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b005      	add	sp, #20
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	2000001c 	.word	0x2000001c
 8003780:	00000bb8 	.word	0x00000bb8
 8003784:	20000010 	.word	0x20000010
 8003788:	200000e0 	.word	0x200000e0

0800378c <setting_pin_rasbery>:

uint32_t setting_pin_rasbery (uint32_t sign) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	if (sign == 0) {point_flags->change_pin_conf = 0; return 1;}
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d107      	bne.n	80037aa <setting_pin_rasbery+0x1e>
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <setting_pin_rasbery+0x40>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	789a      	ldrb	r2, [r3, #2]
 80037a0:	2140      	movs	r1, #64	; 0x40
 80037a2:	438a      	bics	r2, r1
 80037a4:	709a      	strb	r2, [r3, #2]
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00b      	b.n	80037c2 <setting_pin_rasbery+0x36>
	if (sign == 1) {point_flags->change_pin_conf = 1; return 1;}
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <setting_pin_rasbery+0x34>
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <setting_pin_rasbery+0x40>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	789a      	ldrb	r2, [r3, #2]
 80037b6:	2140      	movs	r1, #64	; 0x40
 80037b8:	430a      	orrs	r2, r1
 80037ba:	709a      	strb	r2, [r3, #2]
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <setting_pin_rasbery+0x36>
	return 0;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	20000000 	.word	0x20000000

080037d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
	...

080037dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037dc:	4813      	ldr	r0, [pc, #76]	; (800382c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037de:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80037e0:	4813      	ldr	r0, [pc, #76]	; (8003830 <LoopForever+0x6>)
    LDR R1, [R0]
 80037e2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80037e4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80037e6:	4a13      	ldr	r2, [pc, #76]	; (8003834 <LoopForever+0xa>)
    CMP R1, R2
 80037e8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80037ea:	d105      	bne.n	80037f8 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80037ec:	4812      	ldr	r0, [pc, #72]	; (8003838 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80037ee:	4913      	ldr	r1, [pc, #76]	; (800383c <LoopForever+0x12>)
    STR R1, [R0]
 80037f0:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80037f2:	4813      	ldr	r0, [pc, #76]	; (8003840 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80037f4:	4913      	ldr	r1, [pc, #76]	; (8003844 <LoopForever+0x1a>)
    STR R1, [R0]
 80037f6:	6001      	str	r1, [r0, #0]

080037f8 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037f8:	4813      	ldr	r0, [pc, #76]	; (8003848 <LoopForever+0x1e>)
  ldr r1, =_edata
 80037fa:	4914      	ldr	r1, [pc, #80]	; (800384c <LoopForever+0x22>)
  ldr r2, =_sidata
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <LoopForever+0x26>)
  movs r3, #0
 80037fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003800:	e002      	b.n	8003808 <LoopCopyDataInit>

08003802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003806:	3304      	adds	r3, #4

08003808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800380a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800380c:	d3f9      	bcc.n	8003802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8003810:	4c11      	ldr	r4, [pc, #68]	; (8003858 <LoopForever+0x2e>)
  movs r3, #0
 8003812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003814:	e001      	b.n	800381a <LoopFillZerobss>

08003816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003818:	3204      	adds	r2, #4

0800381a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800381a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800381c:	d3fb      	bcc.n	8003816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800381e:	f7ff ffd7 	bl	80037d0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003822:	f000 f81d 	bl	8003860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003826:	f7ff fcf5 	bl	8003214 <main>

0800382a <LoopForever>:

LoopForever:
    b LoopForever
 800382a:	e7fe      	b.n	800382a <LoopForever>
  ldr   r0, =_estack
 800382c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8003830:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8003834:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8003838:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800383c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8003840:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8003844:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8003848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800384c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003850:	080039bc 	.word	0x080039bc
  ldr r2, =_sbss
 8003854:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003858:	200000ec 	.word	0x200000ec

0800385c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800385c:	e7fe      	b.n	800385c <ADC1_IRQHandler>
	...

08003860 <__libc_init_array>:
 8003860:	b570      	push	{r4, r5, r6, lr}
 8003862:	2600      	movs	r6, #0
 8003864:	4d0c      	ldr	r5, [pc, #48]	; (8003898 <__libc_init_array+0x38>)
 8003866:	4c0d      	ldr	r4, [pc, #52]	; (800389c <__libc_init_array+0x3c>)
 8003868:	1b64      	subs	r4, r4, r5
 800386a:	10a4      	asrs	r4, r4, #2
 800386c:	42a6      	cmp	r6, r4
 800386e:	d109      	bne.n	8003884 <__libc_init_array+0x24>
 8003870:	2600      	movs	r6, #0
 8003872:	f000 f819 	bl	80038a8 <_init>
 8003876:	4d0a      	ldr	r5, [pc, #40]	; (80038a0 <__libc_init_array+0x40>)
 8003878:	4c0a      	ldr	r4, [pc, #40]	; (80038a4 <__libc_init_array+0x44>)
 800387a:	1b64      	subs	r4, r4, r5
 800387c:	10a4      	asrs	r4, r4, #2
 800387e:	42a6      	cmp	r6, r4
 8003880:	d105      	bne.n	800388e <__libc_init_array+0x2e>
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	00b3      	lsls	r3, r6, #2
 8003886:	58eb      	ldr	r3, [r5, r3]
 8003888:	4798      	blx	r3
 800388a:	3601      	adds	r6, #1
 800388c:	e7ee      	b.n	800386c <__libc_init_array+0xc>
 800388e:	00b3      	lsls	r3, r6, #2
 8003890:	58eb      	ldr	r3, [r5, r3]
 8003892:	4798      	blx	r3
 8003894:	3601      	adds	r6, #1
 8003896:	e7f2      	b.n	800387e <__libc_init_array+0x1e>
 8003898:	080039b4 	.word	0x080039b4
 800389c:	080039b4 	.word	0x080039b4
 80038a0:	080039b4 	.word	0x080039b4
 80038a4:	080039b8 	.word	0x080039b8

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	46c0      	nop			; (mov r8, r8)
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
